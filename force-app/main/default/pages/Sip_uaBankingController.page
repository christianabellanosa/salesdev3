<apex:page cache="false" controller="Sip_MultipleLanguageController" applyBodyTag="false" applyHtmlTag="false" showHeader="false"
           standardStylesheets="false">
    <script type="text/javascript">
        (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('accountSummaryController', controller);

        controller.$inject = ['$rootScope', '$scope', '$timeout', 'util', 'AccountService', '$document'];

        function controller($rootScope, $scope, $timeout, util, AccountService, $document) {

            $scope.$watch('data.preSelectedAccount.accountId', function (newVal, oldVal, scope) {

                $scope.loadAccountSummary();
            });

            $scope.loadAccountSummary = function () {

                if ($scope.data && $scope.data.preSelectedAccount) {

                    if (!$rootScope.mainSpinner) {
                        $rootScope.mainSpinner = true;
                        AccountService.getAccountSummaryById(
                          $scope.data.preSelectedAccount.accountId, $rootScope.currentUser.id
                        ).then(function (value) {
                            $rootScope.mainSpinner = false;
                            if (util.isSuccessService(value)) {
                                $scope.accountSummary = value;

                                //20170802 use preselect account global service
                                $scope.accountSummary.GlobalService = $scope.data.preSelectedAccount.globalService;
                            }
                        }, function (err) {

                            console.debug(err);
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                    }
                }
            };
            $scope.loadAccountSummary();

            $scope.isEditFlg = false;
            $scope.onClickEditNotify = function () {
                $scope.isEditFlg = true;
                $timeout(function () {
                    $('#txt-acc-notity-limit').focus();
                    $('#txt-acc-notity-limit').select();
                }, 200);
            };

            $scope.confirmEdit = function () {

                AccountService.updateSFNotificationAmount(
                  $scope.data.preSelectedAccount.accountId, $scope.accountSummary.BalanceNotificationLimit
                ).then(function (value) {

                    if (util.isSuccessService(value)) {
                        $scope.isEditFlg = false;
                    }
                });
            };

            var dataBeforeChange = '';

            angular.element('#acc-summary').on('click', function (e) {

                if (!document.getElementById('txt-acc-notity-limit').contains(e.target) && !document.getElementById('save-btn').contains(e.target) && !document.getElementById('pencil-btn').contains(e.target)) {
                    $scope.$apply(function () {
                        if ($scope.isEditFlg === true) {
                            $scope.accountSummary.BalanceNotificationLimit = dataBeforeChange;
                        }
                        $scope.isEditFlg = false;
                    })
                } else if (document.getElementById('save-btn').contains(e.target)) {
                    $scope.confirmEdit();
                } else if (document.getElementById('pencil-btn').contains(e.target)) {
                    $scope.onClickEditNotify();
                    dataBeforeChange = $scope.accountSummary.BalanceNotificationLimit;
                }
            });
            angular.element('#acc-summary').on('click', function (e) {

                if (!document.getElementById('txt-acc-notity-limit').contains(e.target) && !document.getElementById('save-btn').contains(e.target) && !document.getElementById('pencil-btn').contains(e.target)) {
                    $scope.$apply(function () {
                        if ($scope.isEditFlg === true) {
                            $scope.accountSummary.BalanceNotificationLimit = dataBeforeChange;
                        }
                        $scope.isEditFlg = false;
                    })
                } else if (document.getElementById('save-btn').contains(e.target)) {
                    $scope.confirmEdit();
                } else if (document.getElementById('pencil-btn').contains(e.target)) {
                    $scope.onClickEditNotify();
                    dataBeforeChange = $scope.accountSummary.BalanceNotificationLimit;
                }
            });

            $scope.onInputDown = function ($event) {

                if ($event.keyCode === 13) {
                    $scope.confirmEdit();
                }
            };
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('allWaiverFavorController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', 'util', '$timeout',
            'AmenityService', 'AccountService', 'ts_name', 'ts_field'];

        function controller($rootScope, $scope, $state, util, $timeout,
                            AmenityService, AccountService, ts_name, ts_field) {

            $scope.ts_name = ts_name;
            $scope.ts_field = ts_field;
            $scope.confirmModal = $('#waiver-favor-confirm-modal');
            $scope.successModal = $('#waiver-favor-success-modal');
            $scope.messageModal = $('#message-modal');

            $scope.confirmTicketInfo = [];
            $scope.forms = {};
            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: 'SIP_All_waivers_and_favours__c'
            };

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;
                if ($scope.data.widgetFeature === 'confirm-waiver-favor') {

                    if ($scope.data.selectedWF && $scope.data.charge.remark === '') {
                        $scope.data.charge.remark = $scope.data.selectedWF.pnrRemarks;
                    }

                    $scope.populateConfirmTicketInfo();
                    $scope.fundCheck();
                }
                else if ($scope.data.widgetFeature === 'apply-waiver-favor') {
                    $scope.checkTicketSelection();
                }
            });

            /***********
             * apply waiver start
             ***********/
            $scope.selectAllClick = function () {

                if ($scope.data.PNR) {
                    var sTickets = _.filter($scope.data.PNR.SalesReservationDetail.TicketInfo, function (t) {

                        return _.toLower(t.IsSelectable) === 'true' || t.IsSelectable === true;
                    });

                    _.forEach(sTickets, function (t) {

                        t.IsSelected = $scope.isSelectAll;
                    });

                    if ($scope.isSelectAll) {
                        $scope.data.selectedPrimaryTicketCount = sTickets.length;
                    }
                    else {
                        $scope.data.selectedPrimaryTicketCount = 0;
                    }
                }
            };
            $scope.checkTicketSelection = function () {

                var sTickets = _.filter($scope.data.PNR.SalesReservationDetail.TicketInfo, function (t) {

                    return _.toLower(t.IsSelectable) === 'true' || t.IsSelectable === true;
                });

                $scope.isSelectAll = (sTickets.length > 0) && sTickets.length === $scope.data.selectedPrimaryTicketCount;
            };
            $scope.selectableTicket = function (ticket) {

                if (_.toLower(ticket.IsSelectable) === 'true' || ticket.IsSelectable === true) {
                    return true;
                }
                else {
                    return false;
                }
            };
            $scope.notSelectableTicket = function (ticket) {

                if (_.toLower(ticket.IsSelectable) === 'true' || ticket.IsSelectable === true) {
                    return false;
                }
                else {
                    return true;
                }
            };
            $scope.toggleTicket = function (ticket) {

                if (ticket) {

                    if (ticket.IsSelectable) {
                        ticket.IsSelected = ticket.IsSelected ? false : true;
                    }

                    if (ticket.IsSelected) {
                        $scope.data.selectedPrimaryTicketCount++;
                        $scope.data.selectedTicketCount++;
                    }
                    else {
                        $scope.data.selectedPrimaryTicketCount--;
                        $scope.data.selectedTicketCount--;
                    }

                    _(ticket.ConjunctiveTickets).forEach(function (conjunctiveTicket) {

                        conjunctiveTicket.IsSelected = ticket.IsSelected;
                        if (conjunctiveTicket.IsSelected) {
                            $scope.data.selectedTicketCount++;
                        }
                        else {
                            $scope.data.selectedTicketCount--;
                        }
                    });

                    $scope.checkTicketSelection();
                }
            };
            $scope.removeTicket = function (index) {

                $scope.confirmTicketInfo.splice(index, 1);
                $scope.data.selectedPrimaryTicketCount = 0;
                $scope.data.selectedTicketCount = 0;

                _.forEach($scope.data.PNR.SalesReservationDetail.TicketInfo, function (ticket) {

                    if (ticket.IsSelected) {
                        var isRemain = false;
                        _.forEach($scope.confirmTicketInfo, function (tic) {

                            if (ticket.TicketNumber === tic.TicketNumber) {
                                isRemain = true;
                                $scope.data.selectedPrimaryTicketCount++;
                                $scope.data.selectedTicketCount++;
                            }
                        });
                        ticket.IsSelected = isRemain;

                        _(ticket.ConjunctiveTickets).forEach(function (conjunctiveTicket) {

                            conjunctiveTicket.IsSelected = ticket.IsSelected;
                            if (conjunctiveTicket.IsSelected) {
                                $scope.data.selectedTicketCount++;
                            }
                        });
                    }
                });

                $scope.fundCheck();
                $scope.checkTicketSelection();
            };
            $scope.addTicket = function () {

                $scope.confirmTicketInfo.push({ "IsSelected": false });
                $scope.fundCheck();
            };

            $scope.applyWaiver = function () {

                $state.go($state.current.parent + '-all-waiver-favor', { feature: 'confirm-waiver-favor' });

                // if ($scope.data.selectedPrimaryTicketCount > 0) {
                //
                //   $rootScope.mainSpinner = true;
                //   AmenityService.proceedTickets(
                //     $scope.data.PNR
                //   ).then(function (value) {
                //
                //     $rootScope.mainSpinner = false;
                //     $scope.data.PNR = value;
                //     $state.go($state.current.parent + '-all-waiver-favor', {feature: 'confirm-waiver-favor'});
                //
                //   }, function (err) {
                //
                //     console.debug(err);
                //     $rootScope.mainSpinner = false;
                //     $rootScope.$broadcast('showMessage',
                //       {
                //         type: 'alert',
                //         text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                //       });
                //   });
                // }
            };
            /***********
             * apply waiver end
             ***********/

            /***********
             * confirm waiver start
             ***********/
            $scope.populateConfirmTicketInfo = function () {

                $scope.currField = _.cloneDeep($scope.data.tsField);
                $scope.confirmTicketInfo = [];
                if ($scope.data.PNR) {
                    _.forEach($scope.data.PNR.SalesReservationDetail.TicketInfo, function (ticket) {

                        if (ticket.IsSelected) {
                            $scope.confirmTicketInfo.push(ticket);
                        }
                    });
                }

                if ($scope.confirmTicketInfo.length === 0) {
                    $scope.addTicket();

                    // var tIndex = -1;
                    // if ($scope.currField) {
                    //   _.forEach($scope.currField.Fields, function (f, $index) {
                    //
                    //     if (f.Key == 'TicketNumber') {
                    //       tIndex = $index;
                    //       return false;
                    //     }
                    //   });
                    //
                    //   if (tIndex > -1) {
                    //     $scope.currField.Fields.splice(tIndex, 1);
                    //   }
                    // }
                }
            };
            $scope.back = function () {

                $state.go($state.current.parent + '-all-waiver-favor', { feature: 'apply-waiver-favor' });
            };
            $scope.confirmWaiver = function () {

                if ($rootScope.IsImpersonation) {
                    return;
                }

                var canConfirm = true;
                if ($scope.data.selectedWF.category === $scope.ts_name.seatAssignment ||
                  $scope.data.selectedWF.category === $scope.ts_name.upgradeInventoryConversion ||
                  $scope.data.selectedWF.category === $scope.ts_name.classConversion ||
                  $scope.data.selectedWF.category === $scope.ts_name.fareMatch ||
                  $scope.data.selectedWF.category === $scope.ts_name.guaranteeAirfareMissedTicketing) {

                    _.forEach($scope.confirmTicketInfo, function (tInfo) {

                        if (!tInfo.quantity || tInfo.quantity === 0) {
                            canConfirm = false;
                            return false;
                        }
                    })
                }

                if (canConfirm) {
                    $scope.confirmModal.modal();
                }
                else {
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!$Label.Please_enter_quantity_for_all_line_item_s}'
                      });
                }
            };

            $scope.comfirmMessage = false;
            $scope.confirmApplyWaiver = function () {

                if ($scope.confirmTicketInfo.length > 0) {

                    var comment = $scope.data.charge.comment;
                    var remark = $scope.data.charge.remark;
                    var payerId = $scope.data.charge.accSearchId;
                    var beneficiaryId = $scope.data.charge.beneficiarySearchId;
                    var callerId = '';
                    var callerFirstName = '';
                    var callerLastName = '';
                    if ($scope.data.callerAccount) {
                        callerId = $scope.data.callerAccount.accountId;
                        callerFirstName = $scope.data.callerAccount.callerFirstName;
                        callerLastName = $scope.data.callerAccount.callerLastName;
                    }

                    $rootScope.mainSpinner = true; // 1. recheck fund availability
                    AccountService.getAccountById(
                      payerId, $rootScope.currentUser.id
                    ).then(function (value) {

                        var fund = value.Fund;
                        $rootScope.mainSpinner = false;
                        if ($scope.confirmTicketInfo.length > 0 &&
                          fund >= $scope.data.charge.chargeAmount) {

                            $rootScope.mainSpinner = true; // 2. send request to confirm waiver
                            $scope.data.PNR.SalesReservationDetail.tickets = $scope.confirmTicketInfo;
                            AmenityService.confirmAllTravelerServices(
                              $scope.data.PNR,
                              $rootScope.currentUser.id,
                              payerId,
                              beneficiaryId,
                              callerId,
                              $scope.data.selectedWF.productCode,
                              comment,
                              callerFirstName,
                              callerLastName,
                              remark
                            ).then(function (value) {

                                $rootScope.mainSpinner = false;
                                if (value.errors && value.errors.length > 0) {
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: value.errors[0]
                                      });
                                }
                                else {
                                    $scope.data.transactionEntity = value;
                                    $scope.confirmModal.modal('hide');
                                    $scope.successModal.modal();

                                    $scope.canDismiss = true;
                                    if ($rootScope.currentUser.isInternalUser) {
                                        $scope.canDismiss = false;
                                    }

                                    $scope.waiverCode = $scope.data.transactionEntity.ticketInfos[0].waiverFavorId;
                                    $scope.data.remarkMessage = '';
                                    AmenityService.sendRemarks(
                                      $scope.data.PNR,
                                      $rootScope.currentUser.id,
                                      $scope.waiverCode,
                                      $scope.data.selectedWF.productCode,
                                      remark
                                    ).then(function (value) {

                                        if (value.success) {
                                            if (value.messages.length > 0) {
                                                $scope.data.remarkMessage = value.messages[0];
                                            }
                                        }
                                        else {
                                            $scope.data.remarkMessage = '{!JSENCODE($Label.Sip_Alert_Fail_To_Send_Remarks)}';
                                        }
                                        $scope.canDismiss = true;
                                    }, function (err) {

                                        $scope.data.remarkMessage = '{!JSENCODE($Label.Sip_Alert_Fail_To_Send_Remarks)}';
                                        $scope.canDismiss = true;
                                    });
                                }
                            }, function (err) {

                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: err
                                  });
                            });
                        }
                        else {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.SIP_Alert_Amenity_Fund_Insufficient)}'
                              });
                        }
                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                }
            };
            $scope.fundCheck = function () {

                if ($scope.data.selectedWF) {
                    if ($scope.data.selectedWF.category === $scope.ts_name.advancePurchase) {
                        var total = 0;
                        _.forEach($scope.confirmTicketInfo, function (ticket) {

                            ticket.customAmount = 0;
                            if (_.isNumber(ticket.qualifyingFare) && _.isNumber(ticket.requestFare)) {
                                ticket.customAmount = ticket.qualifyingFare - ticket.requestFare;
                            }
                            total += ticket.customAmount;
                        });
                        $scope.data.charge.chargeAmount = total;
                    }
                    else if ($scope.data.selectedWF.category === $scope.ts_name.offshoreCtoAgentError) {
                        var total = 0;
                        _.forEach($scope.confirmTicketInfo, function (ticket) {

                            if (_.isNumber(ticket.customAmount)) {
                                total += ticket.customAmount;
                            }
                        });
                        $scope.data.charge.chargeAmount = total;
                    }
                    else if ($scope.data.selectedWF.category === $scope.ts_name.seatAssignment ||
                      $scope.data.selectedWF.category === $scope.ts_name.upgradeInventoryConversion ||
                      $scope.data.selectedWF.category === $scope.ts_name.classConversion ||
                      $scope.data.selectedWF.category === $scope.ts_name.fareMatch ||
                      $scope.data.selectedWF.category === $scope.ts_name.guaranteeAirfareMissedTicketing) {
                        var total = 0;
                        _.forEach($scope.confirmTicketInfo, function (ticket) {

                            if (_.isNumber(ticket.quantity)) {
                                ticket.customAmount = $scope.data.selectedWF.price * ticket.quantity;
                            }
                            else {
                                ticket.customAmount = 0;
                            }
                            total += ticket.customAmount;
                        });
                        $scope.data.charge.chargeAmount = total;
                    }
                    else {
                        $scope.data.charge.chargeAmount = $scope.confirmTicketInfo.length * $scope.data.selectedWF.price;
                    }
                    $rootScope.$broadcast('fundCheck', {});
                }
                else {
                    $scope.data.charge.chargeAmount = '';
                }
            };

            $scope.lineStringValChanged = function ($event) {

            };
            $scope.lineNumberValChanged = function ($event) {

                $timeout(function () {
                    $scope.fundCheck();
                }, 100);
            };
            $scope.messageModal.on('hidden.bs.modal', function (e) {

                if ($scope.comfirmMessage) {
                    $scope.comfirmMessage = false;

                    $scope.fundCheck();
                }
            });
            /***********
             * confirm waiver end
             ***********/

            /***********
             * clipboard start
             ***********/
            $scope.initCopyToClipboard = function (el) {

                var id = 'wc-' + el.ticketNumber + el.waiverFavorId;
                var element = document.getElementById(id);

                if (document.body.createTextRange) { // ie

                    $('.copied').removeClass('copied');
                    $(element).addClass("copied");
                    window.clipboardData.setData('Text', element.innerHTML);
                }
                else if (window.getSelection) { // moz, opera, webkit

                    var selection = window.getSelection();
                    var range = document.createRange();
                    range.selectNodeContents(element);
                    selection.removeAllRanges();
                    selection.addRange(range);
                    document.execCommand("Copy");
                }
                document.body.onclick = function (e) {

                    if ($(e.target.previousElementSibling).attr("id") === id) {
                        return;
                    }
                    $(element).removeClass("copied");
                };
            };
            /***********
             * clipboard end
             ***********/

            /***********
             * email start
             ***********/
            // $scope.popup = {
            //   sendMeEmail: false,
            //   sendOtherEmail: false,
            //   otherEmailAddr: '',
            //   isInvalidEmail: false
            // };
            $scope.dismissWaiver = function () {

                $scope.successModal.modal('hide');
                // if ($scope.popup.sendMeEmail) {
                //   AmenityService.sendEmail(
                //     $rootScope.currentUser.id,
                //     $scope.data.transactionEntity.referenceNumber
                //   ).then(function () {
                //
                //     $scope.successModal.modal('hide');
                //   }, function (err) {
                //
                //     console.debug(err);
                //     $scope.successModal.modal('hide');
                //   })
                // }
                // else {
                //   $scope.successModal.modal('hide');
                // }
            };
            /***********
             * email end
             ***********/

            $scope.successModal.on('hidden.bs.modal', function (e) {
                $state.go($state.current.parent + '-home', {
                    feature: 'init'
                });
            });
            $scope.goHome = function () {

                $rootScope.$broadcast('goHome', { needConfirm: true });
            };
        }
    })();
    (function () {
        'use strict';

        angular.module('bankingModule')
          .directive('amenityWidget', [function () {

              var widgetController = ['$rootScope', '$scope', '$window', '$timeout', '$state', '$stateParams', 'util',
                  'PNRService', 'ProductService', 'AccountService', 'UnitedClubService', 'BonusMilesService',
                  'UpgradeService', 'StatusNominationService', 'TravelCertificateService',
                  'AmenityService', 'ts_name', 'ts_field', 'CMSService',
                  function ($rootScope, $scope, $window, $timeout, $state, $stateParams, util,
                            PNRService, ProductService, AccountService, UnitedClubService, BonusMilesService,
                            UpgradeService, StatusNominationService, TravelCertificateService,
                            AmenityService, ts_name, ts_field, CMSService) {

                      $scope.consentAgreed = $rootScope.currentUser.permission.SIP_Amenity_Consent__c ||
                        $rootScope.currentUser.isInternalUser ||
                        $rootScope.IsImpersonation;

                      $scope.reviewConsent = function () {

                          $rootScope.isAmenityConsent = true;
                          $state.go('login-stopover')
                      };

                      /***** abe added multi-language on 0828 ******/
                      $scope.showConsentBanner = false;
                      $scope.closeConsentBanner = function () {
                          $scope.showConsentBanner = false;
                      };
                      $scope.getAmenityConsent = function () {
                          if (!$scope.consentAgreed) {
                              CMSService.getAmenityConsent().then(function (value) {
                                  var language = value.language;
                                  var currentLang = !!$rootScope.currentUser ? $rootScope.currentUser.userLanguage : $rootScope.currentLang;
                                  var notification = '{!$Label.SIP_Language_Under_Construction}';
                                  var currentDisplay = util.getLangDisplay(currentLang);
                                  var defaultDisplay = util.getLangDisplay(language);
                                  if (currentLang !== language) {
                                      $scope.showConsentBanner = true;
                                  }
                                  $scope.notificationConsent = notification
                                    .replace('{0}', currentDisplay)
                                    .replace('{1}', defaultDisplay);
                              });
                          }
                      };
                      /***** end of abe add 0828 ******/
                      //20190604 rwern PPR
                      $scope.amenityPermission = $rootScope.currentUser.permission.SIP_Penalty_Waiver__c ||
                        $rootScope.currentUser.permission.SIP_All_waivers_and_favours__c ||
                        $rootScope.currentUser.permission.SIP_Economy_Plus__c ||
                        $rootScope.currentUser.permission.SIP_Bonus_Miles__c ||
                        $rootScope.currentUser.permission.SIP_Travel_Certificates__c ||
                        //$rootScope.currentUser.permission.SIP_Regional_Premier_Upgrades__c ||
                        //$rootScope.currentUser.permission.SIP_Global_Premier_Upgrades__c ||
                        $rootScope.currentUser.permission.SIP_Plus_Points__c ||
                        $rootScope.currentUser.permission.SIP_United_Club_Membership__c ||
                        $rootScope.currentUser.permission.SIP_United_Club_Passes__c ||
                        $rootScope.currentUser.permission.SIP_Silver_Status_Nominations__c ||
                        $rootScope.currentUser.permission.SIP_Gold_Status_Nominations__c ||
                        $rootScope.currentUser.permission.SIP_Platinum_Status_Nominations__c ||
                        $rootScope.currentUser.permission.SIP_1K_Status_Nominations__c ||
                        $rootScope.currentUser.permission.SIP_Global_Service_Status_Nominations__c ||
                        $rootScope.currentUser.permission.SIP_Beverage_Vouchers__c;

                      //20180604 corporate user can do fund transfer as long as they have fund transfer light (SIP_Funds_Transfer_Membership__c) permission
                      $scope.bankingPermission = $rootScope.currentUser.permission.SIP_Account_Summary__c ||
                        $rootScope.currentUser.permission.SIP_Funds_Transfer__c || $rootScope.currentUser.permission.SIP_Funds_Transfer_Reserved_Account__c || $rootScope.currentUser.SIP_Funds_Transfer_Membership__c;
                      $scope.edPermission = $rootScope.currentUser.permission.SIP_Executive_Desk_Related_Access__c;
                      $scope.specialLoad = $rootScope.currentUser.isInternalUser &&
                        ($rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ||
                          $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c);

                      // Ryan: testing purpose
                      // $scope.edPermission = true;
                      // $scope.specialLoad = false;
                      // $scope.amenityPermission = true;
                      // $scope.bankingPermission = true;
                      // $scope.consentAgreed = true;
                      // $rootScope.currentUser.permission.SIP_Summary_Report__c = false;
                      // $rootScope.currentUser.permission.SIP_Banking_Transactional_Reports__c = false;

                      // for
                      // ED
                      $scope.datasource.callerAccount = {};
                      $scope.ezr = {
                          accountnumber: $rootScope.getQueryString('accountnumber'),
                          //recordlocator: $rootScope.getQueryString('recordlocator'),
                          mpnumber: $rootScope.getQueryString('mpnumber')
                      };

                      $scope.wfSearchValue = '';
                      $scope.listLimitTo = 500;
                      $scope.amenityOrBanking = '';
                      $scope.amenityTargetDisplaySteps = [
                          'amenity',
                          'amenity-fee-waivers',
                          'amenity-ep-seat-assignment',
                          'amenity-premier-access',
                          'amenity-united-club-otp',
                          'amenity-united-subscriptions', // Added By Moin :: Amenity Page Target Tile
                          'amenity-baggage-subscriptions',// Added By Moin :: Amenity Page Target Tile
                          'amenity-economy-plus-subscriptions', // Added By Moin :: Amenity Page Target Tile
                          'amenity-club-membership', // Added By Moin :: Amenity Page Target Tile
                          'amenity-wifi-subscriptions', // Added By Moin :: Amenity Page Target Tile
                          'amenity-status-nomination',
                          'amenity-single-nomination',
                          'amenity-upgrades',
                          'amenity-bonus-miles',
                          'amenity-all-waivers-favors'
                      ];
                      $scope.widget = $('#amenity-widget');
                      $scope.optionDiv = $scope.widget.find('#amenity-option');
                      $scope.resetStep = 'init';
                      $scope.datasource = $scope.datasource || {};
                      $scope.datasource.widgetFeature = $stateParams.feature;

                      $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                          $scope.wfSearchValue = '';
                          $scope.tooltips = -1;
                          $scope.widgetSpinner = false;
                          $scope.datasource.widgetFeature = toParams.feature;

                          if ($scope.datasource.widgetFeature === 'init') {
                              $scope.initWidget();
                          }

                          if ($scope.datasource.widgetFeature === 'amenity') {
                              if ($scope.datasource.preSelectedAccount &&
                                $scope.datasource.preSelectedAccount.accountId) {
                                  _($scope.optionDiv.find('.col-xs-6.col-sm-3')).forEach(function (tile) {
                                      $(tile).show();
                                      $(tile).addClass('animate-scale-up');
                                  });
                              }
                              else {
                                  $scope.reset();
                              }
                          }

                          if ($scope.datasource.widgetFeature === 'amenity-upgrades') {
                              if ($scope.upgradesForm.txtUpgradeAccount) {
                                  $timeout(function () {
                                      $scope.upgradesForm.txtUpgradeAccount.$validate();
                                  }, 1000);
                              }
                          }
                      });

                      $scope.getAccClass = util.getAccClass;

                      $scope.getAccSymbol = util.getAccSymbol;

                      $scope.getAccTitle = util.getAccTitle;

                      $scope.purgePreSelectedAccount = function () {

                          $scope.datasource.preSelectedAccount = {
                              accountId: '',
                              accountName: '',
                              typeName: '',
                              extId: '',
                              balance: 0,
                              instrument: 0,
                              globalService: 0,
                              isTestAccount: false,
                              bankingBalanceAccess: false,
                              mileagePlusNumberOfCompany: '',
                              comment: ''
                          };
                          $scope.accountSymbol = '';
                      };
                      $scope.purgeCallerAccount = function (isPurgeName) {

                          if (!$scope.datasource.callerAccount) {
                              $scope.datasource.callerAccount = {};
                          }

                          $scope.datasource.callerAccount.accountId = '';
                          $scope.datasource.callerAccount.accountName = '';
                          $scope.datasource.callerAccount.typeName = '';
                          $scope.datasource.callerAccount.extId = '';
                          if (isPurgeName) {
                              $scope.datasource.callerAccount.callerFirstName = '';
                              $scope.datasource.callerAccount.callerLastName = '';
                          }
                      };
                      $scope.clearContext = function (isClearCompanyAgency) {

                          // fee waiver / economy plus
                          $scope.pnrSearchValue = '';
                          $scope.newpnrSearchValue = '';
                          //$scope.feeWaiverSelection = '';
                          $scope.pnrSearchNameValue = '';

                          // united club
                          $scope.membershipLastName = '';
                          $scope.membershipMPlusNumber = '';
                          $scope.baggageLastName = '';
                          $scope.baggageMPlusNumber = '';
                          $scope.economyPlusLastName = '';
                          $scope.economyPlusMPlusNumber = '';
                          $scope.wifiLastName = '';
                          $scope.wifiMPlusNumber = '';
                          $scope.otpLastName = '';
                          $scope.otpMPlusNumber = '';
                          $scope.otpCount = '';
                          $scope.otpEmail = '';
                          $scope.otpEmailConfirm = '';
                          $scope.otpEmailCount = '';

                          // status nomination
                          $scope.snMPlusNumber = '';
                          $scope.snLastName = '';

                          // upgrades
                          $scope.upgradeAccount = {};

                          //Bonus Miles
                          $scope.milePlusNum_bm = '';
                          $scope.lastName_bm = '';

                          // p.s.... add all widget search variable

                          if ($scope.edPermission) {

                              if ($scope.ezr.recordlocator) {
                                  $scope.pnrSearchValue = $scope.ezr.recordlocator;
                              }
                              if ($scope.ezr.mpnumber) {
                                  $scope.membershipMPlusNumber = $scope.ezr.mpnumber;
                                  $scope.otpMPlusNumber = $scope.ezr.mpnumber;
                                  $scope.snMPlusNumber = $scope.ezr.mpnumber;
                                  $scope.milePlusNum_bm = $scope.ezr.mpnumber;
                                  $scope.baggageMPlusNumber = $scope.ezr.mpnumber;
                                  $scope.economyPlusMPlusNumber = $scope.ezr.mpnumber;
                                  $scope.wifiMPlusNumber = $scope.ezr.mpnumber;
                              }
                          }

                          if ($scope.datasource) {
                              // fee waiver
                              $scope.datasource.pnrSearchValue = '';
                              //Hamed PW
                              $scope.datasource.newpnrSearchValue = '';
                              $scope.datasource.pnrSearchNameValue = '';
                              $scope.datasource.PNR = {};
                              $scope.datasource.NEWPNR = {};
                              $scope.datasource.selectedPrimaryTicketCount = 0;
                              $scope.datasource.selectedTicketCount = 0;
                              $scope.datasource.selectedTicketWithoutInfantIndCount = 0; //Hamed PW
                              $scope.datasource.selectedTicketNumber = [];
                              $scope.datasource.transactionEntity = {};

                              // united club
                              $scope.datasource.membershipData = {};
                              $scope.datasource.baggageData = {};
                              $scope.datasource.economyPlusData = {};
                              $scope.datasource.wifiData = {};
                              $scope.datasource.otpMembershipData = {};
                              $scope.datasource.otpEmailData = {};

                              // status nomination
                              $scope.datasource.statusNomData = {};

                              // upgrades
                              $scope.datasource.upgradeData = {};

                              // bonus Miles
                              $scope.datasource.bonusMilesData = {};

                              //beverage coupons
                              $scope.datasource.beverageCouponsData = {};

                              //travel certificate
                              $scope.datasource.travelCertificateData = {};

                              // all waivers favors
                              $scope.datasource.selectedWF = '';
                          }

                          if (isClearCompanyAgency) {
                              $scope.isValidAccount = false;
                              $scope.amenitySearchValue = '';
                              $scope.bankingSearchValue = '';
                              $scope.callerSearchValue = '';
                              if ($scope.datasource) {
                                  $scope.purgePreSelectedAccount();
                                  $scope.purgeCallerAccount(true);
                              }
                          }
                      };
                      $scope.clearContext(true);
                      $scope.reset = function () {

                          $scope.clearContext(true);
                          $state.go('secure-landing-home', {
                              feature: $scope.resetStep
                          });
                      };
                      //cherry
                      $scope.resetOption = function () {
                          $scope.clearContext();
                          $state.go('secure-landing-home', {
                              feature: 'amenity'
                          });
                          // if($stateParams.feature == 'apply-status-nomination-mass') {
                          //   if($scope.datasource.nominationData && $scope.datasource.nominationData.isMpUpdated) {
                          //     $scope.datasource.nominationData.forwardPage ='close';
                          //     $('#nomination-save-remind-modal').modal();
                          //   }else {
                          //     $scope.clearContext();
                          //     $state.go('secure-landing-home', {
                          //       feature: 'amenity'
                          //     });
                          //   }
                          // } else {
                          //   $scope.clearContext();
                          //   $state.go('secure-landing-home', {
                          //     feature: 'amenity'
                          //   });
                          // }
                      };
                      //cherry
                      // $rootScope.$on('goHomePage',function(){
                      //   $scope.clearContext();
                      //   $timeout(function(){
                      //     $state.go('secure-landing-home', {
                      //       feature: 'amenity'
                      //     });
                      //   },1000);
                      // });


                      $scope.nextStep = function ($event) {
                          //debugger
                          //Clearing FeeWaiver Selection
                          $scope.feeWaiverSelection = '';
                          $scope.feeWaiverSeletctionPW = '';
                          $scope.feeWaiverSeletctionTVT = '';
                          $scope.feeWaiverSeletctionPWTVT = '';
                          // if ($rootScope.currentUser.SIP_Current_Portal_App__c === $rootScope.APP_NAME.meeting) {
                          var meetingAccountId = $scope.datasource.preSelectedAccount.accountId;
                          var userId = $rootScope.currentUser.id;

                          AccountService.getUserWithMeetingAcctPermissions(userId, meetingAccountId).then(function (res) {
                              if (res) {
                                  $scope.meetingAcctPermissions = res[0].userPermissionMap;
                                  util.setRootCurPermission(res[0].userPermissionMap);
                                  $scope.amenityWidgetAccessPermission = {
                                    
                                    PremierAccess: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.PremierAccess :
                                        ($scope.meetingAcctPermissions.Premier_Access__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.PremierAccess),

                                      PenaltyWaiver: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        ($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiver ||
                                          $scope.datasource.preSelectedAccount.accountTilePermission.TicketValueTransfer ||
                                          $scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiverAndTicketValueTransfer) : (($scope.meetingAcctPermissions.SIP_Penalty_Waiver__c || $scope.meetingAcctPermissions.SIP_Ticket_Value_Transfer__c ||
                                          $scope.meetingAcctPermissions.SIP_Penalty_Ticket_Waiver__c) &&
                                          ($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiver ||
                                            $scope.datasource.preSelectedAccount.accountTilePermission.TicketValueTransfer || $scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiverAndTicketValueTransfer)),

                                      AllWaiversAndFavours: $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                      $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr ?
                                        true :
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor ?
                                          $scope.datasource.preSelectedAccount.accountTilePermission.AllWaiversAndFavours :
                                          ($scope.meetingAcctPermissions.SIP_All_waivers_and_favours__c &&
                                            $scope.datasource.preSelectedAccount.accountTilePermission.AllWaiversAndFavours),

                                      EconomyPlus: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.EconomyPlus :
                                        ($scope.meetingAcctPermissions.SIP_Economy_Plus__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.EconomyPlus),

                                      BonusMiles: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.BonusMiles :
                                        ($scope.meetingAcctPermissions.SIP_Bonus_Miles__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.BonusMiles),

                                      TravelCertificates: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.TravelCertificates :
                                        ($scope.meetingAcctPermissions.SIP_Travel_Certificates__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.TravelCertificates),
                                      // Start :: 20210914 Moin :: Added Permissions for Baggage /EconomyPlus/WIFI Subscriptions tile
                                      BaggageSubscriptions: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.BaggageSubscriptions :
                                        ($scope.meetingAcctPermissions.Baggage_Subscription__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.BaggageSubscriptions),                                      
                                      EconomyPlusSubscriptions: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.EconomyPlusSubscriptions :
                                        ($scope.meetingAcctPermissions.Economy_Plus_Subscription__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.EconomyPlusSubscriptions),

                                      WifiSubscriptions: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.WifiSubscriptions :
                                        ($scope.meetingAcctPermissions.United_WIFI_Subscription__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.WifiSubscriptions),
                                      //END

                                      //20190604 rwern PPR: remove RPU/GPU, add PlusPoints(UGC)
                                      /*Upgrades: (($rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.agent ||
                                                    $rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.agtMgr) &&
                                                    $scope.datasource.preSelectedAccount.typeName == $rootScope.ACC_TYPE.aor) ?
                                                    ($scope.datasource.preSelectedAccount.accountTilePermission.RegionalPremierUpgrades ||
                                                        $scope.datasource.preSelectedAccount.accountTilePermission.GlobalPremierUpgrades) :
                                                    ($scope.meetingAcctPermissions.SIP_Regional_Premier_Upgrades__c &&
                                                        $scope.datasource.preSelectedAccount.accountTilePermission.RegionalPremierUpgrades) ||
                                                    ($scope.meetingAcctPermissions.SIP_Global_Premier_Upgrades__c &&
                                                        $scope.datasource.preSelectedAccount.accountTilePermission.GlobalPremierUpgrades),*/
                                      Upgrades: (($rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName == $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.PlusPoints :
                                        $scope.meetingAcctPermissions.SIP_Plus_Points__c &&
                                        $scope.datasource.preSelectedAccount.accountTilePermission.PlusPoints,

                                      UnitedClubMembership: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.UnitedClubMembership :
                                        ($scope.meetingAcctPermissions.SIP_United_Club_Membership__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.UnitedClubMembership),

                                      UnitedClubPasses: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.UnitedClubPasses :
                                        ($scope.meetingAcctPermissions.SIP_United_Club_Passes__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.UnitedClubPasses),

                                      TicketSuspension: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.TicketSuspension :
                                        ($scope.meetingAcctPermissions.SIP_Ticket_Suspension__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.TicketSuspension),

                                      Nominations: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        ($scope.datasource.preSelectedAccount.accountTilePermission.SilverStatusNominations ||
                                          $scope.datasource.preSelectedAccount.accountTilePermission.GoldStatusNominations ||
                                          $scope.datasource.preSelectedAccount.accountTilePermission.PlatinumStatusNominations ||
                                          $scope.datasource.preSelectedAccount.accountTilePermission.KStatusNominations ||
                                          $scope.datasource.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations) :
                                        ($scope.meetingAcctPermissions.SIP_Silver_Status_Nominations__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.SilverStatusNominations) ||
                                        ($scope.meetingAcctPermissions.SIP_Gold_Status_Nominations__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.GoldStatusNominations) ||
                                        ($scope.meetingAcctPermissions.SIP_Platinum_Status_Nominations__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.PlatinumStatusNominations) ||
                                        ($scope.meetingAcctPermissions.SIP_1K_Status_Nominations__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.KStatusNominations) ||
                                        ($scope.meetingAcctPermissions.SIP_Global_Service_Status_Nominations__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations),

                                      BeverageVouchers: (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                        $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                        $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) ?
                                        $scope.datasource.preSelectedAccount.accountTilePermission.BeverageVouchers :
                                        ($scope.meetingAcctPermissions.SIP_Beverage_Vouchers__c &&
                                          $scope.datasource.preSelectedAccount.accountTilePermission.BeverageVouchers),
                                      AnnualNominationProgram: ($rootScope.currentUser.recordTypeName === $rootScope.RECORD_TYPE_NAME.agtHol && $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) || $rootScope.currentUser.recordTypeName === $rootScope.RECORD_TYPE_NAME.agtBrc || ($rootScope.currentUser.isInternalUser && $scope.datasource.preSelectedAccount.typeName !== $rootScope.ACC_TYPE.dis) ? false : $scope.datasource.preSelectedAccount.accountTilePermission.AnnualNominationProgram && $scope.meetingAcctPermissions.SIP_Annual_Nomination_Program__c,
                                      NominationTrackingReport: ($rootScope.currentUser.recordTypeName === $rootScope.RECORD_TYPE_NAME.agtHol && $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) || $rootScope.currentUser.recordTypeName === $rootScope.RECORD_TYPE_NAME.agtBrc || ($rootScope.currentUser.isInternalUser && $scope.datasource.preSelectedAccount.typeName !== $rootScope.ACC_TYPE.dis) ? false : $scope.datasource.preSelectedAccount.accountTilePermission.NominationTrackingReport && $scope.meetingAcctPermissions.SIP_Nomination_Tracking_Report__c

                                  };

                                  // 20200122 rwern REQ-0890: needed to move the below code into the 'then()' block so it executes in order
                                  if ($scope.datasource && !$scope.datasource.dates) {
                                      StatusNominationService.OpenAndCloseDates().then(function (value) {
                                          $scope.datasource.dates = value;
                                      }, function (err) {
                                          $rootScope.$broadcast('showMessage', {
                                              type: 'alert',
                                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                          });
                                      });
                                  }
                                  if (!$scope.nomiProgramVisibility) {
                                      StatusNominationService.tileVisibility().then(function (data) {
                                          $scope.nomiProgramVisibility = data;
                                          $scope.amenityWidgetAccessPermission.AnnualNominationProgram = $scope.amenityWidgetAccessPermission.AnnualNominationProgram && $scope.nomiProgramVisibility;
                                      }, function (err) {
                                          $rootScope.$broadcast('showMessage', {
                                              type: 'alert',
                                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                          });
                                      });
                                  } else {
                                      $scope.amenityWidgetAccessPermission.AnnualNominationProgram = $scope.amenityWidgetAccessPermission.AnnualNominationProgram && $scope.nomiProgramVisibility;
                                  }
                                  if (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                                    $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                                    $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) {
                                      if (($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiver)) {
                                          $scope.feeWaiverSelection = 'PW';
                                          $scope.feeWaiverSeletctionPW = 'PW';
                                      }
                                      if (($scope.datasource.preSelectedAccount.accountTilePermission.TicketValueTransfer)) {
                                          if (!$scope.feeWaiverSelection) {
                                              $scope.feeWaiverSelection = 'TVT';
                                          }
                                          $scope.feeWaiverSeletctionTVT = 'TVT';
                                      }
                                      if (($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiverAndTicketValueTransfer)) {
                                          if (!$scope.feeWaiverSelection) {
                                              $scope.feeWaiverSelection = 'PWTVT';
                                          }
                                          $scope.feeWaiverSeletctionPWTVT = 'PWTVT';
                                      }
                                  } else {
                                      if ($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiver && $rootScope.currentUser.permission.SIP_Penalty_Waiver__c) {
                                          $scope.feeWaiverSelection = 'PW';
                                          $scope.feeWaiverSeletctionPW = 'PW';
                                      }
                                      if ($scope.datasource.preSelectedAccount.accountTilePermission.TicketValueTransfer && $rootScope.currentUser.permission.SIP_Ticket_Value_Transfer__c) {
                                          if (!$scope.feeWaiverSelection) {
                                              $scope.feeWaiverSelection = 'TVT';
                                          }
                                          $scope.feeWaiverSeletctionTVT = 'TVT';
                                      }
                                      if ($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiverAndTicketValueTransfer && $rootScope.currentUser.permission.SIP_Penalty_Ticket_Waiver__c) {
                                          if (!$scope.feeWaiverSelection) {
                                              $scope.feeWaiverSelection = 'PWTVT';
                                          }
                                          $scope.feeWaiverSeletctionPWTVT = 'PWTVT';
                                      }
                                  }
                                  var feature = $stateParams.feature;
                                  var next;
                                  switch (feature) {
                                      case 'init':
                                          $scope.clearContext();
                                          next = 'amenity';

                                          $scope.travelerServices = [];
                                          AccountService.getCategoriesByAccountId(
                                            $scope.datasource.preSelectedAccount.accountId
                                          ).then(function (value) {
                                                //20200129 economy plus temporary removal from traveler services list
                                                var valueList = [];
                                                _.forEach(value, function (c) {
                                                    if (c.category !== 'Economy Plus') {
                                                        valueList.push(c);
                                                    }
                                                });
                                                //$scope.travelerServices = value;
                                                $scope.travelerServices = valueList;
                                                $scope.travelerServices = _.orderBy($scope.travelerServices, ['name'], ['asc']);
                                          });

                                          $state.go('secure-landing-home', {
                                              feature: next
                                          });
                                          break;
                                      case 'amenity':
                                          next = $event.currentTarget.id;
                                          if (next === 'amenity-learn-more') {
                                              var pdf = $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ?
                                                '{!URLFOR($Resource.Sip_United_Services_Fund_Corporate)}' :
                                                '{!URLFOR($Resource.Sip_United_Services_Fund_TMC)}';
                                              $window.open(pdf, '_blank');
                                          }
                                          else {
                                              $scope.clearContext();

                                              if (next === 'amenity-upgrades') {

                                                  var found = false;
                                                  _.forEach($scope.upgradeAccounts, function (uAcc) {

                                                      if (uAcc.Name === $scope.amenitySearchValue) {
                                                          found = true;
                                                      }
                                                  });

                                                  if (!found) {
                                                      $scope.upgradeAccounts = [{
                                                          'Id': $scope.datasource.preSelectedAccount.accountId,
                                                          'Name': $scope.datasource.preSelectedAccount.accountName,
                                                          'ExtId': $scope.datasource.preSelectedAccount.extId,
                                                          'AccountType': $scope.datasource.preSelectedAccount.typeName,
                                                          'BankingBalanceAccess': $scope.datasource.preSelectedAccount.bankingBalanceAccess,
                                                          'Fund': $scope.datasource.preSelectedAccount.balance,
                                                          'Instrument': $scope.datasource.preSelectedAccount.instrument,
                                                          'GlobalService': $scope.datasource.preSelectedAccount.globalService,
                                                          'IsTestAccount': $scope.datasource.preSelectedAccount.isTestAccount,
                                                          'MileagePlusNumberOfCompany': $scope.datasource.preSelectedAccount.mileagePlusNumberOfCompany
                                                      }];
                                                  }
                                              }

                                              $state.go('secure-landing-home', {
                                                  feature: next
                                              });
                                          }
                                          break;
                                      default:
                                          next = $event.currentTarget.id;
                                          $state.go('secure-landing-home', {
                                              feature: next
                                          });
                                          break;
                                  }
                                  // /20200122 rwern REQ-0890
                              }
                          })
                          // }
                      };

                      $scope.back = function () {

                          var feature = $stateParams.feature;
                          var prev;

                          switch (feature) {
                              case 'amenity-united-club-membership':
                              case 'amenity-united-club-otp':
                                  prev = 'amenity';
                                  break;
                            //add back function for single nomination
                              case 'amenity-single-nomination':
                              case 'apply-status-nomination-mass':
                              case 'apply-status-nomination-report':
                                  prev = 'amenity-status-nomination';
                                  break;
                            //START :: 20210928 Moin :: Previous page for united subscription sub tiles
                            case 'amenity-baggage-subscriptions': // For Baggage Tile
                                prev ='amenity-united-subscriptions';
                                break;
                            case 'amenity-economy-plus-subscriptions': // For Economy Plus Tile
                                prev ='amenity-united-subscriptions';
                                break;
                            case 'amenity-club-membership': //For Club Membership Tile
                                prev ='amenity-united-subscriptions';
                                break;
                            case 'amenity-wifi-subscriptions': //For WIFI Tile
                                prev ='amenity-united-subscriptions';
                                break;
                            //END
                              default:
                                  prev = 'amenity';
                                  break;
                          }

                          $state.go('secure-landing-home', {
                              feature: prev
                          });

                          // cherry remind change not saved for nomination review page.
                          // if(feature == 'apply-status-nomination-mass') {
                          //   if($scope.datasource.nominationData && $scope.datasource.nominationData.isMpUpdated) {
                          //     $scope.datasource.nominationData.forwardPage ='back';
                          //     $('#nomination-save-remind-modal').modal();
                          //   }else {
                          //     $state.go('secure-landing-home', {
                          //       feature: prev
                          //     });
                          //   }
                          // } else {
                          //   $state.go('secure-landing-home', {
                          //     feature: prev
                          //   });
                          // }
                      };
                      $scope.initWidget = function () {
                          var initOption = !$scope.amenityPermission && $scope.bankingPermission ? 'banking' : 'amenity';
                          $scope.amenityOrBankingToggle(initOption);
                          $scope.reset();
                          console.log('initWidget')
                          $scope.getAmenityAccounts();
                          $scope.getBankingAccounts();
                          $scope.getCallerAccounts();
                          $scope.getUpgradeAccountList(true);
                          $scope.getAmenityConsent();
                      };

                      $scope.getUpgradeAccountList = function (skipSpinner) {

                          var searchValue = '';
                          if ($scope.specialLoad && $scope.amenitySearchValue.length >= 1) {
                              searchValue = $scope.amenitySearchValue;
                          }
                          var extId = '';
                          if ($scope.datasource.callerAccount.extId) {
                              extId = $scope.datasource.callerAccount.extId;
                          }
                          $scope.upgradeAccounts = [];

                          if (!skipSpinner) {
                              $scope.widgetSpinner = true;
                          }
                          AccountService.getAccountsForUpgrades(
                            $rootScope.currentUser.id, searchValue, extId
                          ).then(function (value) {
                              if (value.Accounts.length === 0 && searchValue !== '') {
                                  $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                                    });
                              }

                              if (!skipSpinner) {
                                  $scope.widgetSpinner = false;
                              }
                              $scope.upgradeAccounts = value.Accounts;
                          }, function (err) {

                              if (!skipSpinner) {
                                  $scope.widgetSpinner = false;
                              }
                              console.debug(err);
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };

                      $scope.getAmenityAccounts = function (txtId) {
                          var searchValue = '';
                          if ($scope.specialLoad && $scope.amenitySearchValue.length >= 1) {
                              searchValue = $scope.amenitySearchValue;
                          }
                          var extId = '';
                          if ($scope.datasource.callerAccount.extId) {
                              extId = $scope.datasource.callerAccount.extId;
                          }

                          $scope.aAccountList = [];
                          $scope.widgetSpinner = true;
                          $scope.currentAppName = $rootScope.currentUser.SIP_Current_Portal_App__c
                          AccountService.getAccounts(
                            $rootScope.currentUser.id, '', searchValue, extId, $scope.currentAppName
                          ).then(function (value) {
                              if (value.Accounts.length === 0 && searchValue !== '') {
                                  $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                                    });
                              }
                              $scope.widgetSpinner = false;
                              $scope.aAccountList = value.Accounts;
                              if (txtId) {
                                  $('#' + txtId).dropdown('toggle');
                              }
                          }, function (err) {

                              console.debug(err);
                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                      $scope.getBankingAccounts = function () {
                          $scope.bAccountList = [];
                          AccountService.getFromAccountsForFundsTx(
                            $rootScope.currentUser.id, $rootScope.currentUser.accId
                          ).then(function (value) {

                              $scope.bAccountList = value.Accounts;
                              $scope.showAccountMiniPanel = true
                              if ($scope.bAccountList.length < 2 && $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp) {
                                  $scope.showAccountMiniPanel = false;
                              };
                          }, function (err) {

                              console.debug(err);
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                      $scope.getCallerAccounts = function (txtId) {
                          $scope.cAccountList = [];

                          if ($scope.edPermission) {
                              if ($scope.callerSearchValue && $scope.callerSearchValue.length >= 1) {

                                  $scope.widgetSpinner = true;
                                  AccountService.getAccounts(
                                    $rootScope.currentUser.id, '', $scope.callerSearchValue, ''
                                  ).then(function (value) {
                                      if (value.Accounts.length === 0 && $scope.callerSearchValue !== '') {
                                          $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                                            });
                                      }

                                      $scope.widgetSpinner = false;
                                      var accs = value.Accounts;

                                      // remove discretionary account from list
                                      $scope.cAccountList = accs.filter(function (item) {
                                          return item.AccountType !== $rootScope.ACC_TYPE.dis;
                                      });

                                      if (txtId) {
                                          $('#' + txtId).dropdown('toggle');
                                      }
                                  }, function (err) {

                                      console.debug(err);
                                      $scope.widgetSpinner = false;
                                      $rootScope.$broadcast('showMessage',
                                        {
                                            type: 'alert',
                                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                        });
                                  });
                              }
                              else if ($scope.ezr.accountnumber) {

                                  // ed: populate caller account from query string
                                  AccountService.getAccountByIATA(
                                    $scope.ezr.accountnumber,
                                    $rootScope.currentUser.id
                                  ).then(function (value) {

                                      // 1) get caller account
                                      var callerAccount = value;

                                      if (callerAccount.Id) {

                                          // 2) add into list
                                          $scope.cAccountList.push(callerAccount);

                                          // 3) populate variable
                                          $scope.datasource.callerAccount.accountId = callerAccount.Id;
                                          $scope.datasource.callerAccount.accountName = callerAccount.Name;
                                          $scope.datasource.callerAccount.typeName = callerAccount.AccountType;
                                          $scope.datasource.callerAccount.extId = callerAccount.ExtId;
                                          $scope.callerSearchValue = callerAccount.Name;

                                          // 4) reload amenity account based on caller account .....
                                          $scope.getAmenityAccounts();
                                      }
                                      else {
                                          // 5) display only discretionary account
                                          $scope.datasource.callerAccount.accountId = '';
                                          $scope.datasource.callerAccount.accountName = '';
                                          $scope.datasource.callerAccount.typeName = '';
                                          $scope.datasource.callerAccount.extId = '';
                                          $scope.getAmenityAccounts();
                                      }
                                  }, function (err) {

                                      console.debug(err);
                                      $rootScope.$broadcast('showMessage',
                                        {
                                            type: 'alert',
                                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                        });
                                  });
                              }
                          }
                      };
                      $scope.amenityOrBankingToggle = function (type) {

                          switch (type) {
                              case 'amenity':
                                  if ($scope.amenityOrBanking !== 'amenity') {
                                      $scope.amenityOrBanking = 'amenity';
                                      $scope.syncB2ASelection();
                                  }
                                  break;

                              case 'banking':
                                  if ($scope.amenityOrBanking !== 'banking') {
                                      $scope.amenityOrBanking = 'banking';
                                      $scope.syncA2BSelection();
                                  }
                                  break;
                          }
                      };
                      $scope.syncA2BSelection = function () {

                          if ($scope.datasource.preSelectedAccount &&
                            $scope.datasource.preSelectedAccount.accountId) {

                              var recordFound = false;
                              _($scope.bAccountList).forEach(function (listItem) {

                                  if (listItem.Id === $scope.datasource.preSelectedAccount.accountId) {
                                      $scope.bankingSearchValue = listItem.Name;
                                      recordFound = true;
                                      return false;
                                  }
                              });

                              if (!recordFound) {
                                  $scope.purgePreSelectedAccount();
                              }
                          }
                          else {
                              $scope.bankingSearchValue = '';
                          }
                      };
                      $scope.syncB2ASelection = function () {

                          if ($scope.datasource.preSelectedAccount &&
                            $scope.datasource.preSelectedAccount.accountId) {

                              var recordFound = false;
                              _($scope.aAccountList).forEach(function (listItem) {

                                  if (listItem.Id === $scope.datasource.preSelectedAccount.accountId) {
                                      $scope.amenitySearchValue = listItem.Name;
                                      recordFound = true;
                                      return false;
                                  }
                              });

                              if (!recordFound) {
                                  $scope.purgePreSelectedAccount();
                              }
                          }
                          else {
                              $scope.amenitySearchValue = '';
                          }
                      };
                      $scope.bankingAccSummary = function () {

                          if ($rootScope.currentPermission.SIP_Account_Summary__c) {
                              $state.go($state.current.parent + '-banking-account-summary', {
                                  feature: 'banking-summary'
                              });
                          } else {
                              $scope.bankingFundTransfer();
                          }
                      };
                      $scope.bankingFundTransfer = function () {

                          $state.go($state.current.parent + '-banking-fund-transfer', {
                              feature: 'apply-fund-transfer'
                          });
                      };

                      //Jason changed 20170622
                      $scope.tsFieldCatalog = [
                          {
                              Category: ts_name.advancePurchase,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.qualifyingFare,
                                  ts_field.requestFare,
                                  ts_field.cityPair,
                                  ts_field.domesticOrInternational
                              ]
                          },
                          {
                              Category: ts_name.classConversion,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.marketingFlightNumber,
                                  ts_field.originalBookingClass,
                                  ts_field.newBookingClass,
                                  ts_field.cityPair,
                                  ts_field.quantity
                              ]
                          },
                          {
                              Category: ts_name.extendEticketValidity,
                              Fields: [
                                  ts_field.TicketNumber
                              ]
                          },
                          {
                              Category: ts_name.fareMatch,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.matchedAirline,
                                  ts_field.matchedFare,
                                  ts_field.fareBasis,
                                  ts_field.cityPair,
                                  ts_field.quantity
                              ]
                          },
                          {
                              Category: ts_name.guaranteeAirfareMissedTicketing,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.originalFare,
                                  ts_field.oldFareBasis,
                                  ts_field.cityPair,
                                  ts_field.quantity
                              ]
                          },
                          {
                              Category: ts_name.nameChange,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.oldName,
                                  ts_field.newName
                              ]
                          },
                          {
                              Category: ts_name.ticketValueTransfer,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.oldName,
                                  ts_field.newName
                              ]
                          },
                          {
                              Category: ts_name.nameCorrection,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.oldName,
                                  ts_field.newName
                              ]
                          },
                          {
                              Category: ts_name.offshoreCtoAgentError,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.descOfError,
                                  ts_field.waiverType,
                                  ts_field.customAmount
                              ]
                          },
                          {
                              Category: ts_name.offshoreCtoFees,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.reason
                              ]
                          },
                          {
                              Category: ts_name.penaltyWaiverAndNameChange,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.oldName,
                                  ts_field.newName
                              ]
                          },
                          {
                              Category: ts_name.penaltyWaiverAndTicketValueTransfer,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.oldName,
                                  ts_field.newName
                              ]
                          },
                          {
                              Category: ts_name.refundDuplicateTicket,
                              Fields: [
                                  ts_field.TicketNumber
                              ]
                          },
                          {
                              Category: ts_name.reissuePenaltyFee,
                              Fields: [
                                  ts_field.TicketNumber
                              ]
                          },
                          {
                              Category: ts_name.seatAssignment,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.SeatNumbers,
                                  ts_field.quantity
                              ]
                          },
                          {
                              Category: ts_name.suspendedTicket,
                              Fields: [
                                  ts_field.TicketNumber
                              ]
                          },
                          {
                              Category: ts_name.ticketRevalidation,
                              Fields: [
                                  ts_field.TicketNumber
                              ]
                          },
                          {
                              Category: ts_name.timeStay,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.originalReturnDate,
                                  ts_field.newReturnDate
                              ]
                          },
                          {
                              Category: ts_name.upgradeInventoryConversion,
                              Fields: [
                                  ts_field.TicketNumber,
                                  ts_field.marketingFlightNumber,
                                  ts_field.originalBookingClass,
                                  ts_field.newBookingClass,
                                  ts_field.cityPair,
                                  ts_field.quantity
                              ]
                          }
                      ];

                      $scope.selectTravelerService = function (type) {

                          $scope.clearContext();
                          $scope.datasource.selectedWF = type;

                          $scope.datasource.tsField = null;
                          _.forEach($scope.tsFieldCatalog, function (c) {

                              if (c.Category === type.category) {
                                  $scope.datasource.tsField = c;
                                  return false;
                              }
                          });

                          if ($scope.datasource.tsField) {
                              $state.go('secure-landing-home', {
                                  feature: 'amenity-all-waivers-favors'
                              });
                          }
                      };

                      /***********
                       * account fund search start
                       ***********/
                      $scope.amenityInit = $scope.widget.find('#amenity-init');
                      $scope.isValidAccount = false;
                      $scope.txtAccountKeyup = function ($event) {
                          switch ($event.keyCode) {
                              case 13: // enter key trigger search
                                  var txt = $event.target;
                                  $(txt).dropdown('toggle');
                                  $scope.searchAccount(txt.id);
                                  break;

                              case 40:
                                  var txt = $event.target;
                                  var ddl = $(txt).attr('aria-describedby');
                                  var li = $('#' + ddl).find('li:first');
                                  if (li.hasClass('list-limit-exceeded')) {
                                      li = li.next();
                                  }
                                  li.focus();
                                  break;

                              default:
                                  var txtId = $event.target.id;
                                  switch (txtId) {
                                      case 'txt-caller-account':
                                          $scope.purgeCallerAccount();
                                          break;

                                      case 'txt-amenity-account':
                                      case 'txt-upgrade-account':
                                      case 'txt-banking-account':
                                      case 'txt-banking-account-mini':
                                          $scope.purgePreSelectedAccount();
                                          $scope.checkAccount();
                                          break;
                                  }
                                  break;
                          }
                      };
                      $scope.ddlAccountKeyup = function ($event) {

                          switch ($event.keyCode) {
                              case 38:
                                  var prev = $($event.target).prev();
                                  if (prev.length > 0) {
                                      prev.focus();
                                  }
                                  break;

                              case 40:
                                  var next = $($event.target).next();
                                  if (next.length > 0) {
                                      next.focus();
                                  }
                                  break;
                          }
                      };

                      //make the amenity input disabled when the caller input is invalid
                      $scope.$watch('callerSearchValue', function () {
                          if ($scope.edPermission) {
                              var validFlg = false;
                              _($scope.cAccountList).forEach(function (item) {
                                  if (item.Name === $scope.callerSearchValue) {
                                      validFlg = true;
                                  }
                              });

                              if ($scope.callerSearchValue && validFlg) {
                                  $('#txt-amenity-account').prop('disabled', false);
                                  $('#txt-amenity-account').prop('readonly', false);
                              } else {
                                  $('#txt-amenity-account').prop('disabled', true);
                                  $('#txt-amenity-account').prop('readonly', true);
                              }
                          }
                      });

                      $scope.selectAccount = function (id, name, extId, accountType, txtId, bankingBalanceAccess) {
                          $('#' + txtId).dropdown('toggle');
                          switch (txtId) {
                              case 'txt-caller-account':
                                  $scope.datasource.callerAccount.accountId = id;
                                  $scope.datasource.callerAccount.accountName = name;
                                  $scope.datasource.callerAccount.typeName = accountType;
                                  $scope.datasource.callerAccount.extId = extId;
                                  $scope.callerSearchValue = name;
                                  if ($scope.amenityForm.txtCallerAccount) {
                                      $scope.amenityForm.txtCallerAccount.$validate();
                                  }


                                  $scope.getAmenityAccounts();
                                  break;

                              case 'txt-amenity-account':
                              case 'txt-upgrade-account':
                              case 'txt-banking-account':
                              case 'txt-banking-account-mini':
                                  $scope.datasource.preSelectedAccount = {
                                      accountId: id,
                                      accountName: name,
                                      typeName: accountType,
                                      extId: extId,
                                      balance: 0,
                                      instrument: 0,
                                      globalService: 0,
                                      bankingBalanceAccess: bankingBalanceAccess,
                                      comment: ''
                                  };
                                  $scope.accountSymbol = accountType;
                                  if (txtId === 'txt-amenity-account') {
                                      $scope.amenitySearchValue = name;
                                      if ($scope.amenityForm.txtAmenityAccount) {
                                          $scope.amenityForm.txtAmenityAccount.$validate();
                                      }
                                      if ($scope.upgradesForm.txtUpgradeAccount) {
                                          $scope.upgradesForm.txtUpgradeAccount.$validate();
                                      }
                                  }
                                  else if (txtId === 'txt-upgrade-account') {
                                      $scope.amenitySearchValue = name;
                                      if ($scope.amenityForm.txtAmenityAccount) {
                                          $scope.amenityForm.txtAmenityAccount.$validate();
                                      }
                                      if ($scope.upgradesForm.txtUpgradeAccount) {
                                          $scope.upgradesForm.txtUpgradeAccount.$validate();
                                      }
                                  }
                                  else if (txtId === 'txt-banking-account') {
                                      $scope.bankingSearchValue = name;
                                      if ($scope.amenityForm.txtBankingAccount) {
                                          $scope.amenityForm.txtBankingAccount.$validate();
                                      }
                                  }
                                  else if (txtId === 'txt-banking-account-mini') {
                                      $scope.bankingSearchValue = name;
                                      if ($scope.amenityForm.txtBankingAccount) {
                                          $scope.amenityForm.txtBankingAccount.$validate();
                                      }
                                  }
                                  $scope.getAccountAndProductById();
                                  break;
                          }
                      };


                      function checkPermissionAndRedirct (){
                          var currentFeature = $state.current.name;

                          if(!($rootScope.currentPermission.SIP_Funds_Transfer__c
                            || $rootScope.currentPermission.SIP_Funds_Transfer_Reserved_Account__c
                            || $rootScope.currentPermission.SIP_Funds_Transfer_Membership__c
                          ) && !$rootScope.currentPermission.SIP_Account_Summary__c){
                              return
                          }


                          if(currentFeature === 'secure-landing-banking-fund-transfer'){
                              if(!($rootScope.currentPermission.SIP_Funds_Transfer__c
                                || $rootScope.currentPermission.SIP_Funds_Transfer_Reserved_Account__c
                                || $rootScope.currentPermission.SIP_Funds_Transfer_Membership__c)){
                                  $state.go($state.current.parent + '-account-summary', {
                                      feature: 'banking-summary'
                                  });

                              }
                          }

                          if(currentFeature === 'secure-landing-banking-account-summary'){
                              if(!$rootScope.currentPermission.SIP_Account_Summary__c){
                                  $state.go($state.current.parent + '-fund-transfer', {
                                      feature: 'apply-fund-transfer'
                                  });
                              }
                          }

                      }

                      $scope.getAccountAndProductById = function () {

                          // call remote action to get balance
                          $scope.widgetSpinner = true;
                          console.log('preselected AccountId = ' + $scope.datasource.preSelectedAccount.accountId);
                          AccountService.getAccountById(
                            $scope.datasource.preSelectedAccount.accountId,
                            $rootScope.currentUser.id
                          ).then(function (value) {
                              //console.log(' getAccountById:', value)

                              AccountService.getUserWithMeetingAcctPermissions($rootScope.currentUser.id, $scope.datasource.preSelectedAccount.accountId).then(function (res) {
                                  //console.log('getUserWithMeetingAcctPermissions', res)
                                  if (res) {
                                      $rootScope.currentPermission = res[0].userPermissionMap;
                                      $scope.widgetSpinner = false;
                                      $scope.datasource.preSelectedAccount.accountName = value.Name;
                                      $scope.datasource.preSelectedAccount.typeName = value.AccountType;
                                      $scope.datasource.preSelectedAccount.extId = value.ExtId;
                                      $scope.datasource.preSelectedAccount.balance = value.Fund;
                                      $scope.datasource.preSelectedAccount.instrument = value.Instrument;
                                      $scope.datasource.preSelectedAccount.globalService = value.GlobalService;
                                      //fix kevin 2020.12.17
                                      $scope.datasource.preSelectedAccount.hasMileagePlusNumberOfCompany = value.hasMileagePlusNumberOfCompany;
                                      $scope.datasource.preSelectedAccount.mileagePlusNumberOfCompany = value.MileagePlusNumberOfCompany;
                                      $scope.datasource.preSelectedAccount.isTestAccount = value.IsTestAccount;
                                      $scope.datasource.preSelectedAccount.accountTilePermission = value.AccountTilePermission;
                                      $scope.datasource.preSelectedAccount.bankingBalanceAccess = value.BankingBalanceAccess;
                                      $scope.datasource.preSelectedAccount.comment = value.UnitedServicesFundComment;
                                      $scope.checkAccount();
                                      checkPermissionAndRedirct()
                                  }
                              })
                          }, function (err) {

                              console.debug(err);
                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage', {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                              });
                          });

                          ProductService.getAmenityProductList(
                            $scope.datasource.preSelectedAccount.accountId
                          ).then(function (value) {

                              if (util.isSuccessService(value)) {
                                  $scope.datasource.products = value.products;
                                  $scope.prodMembership = ProductService.getProductByCode($scope.datasource.products, 'Membership');
                                  $scope.prodOTP = ProductService.getProductByCode($scope.datasource.products, 'OTP');
                                  $scope.prodOneK = ProductService.getProductByCode($scope.datasource.products, '1K');
                                  $scope.prodPlatinum = ProductService.getProductByCode($scope.datasource.products, '1P');
                                  $scope.prodGold = ProductService.getProductByCode($scope.datasource.products, '1G');
                                  $scope.prodSilver = ProductService.getProductByCode($scope.datasource.products, '1S');
                                  //20190523 rwern PPR
                                  $scope.prodUGC = ProductService.getProductByCode($scope.datasource.products, 'UGC');
                                  $scope.prodGPU = ProductService.getProductByCode($scope.datasource.products, 'GPU');
                                  $scope.prodRPU = ProductService.getProductByCode($scope.datasource.products, 'RPU');
                                  $scope.bonusMilesProduct = ProductService.getProductByCode($scope.datasource.products, 'BM500');
                                  $scope.beverageCouponProduct = ProductService.getProductByCode($scope.datasource.products, 'BV');

                                  $scope.prodX90 = ProductService.getProductByCode($scope.datasource.products, 'X90');
                                  $scope.prodX91 = ProductService.getProductByCode($scope.datasource.products, 'X91');
                              }
                          }, function (err) {

                              $rootScope.$broadcast('showMessage', {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                          });
                      };
                      $scope.searchAccount = function (txtId) {

                          switch (txtId) {
                              case 'txt-caller-account':
                                  $scope.purgeCallerAccount();
                                  $scope.getCallerAccounts(txtId);
                                  break;
                              case 'txt-amenity-account':
                                  if ($scope.specialLoad) {
                                      $scope.purgePreSelectedAccount();
                                      $scope.getAmenityAccounts(txtId);
                                  }
                                  else {
                                      $scope.searchAccountInfo(txtId);
                                  }
                                  break;
                              case 'txt-upgrade-account':
                                  if ($scope.specialLoad) {
                                      $scope.purgePreSelectedAccount();
                                      $scope.getUpgradeAccountList();
                                  }
                                  else {
                                      $scope.searchAccountInfo(txtId);
                                  }
                                  break;
                              case 'txt-banking-account':
                              case 'txt-banking-account-mini':
                                  $scope.searchAccountInfo(txtId);
                                  break;
                          }
                      };
                      $scope.searchAccountInfo = function (txtId) {

                          // search button
                          // find corresponding company from array
                          var record;

                          switch (txtId) {
                              case 'txt-caller-account':
                                  _($scope.cAccountList).forEach(function (listItem) {

                                      if (listItem.Name === $scope.callerSearchValue) {
                                          record = listItem;
                                          return false;
                                      }
                                  });
                                  break;

                              case 'txt-amenity-account':
                                  _($scope.aAccountList).forEach(function (listItem) {

                                      if (listItem.Name === $scope.amenitySearchValue) {
                                          record = listItem;
                                          return false;
                                      }
                                  });
                                  break;
                              case 'txt-upgrade-account':
                                  _($scope.upgradeAccounts).forEach(function (listItem) {

                                      if (listItem.Name === $scope.amenitySearchValue) {
                                          record = listItem;
                                          return false;
                                      }
                                  });
                                  break;

                              case 'txt-banking-account':
                              case 'txt-banking-account-mini':
                                  _($scope.bAccountList).forEach(function (listItem) {

                                      if (listItem.Name === $scope.bankingSearchValue) {

                                          record = listItem;
                                          return false;
                                      }
                                  });
                                  break;
                          }

                          if (record) {
                              switch (txtId) {
                                  case 'txt-caller-account':
                                      $scope.datasource.callerAccount.accountId = record.Id;
                                      $scope.datasource.callerAccount.accountName = record.Name;
                                      $scope.datasource.callerAccount.typeName = record.AccountType;
                                      $scope.datasource.callerAccount.extId = record.ExtId;
                                      $scope.getAmenityAccounts();
                                      break;

                                  case 'txt-amenity-account':
                                  case 'txt-upgrade-account':
                                  case 'txt-banking-account':
                                  case 'txt-banking-account-mini':
                                      $scope.datasource.preSelectedAccount = {
                                          accountId: record.Id,
                                          accountName: record.Name,
                                          typeName: record.AccountType,
                                          extId: record.ExtId,
                                          balance: 0,
                                          instrument: 0,
                                          globalService: 0,
                                          bankingBalanceAccess: record.BankingBalanceAccess,
                                          comment: ''
                                      };

                                      $scope.getAccountAndProductById();
                                      break;
                              }
                          }
                          else {
                              switch (txtId) {
                                  case 'txt-caller-account':
                                      $scope.purgeCallerAccount();
                                      break;

                                  case 'txt-amenity-account':
                                  case 'txt-upgrade-account':
                                  case 'txt-banking-account':
                                  case 'txt-banking-account-mini':
                                      $scope.purgePreSelectedAccount();
                                      $scope.checkAccount();
                                      break;
                              }
                          }
                      };
                      $scope.filterAccount = function (txtId) {
                          return function (item) {

                              var text = '';
                              switch (txtId) {
                                  case 'txt-caller-account':
                                      text = $scope.callerSearchValue;
                                      break;
                                  case 'txt-amenity-account':
                                  case 'txt-upgrade-account':
                                      text = $scope.amenitySearchValue;
                                      break;
                                  case 'txt-banking-account':
                                  case 'txt-banking-account-mini':
                                      text = $scope.bankingSearchValue;
                                      break;
                              }

                              if ((_.toLower(item.Name)).indexOf((_.toLower(text))) >= 0 ||
                                (item.ExtId && item.ExtId.indexOf(text)) >= 0) {
                                  return true;
                              }
                              else {
                                  return false;
                              }
                          };
                      };
                      $scope.checkAccount = function () {
                          switch ($scope.amenityOrBanking) {
                              case 'amenity':
                                  $scope.isValidAccount = $scope.amenitySearchValue !== '';
                                  break;

                              case 'banking':
                                  $scope.isValidAccount = $scope.bankingSearchValue !== '';
                                  break;
                          }
                      };
                      /***********
                       * account fund search end
                       ***********/

                      /***********
                       * united club start
                       ***********/
                      $scope.membershipOtpSelection = 'memberplus'; // memberplus / email
                    //START :: 20210929 Moin Task 7079 :: For Club Membership:: Updated With Retrieve Offer Service to be invoked on click of confirm button
                      $scope.searchUnitedClubMembership = function () {
                        console.log('In searchUnitedClubMembership');
                          $scope.widgetSpinner = true;
                          UnitedClubService.retrievePremierQualification(
                            $scope.membershipLastName,
                            $scope.membershipMPlusNumber,
                            $scope.datasource.preSelectedAccount.isTestAccount,
                            $rootScope.currentUser.id,                            
                            '{!$Label.Sip_Amenity_Club_Membership_Subscriptions}'// 20211004 Moin :: TSK 7080
                        ).then(function (value1) {
                            $scope.widgetSpinner = false;
                            if(util.isSuccessService(value1) && value1.merchOfferRecordId != null){
                                  $scope.widgetSpinner = true;
                                ProductService.getProductCodeByName(
                                    '{!$Label.Sip_Amenity_Club_Membership_Subscriptions}',
                                    $scope.datasource.preSelectedAccount.accountId                                
                                  ).then(function (value2) {
                                    console.log('Product Code ::'+value2.products[0].ProductCode);
                                      $scope.widgetSpinner = false;
                                      if (util.isSuccessService(value2)) {
                                        $scope.widgetSpinner = true;
                                        UnitedClubService.retrieveMerchOffersSubs(
                                            value1.merchOfferRecordId,                                        
                                            value2.products[0].ProductCode,
                                            $rootScope.currentUser.id,
                                            $scope.datasource.preSelectedAccount.accountId,
                                            '{!$Label.Sip_Amenity_Club_Membership_Subscriptions}'
                                        ).then(function (value3) {
                                            $scope.widgetSpinner = false;
                                            if (util.isSuccessService(value3)) {
                                                $scope.widgetSpinner = true;
                                                //STAT :: Moin:: Sort Current SubProducts for SubProductEffectiveDate in Ascending Order
                                                if(value3.hasOwnProperty('CurrentsubProducts') && value3.CurrentsubProducts.length >1){
                                                    value3.CurrentsubProducts.sort(function(a,b){
                                                        return new Date(a.SubProductEffectiveDate) - new Date(b.SubProductEffectiveDate); 
                                                    })
                                                }
                                                //END
                                                $scope.datasource.membershipData = value3;
                                                $scope.datasource.membershipData.FirstName = value3.FirstName;
                                                $scope.datasource.membershipData.LastName = value3.LastName;   
                                                
                                                // TS19494 Moin :: Invoke T&C Service and Transaction SUmmary Page only when there is an offer
                                                //Scenario 2
                                                if(!value3.hasOwnProperty('CurrentsubProducts') && !value3.hasOwnProperty('DropDownsubProducts')
                                                    && !value3.hasOwnProperty('MileagePlusNumber')){
                                                    $scope.widgetSpinner = false;
                                                    $rootScope.$broadcast('showMessage',
                                                    {
                                                        type: 'alert',
                                                        text: '{!JSENCODE($Label.Sip_No_Merch_Offers_Club_Membership_Subscriptions)}'
                                                    });                                                    
                                                }else{
                                                    UnitedClubService.getTermConditionContents(
                                                        '',
                                                        '{!$Label.Sip_Terms_Condition_Club_Membership_Subscriptions}'
                                                    ).then(function (value4){
                                                        $scope.widgetSpinner = false;
                                                        if(util.isSuccessService(value4)){
                                                            $scope.datasource.membershipData.TermsAndConditions = value4.pageContent.Content__c;
                                                            $state.go($state.current.parent + '-united-club', {
                                                                feature: 'confirm-membership'
                                                            });

                                                            //START:: Moin ::Error popup for Auto Renew as true                                                         
                                                            if(value3.AutoRenewFlag === 'true'){
                                                                $scope.widgetSpinner = false;
                                                                setTimeout(function showAutoRenewPopup(){
                                                                    $rootScope.$broadcast('showMessage',{
                                                                        type: 'alert',
                                                                        text: '{!JSENCODE($Label.Sip_Amenity_Auto_Renew_Popup_Message)}'
                                                                    });
                                                                }
                                                                ,1000);
                                                            }//END                                                         
                                                        }
                                                        
                                                    }, function (err) {
                                                        $scope.widgetSpinner = false;
                                                        $rootScope.$broadcast('showMessage',
                                                        {
                                                            type: 'alert',
                                                            text: value4.messages
                                                        });
                                                    });
                                                    /*$state.go($state.current.parent + '-united-club', {
                                                        feature: 'confirm-membership'
                                                    });*/
                                                }
                                            }
                                        }, function (err) {
                                            $scope.widgetSpinner = false;
                                            $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: value3.messages ? value3.messages : '{!JSENCODE($Label.Sip_Common_Error_Merch_Backend)}'
                                            });
                                        });
                                    }
                                }, function (err) {
                                    $scope.widgetSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                    });
                                });
                            }
                        }, function (err) {
                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                    //END
                    //START :: 20210923 Moin Task 7079 :: Invoke offers service when confirm button is clicked on Baggage Subscriptions tile
                    $scope.searchBaggageSubscription = function () {
                        console.log('In searchBaggageSubscription');
                        $scope.widgetSpinner = true;
                        UnitedClubService.retrievePremierQualification(
                            $scope.baggageLastName,
                            $scope.baggageMPlusNumber,
                            $scope.datasource.preSelectedAccount.isTestAccount,
                            $rootScope.currentUser.id,
                            '{!$Label.Sip_Amenity_Baggage_Subscriptions}'// 20211001 Moin :: TSK 7080
                        ).then(function (value1) {
                            $scope.widgetSpinner = false;
                            if(util.isSuccessService(value1) && value1.merchOfferRecordId != null){
                                $scope.widgetSpinner = true;
                                ProductService.getProductCodeByName(
                                    '{!$Label.Sip_Amenity_Baggage_Subscriptions}',
                                    $scope.datasource.preSelectedAccount.accountId                                
                                ).then(function (value2) {
                                    console.log('Product Code ::'+value2.products[0].ProductCode);
                                    $scope.widgetSpinner = false;
                                    if(util.isSuccessService(value2)){
                                        $scope.widgetSpinner = true;
                                        UnitedClubService.retrieveMerchOffersSubs(
                                            value1.merchOfferRecordId,                                        
                                            value2.products[0].ProductCode,
                                            $rootScope.currentUser.id,
                                            $scope.datasource.preSelectedAccount.accountId,
                                            '{!$Label.Sip_Amenity_Baggage_Subscriptions}'
                                        ).then(function (value3) {
                                            $scope.widgetSpinner = false;
                                            if (util.isSuccessService(value3)) {
                                                $scope.widgetSpinner = true;
                                                //STAT :: Moin:: Sort Current SubProducts for SubProductEffectiveDate in Ascending Order
                                                if(value3.hasOwnProperty('CurrentsubProducts') && value3.CurrentsubProducts.length >1){
                                                    value3.CurrentsubProducts.sort(function(a,b){
                                                        return new Date(a.SubProductEffectiveDate) - new Date(b.SubProductEffectiveDate); 
                                                    })
                                                }                                                
                                                //END
                                                $scope.datasource.baggageData = value3;
                                                $scope.datasource.baggageData.FirstName = value3.FirstName;
                                                $scope.datasource.baggageData.LastName = value3.LastName;  
                                                
                                                // TS19494 Moin :: Invoke T&C Service and Transaction SUmmary Page only when there is an offer
                                                //Scenario 2
                                                // Iv value3 has current sub products and the size of that array is 3
                                                
                                                if(!value3.hasOwnProperty('CurrentsubProducts') && !value3.hasOwnProperty('DropDownsubProducts')
                                                    && !value3.hasOwnProperty('MileagePlusNumber')){
                                                    $scope.widgetSpinner = false;
                                                    $rootScope.$broadcast('showMessage',
                                                    {
                                                        type: 'alert',
                                                        text: '{!JSENCODE($Label.Sip_No_Merch_Offers_Baggage_Subscription)}'
                                                    });                                                    
                                                }else{
                                                    UnitedClubService.getTermConditionContents(
                                                        '',
                                                        '{!$Label.Sip_Terms_Condition_Baggage_Subscriptions}'
                                                    ).then(function (value4){
                                                        $scope.widgetSpinner = false;
                                                        if(util.isSuccessService(value4)){
                                                            $scope.datasource.baggageData.TermsAndConditions = value4.pageContent.Content__c;
                                                            $state.go($state.current.parent + '-baggage-subscriptions', {
                                                                feature: 'confirm-baggage-subscription'
                                                            });

                                                            //START:: Moin ::Error popup for Auto Renew as true                                                         
                                                            if(value3.AutoRenewFlag === 'true'){
                                                                $scope.widgetSpinner = false;
                                                                setTimeout(function showAutoRenewPopup(){
                                                                    $rootScope.$broadcast('showMessage',{
                                                                        type: 'alert',
                                                                        text: '{!JSENCODE($Label.Sip_Amenity_Auto_Renew_Popup_Message)}'
                                                                    });
                                                                }
                                                                ,1000);   
                                                            }//END
                                                        }
                                                    }, function (err) {
                                                        $scope.widgetSpinner = false;
                                                        $rootScope.$broadcast('showMessage',
                                                        {
                                                            type: 'alert',
                                                            text: value4.messages
                                                        });
                                                    });
                                                    /*$state.go($state.current.parent + '-baggage-subscriptions', {
                                                        feature: 'confirm-baggage-subscription'
                                                    });*/
                                                }
                                            }
                                        }, function (err) {
                                            $scope.widgetSpinner = false;
                                            $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: value3.messages ? value3.messages : '{!JSENCODE($Label.Sip_Common_Error_Merch_Backend)}'
                                            });
                                        });
                                    }
                                }, function (err) {
                                    $scope.widgetSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                    });
                                });
                            }
                        }, function (err) {
                            $scope.widgetSpinner = false;
                            $rootScope.$broadcast('showMessage',
                            {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                            });
                        });
                    };
                    //END
                    //START :: 20210924 Moin Task 7079 :: Invoke offers service when confirm button is clicked on Economy Plus Subscriptions tile
                    $scope.searchEconomyPlusSubscription = function () {
                        console.log('In searchEconomyPlusSubscription');
                        $scope.widgetSpinner = true;
                        UnitedClubService.retrievePremierQualification(
                            $scope.economyPlusLastName,
                            $scope.economyPlusMPlusNumber,
                            $scope.datasource.preSelectedAccount.isTestAccount,
                            $rootScope.currentUser.id,
                            '{!$Label.Sip_Amenity_Economy_Plus_Subscriptions}'// 20211004 Moin :: TSK 7080
                        ).then(function (value1) {
                            $scope.widgetSpinner = false;
                            if(util.isSuccessService(value1) && value1.merchOfferRecordId != null){
                                $scope.widgetSpinner = true;
                                ProductService.getProductCodeByName(
                                    '{!$Label.Sip_Amenity_Economy_Plus_Subscriptions}',
                                    $scope.datasource.preSelectedAccount.accountId                                
                                ).then(function (value2) {
                                    console.log('Product Code ::'+value2.products[0].ProductCode);                                    
                                    $scope.widgetSpinner = false;
                                    if(util.isSuccessService(value2)){
                                        $scope.widgetSpinner = true;
                                        UnitedClubService.retrieveMerchOffersSubs(
                                            value1.merchOfferRecordId,                                        
                                            value2.products[0].ProductCode,
                                            $rootScope.currentUser.id,
                                            $scope.datasource.preSelectedAccount.accountId,
                                            '{!$Label.Sip_Amenity_Economy_Plus_Subscriptions}'
                                        ).then(function (value3) {
                                            $scope.widgetSpinner = false;
                                            if (util.isSuccessService(value3)) {
                                                $scope.widgetSpinner = true;
                                                //STAT :: Moin:: Sort Current SubProducts for SubProductEffectiveDate in Ascending Order
                                                if(value3.hasOwnProperty('CurrentsubProducts') && value3.CurrentsubProducts.length >1){
                                                    value3.CurrentsubProducts.sort(function(a,b){
                                                        return new Date(a.SubProductEffectiveDate) - new Date(b.SubProductEffectiveDate); 
                                                    })
                                                }
                                                //END
                                                $scope.datasource.economyPlusData = value3;
                                                $scope.datasource.economyPlusData.FirstName = value3.FirstName;
                                                $scope.datasource.economyPlusData.LastName = value3.LastName;  
                                                                                                          
                                                // TS19494 Moin :: Invoke T&C Service and Transaction SUmmary Page only when there is an offer
                                                //Scenario 2
                                                if(!value3.hasOwnProperty('CurrentsubProducts') && !value3.hasOwnProperty('DropDownsubProducts')
                                                    && !value3.hasOwnProperty('MileagePlusNumber')){
                                                    $scope.widgetSpinner = false;
                                                    $rootScope.$broadcast('showMessage',
                                                    {
                                                        type: 'alert',
                                                        text: '{!JSENCODE($Label.Sip_No_Merch_Offers_Economy_Plus_Subscription)}'
                                                    });                                                    
                                                }else{
                                                    UnitedClubService.getTermConditionContents(
                                                        '',
                                                        '{!$Label.Sip_Terms_Condition_EconomyPlus_Subscriptions}'
                                                    ).then(function (value4){
                                                        $scope.widgetSpinner = false;
                                                        if(util.isSuccessService(value4)){
                                                            $scope.datasource.economyPlusData.TermsAndConditions = value4.pageContent.Content__c;
                                                            $state.go($state.current.parent + '-economy-subscriptions', {
                                                                feature: 'confirm-economy-subscriptions'
                                                            });

                                                            //START:: Moin ::Error popup for Auto Renew as true                                                         
                                                            if(value3.AutoRenewFlag === 'true'){
                                                                $scope.widgetSpinner = false;
                                                                setTimeout(function showAutoRenewPopup(){
                                                                    $rootScope.$broadcast('showMessage',{
                                                                        type: 'alert',
                                                                        text: '{!JSENCODE($Label.Sip_Amenity_Auto_Renew_Popup_Message)}'
                                                                    });
                                                                }
                                                                ,1000);   
                                                            }//END
                                                        }
                                                    }, function (err) {
                                                        $scope.widgetSpinner = false;
                                                        $rootScope.$broadcast('showMessage',
                                                        {
                                                            type: 'alert',
                                                            text: value4.messages
                                                        });
                                                    });
                                                    /*$state.go($state.current.parent + '-economy-subscriptions', {
                                                        feature: 'confirm-economy-subscriptions'
                                                    });*/
                                                }
                                            }
                                        }, function (err) {
                                            $scope.widgetSpinner = false;
                                            $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: value3.messages ? value3.messages : '{!JSENCODE($Label.Sip_Common_Error_Merch_Backend)}'
                                            });
                                        });
                                    }                                    
                                }, function (err) {
                                    $scope.widgetSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                    });
                                });
                            }
                        }, function (err) {
                            $scope.widgetSpinner = false;
                            $rootScope.$broadcast('showMessage',
                            {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                            });
                        });
                    };
                    //END
                    //START :: 20210924 Moin Task 7079 :: Invoke offers service when confirm button is clicked on Wifi Subscriptions tile
                    $scope.searchWifiSubscription = function () {
                        console.log('In searchWifiSubscription');
                        $scope.widgetSpinner = true;
                        UnitedClubService.retrievePremierQualification(
                            $scope.wifiLastName,
                            $scope.wifiMPlusNumber,
                            $scope.datasource.preSelectedAccount.isTestAccount,
                            $rootScope.currentUser.id,
                            '{!$Label.Sip_Amenity_United_WIFI_Subscriptions}'// 20211004 Moin :: TSK 7080
                        ).then(function (value1) {
                            $scope.widgetSpinner = false;
                            if(util.isSuccessService(value1) && value1.merchOfferRecordId != null){
                                $scope.widgetSpinner = true;
                                ProductService.getProductCodeByName(
                                    '{!$Label.Sip_Amenity_United_WIFI_Subscriptions}',
                                    $scope.datasource.preSelectedAccount.accountId                                
                                ).then(function (value2) {
                                    console.log('Product Code ::'+value2.products[0].ProductCode);                                    
                                    $scope.widgetSpinner = false;
                                    if(util.isSuccessService(value2)){
                                        $scope.widgetSpinner = true; 
                                        UnitedClubService.retrieveMerchOffersSubs(
                                            value1.merchOfferRecordId,                                        
                                            value2.products[0].ProductCode,
                                            $rootScope.currentUser.id,
                                            $scope.datasource.preSelectedAccount.accountId,
                                            '{!$Label.Sip_Amenity_United_WIFI_Subscriptions}'
                                        ).then(function (value3) {
                                            $scope.widgetSpinner = false;
                                            if (util.isSuccessService(value3)) {
                                                $scope.widgetSpinner = true;
                                                //STAT :: Moin:: Sort Current SubProducts for SubProductEffectiveDate in Ascending Order
                                                if(value3.hasOwnProperty('CurrentsubProducts') && value3.CurrentsubProducts.length >1){
                                                    value3.CurrentsubProducts.sort(function(a,b){
                                                        return new Date(a.SubProductEffectiveDate) - new Date(b.SubProductEffectiveDate); 
                                                    })
                                                }
                                                //END
                                                $scope.datasource.wifiData = value3;
                                                $scope.datasource.wifiData.FirstName = value3.FirstName;
                                                $scope.datasource.wifiData.LastName = value3.LastName; 
                                                
                                                // TS19494 Moin :: Invoke T&C Service and Transaction SUmmary Page only when there is an offer
                                                //Scenario 2
                                                if(!value3.hasOwnProperty('CurrentsubProducts') && !value3.hasOwnProperty('DropDownsubProducts')
                                                    && !value3.hasOwnProperty('MileagePlusNumber')){
                                                    $scope.widgetSpinner = false;
                                                    $rootScope.$broadcast('showMessage',
                                                    {
                                                        type: 'alert',
                                                        text: '{!JSENCODE($Label.Sip_No_Merch_Offers_United_WIFI_Subscription)}'
                                                    });                                                    
                                                }else{
                                                    UnitedClubService.getTermConditionContents(
                                                        '',
                                                        '{!$Label.Sip_Terms_Condition_WIFI_Subscriptions}'
                                                    ).then(function (value4){
                                                        $scope.widgetSpinner = false;
                                                        if(util.isSuccessService(value4)){
                                                            $scope.datasource.wifiData.TermsAndConditions = value4.pageContent.Content__c;
                                                            $state.go($state.current.parent + '-wifi-subscriptions', {
                                                                feature: 'confirm-wifi-subscriptions'
                                                            });

                                                            //START:: Moin ::Error popup for Auto Renew as true                                                         
                                                            if(value3.AutoRenewFlag === 'true'){
                                                                $scope.widgetSpinner = false;
                                                                setTimeout(function showAutoRenewPopup(){
                                                                    $rootScope.$broadcast('showMessage',{
                                                                        type: 'alert',
                                                                        text: '{!JSENCODE($Label.Sip_Amenity_Auto_Renew_Popup_Message)}'
                                                                    });
                                                                }
                                                                ,1000); 
                                                            }//END                                                           
                                                        }
                                                    }, function (err) {
                                                        $scope.widgetSpinner = false;
                                                        $rootScope.$broadcast('showMessage',
                                                        {
                                                            type: 'alert',
                                                            text: value4.messages
                                                        });
                                                    });
                                                    /*$state.go($state.current.parent + '-wifi-subscriptions', {
                                                        feature: 'confirm-wifi-subscriptions'
                                                    });*/
                                                }
                                            }
                                        }, function (err) {
                                            $scope.widgetSpinner = false;
                                            $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: value3.messages ? value3.messages : '{!JSENCODE($Label.Sip_Common_Error_Merch_Backend)}'
                                            });
                                        });                                   
                                    }                                    
                                }, function (err) {
                                    $scope.widgetSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                    });
                                });
                            }
                        }, function (err) {
                            $scope.widgetSpinner = false;
                            $rootScope.$broadcast('showMessage',
                            {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                            });
                        });
                    };
                    //END
                      $scope.searchOTPByName = function () {

                          $scope.widgetSpinner = true;
                          UnitedClubService.retrievePremierQualification(
                            $scope.otpLastName,
                            $scope.otpMPlusNumber,
                            $scope.datasource.preSelectedAccount.isTestAccount,
                            $rootScope.currentUser.id,
                            ''
                          ).then(function (value1) {

                              $scope.widgetSpinner = false;
                              if (util.isSuccessService(value1)) {
                                  $scope.widgetSpinner = true;
                                  //20170522 should be preselected account
                                  UnitedClubService.retrieveSubscription(
                                    value1,
                                    $scope.datasource.preSelectedAccount.accountId,
                                    'unitedClubOTPWithMP',
                                    $rootScope.currentUser.id
                                  ).then(function (value2) {

                                      $scope.widgetSpinner = false;
                                      if (util.isSuccessService(value2)) {
                                          //Shivani PII Qual quick fix Changes
                                          value2.FirstName = value1.FirstName;
                                          value2.LastName = value1.LastName;
                                          //20170418: Shan Add One More Parameter
                                          var requestInfoForPassDetailService = {
                                              'userId': $rootScope.currentUser.id, //For Emulation
                                              'emailAddressInputByUser': '',
                                              'numberOfPassInputByUser': $scope.otpCount
                                          };
                                          $scope.widgetSpinner = true;
                                          //20170522 Should be preselected account
                                          UnitedClubService.getPassDetail(
                                            requestInfoForPassDetailService,
                                            value2,
                                            $scope.datasource.preSelectedAccount.accountId
                                          ).then(function (value3) {

                                              $scope.widgetSpinner = false;
                                              if (util.isSuccessService(value3)) {
                                                  $scope.datasource.otpMembershipData = value3;
                                                  $scope.datasource.otpMembershipData.NumberOfPasses = $scope.otpCount;
                                                  $scope.datasource.otpMembershipData.Email = '';
                                                  $scope.datasource.otpMembershipData.retriveQual = value1;
                                                  $state.go($state.current.parent + '-united-club', {
                                                      feature: 'confirm-otp-membership'
                                                  });
                                              }
                                          }, function (err) {

                                              $scope.widgetSpinner = false;
                                              $rootScope.$broadcast('showMessage',
                                                {
                                                    type: 'alert',
                                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                                });
                                          });
                                      }
                                  }, function (err) {

                                      $scope.widgetSpinner = false;
                                      $rootScope.$broadcast('showMessage',
                                        {
                                            type: 'alert',
                                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                        });
                                  });
                              }
                          }, function (err) {

                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                      $scope.searchOTPByEmail = function () {

                          //20170418: Shan - Added One Parameter
                          var requestInfoForPassDetailService = {
                              'userId': $rootScope.currentUser.id, //For Emulation
                              'emailAddressInputByUser': $scope.otpEmail,
                              'numberOfPassInputByUser': $scope.otpEmailCount
                          };
                          //20170522 shan should be preselected account
                          UnitedClubService.getPassDetailWitEmail(
                            requestInfoForPassDetailService,
                            $scope.datasource.preSelectedAccount.accountId
                          ).then(function (value1) {

                              if (util.isSuccessService(value1)) {
                                  //20170418 Shan
                                  $scope.datasource.otpEmailData = value1;
                                  $scope.EmailTo = $rootScope.currentUser.email;
                                  $state.go($state.current.parent + '-united-club', {
                                      feature: 'confirm-otp-email'
                                  });
                              }
                          }, function (err) {

                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                      /***********
                       * united club end
                       ***********/

                      /***********
                       * status nomination start
                       ***********/
                      $scope.snCheckStatus = function () {

                          $scope.widgetSpinner = true;
                          //rwern Buy Up Nomination - single nomination - send a request to loyalty for latest nomination data
                          UnitedClubService.retrievePremierQualificationForNomination(
                            $scope.snLastName,
                            $scope.snMPlusNumber,
                            $scope.datasource.preSelectedAccount.isTestAccount,
                            $rootScope.currentUser.id,
                            ''
                          ).then(function (value1) {

                              //rwern Buy Up Nomination - single nomination - this is the model created from the response
                              //console.log(value1);
                              $scope.widgetSpinner = false;
                              if (util.isSuccessService(value1) && util.isSuccessService(value1.vPremierQualification)) {
                                  $scope.widgetSpinner = true;

                                  //rwern Buy Up Nomination - single nomination - this takes the response's model and creates the UI's view model
                                  StatusNominationService.getCurrentPremierLevelStatus(
                                    //Shivani REQ-0823 changes
                                    value1.vPremierQualification
                                  ).then(function (value2) {

                                      //rwern Buy Up Nomination - single nomination - this is the UI's view model
                                      //console.log(value2);
                                      $scope.widgetSpinner = false;
                                      if (util.isSuccessService(value2)) {
                                          $scope.datasource.statusNomData = value2;
                                          //Shivani - find min guaranteed level
                                          if (value1.cPremierQaulification && value1.cPremierQaulification.Qualification) {
                                              if (value1.cPremierQaulification.Qualification.PremierLevel != undefined) {
                                                  $scope.datasource.statusNomData.minGuarLevel = value1.cPremierQaulification.Qualification.PremierLevel;
                                              }
                                          }
                                          $scope.loadDiscountedProdData();
                                          //end
                                          $state.go($state.current.parent + '-status-nomination', {
                                              feature: 'apply-status-nomination'
                                          });
                                      }
                                  }, function (err) {

                                      $scope.widgetSpinner = false;
                                      $rootScope.$broadcast('showMessage',
                                        {
                                            type: 'alert',
                                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                        });
                                  });
                              }
                          }, function (err) {

                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };

                      //Shivani Selecting discounted product based on Current PremierCode and Min guarantee level
                      $scope.productList = {
                          globalService: ProductService.getProductByCode($scope.datasource.products, 'GS'),
                          oneK: ProductService.getProductByCode($scope.datasource.products, '1K'),
                          platinum: ProductService.getProductByCode($scope.datasource.products, '1P'),
                          gold: ProductService.getProductByCode($scope.datasource.products, '1G'),
                          silver: ProductService.getProductByCode($scope.datasource.products, '1S')
                      };
                      $scope.getProductByLevel = function (level) {
                          switch (level) {
                              case 5:
                                  return ProductService.getProductByCode($scope.datasource.products, 'GS');
                                  break;
                              case 4:
                                  return ProductService.getProductByCode($scope.datasource.products, '1K');
                                  break;
                              case 3:
                                  return ProductService.getProductByCode($scope.datasource.products, '1P');
                                  break;
                              case 2:
                                  return ProductService.getProductByCode($scope.datasource.products, '1G');
                                  break;
                              case 1:
                                  return ProductService.getProductByCode($scope.datasource.products, '1S');
                                  break;
                          }
                      };
                      $scope.loadDiscountedProdData = function(){
                          //console.log('minLevel=' + $scope.datasource.statusNomData.minGuarLevel);
                          //added to display qualified level on feb 1
                          if ((new Date().getMonth() > 5 || new Date().getMonth() == 0) && $scope != 0 && $scope.datasource.statusNomData.minGuarLevel != 5) {
                              $scope.datasource.statusNomData.mgsProduct = {};
                              $scope.datasource.statusNomData.mgsProduct = $scope.getProductByLevel($scope.datasource.statusNomData.minGuarLevel);
                          }
                          //Changed condition for general member  ($scope.data.statusNomData.CurrentPremierCode != 'MP' || new Date().getMonth() == 0)
                          if ($scope.datasource.statusNomData && $scope.datasource.statusNomData.mgsProduct != undefined &&
                            ($scope.datasource.statusNomData.CurrentPremierCode != 'MP' || new Date().getMonth() == 0)) {
                              $scope.datasource.statusNomData.discountedProduct = $scope.getProductByLevel($scope.datasource.statusNomData.minGuarLevel);
                          } else if (new Date().getMonth() <= 5 && new Date().getMonth() != 0) {
                              if ($scope.datasource.statusNomData.CurrentPremierCode) {
                                  switch ($scope.datasource.statusNomData.CurrentPremierCode) {
                                      case '1K':
                                          $scope.datasource.statusNomData.discountedProduct = ProductService.getProductByCode($scope.datasource.products, '1K');
                                          break;
                                      case 'PL':
                                          $scope.datasource.statusNomData.discountedProduct = ProductService.getProductByCode($scope.datasource.products, '1P');
                                          break;
                                      case 'GL':
                                          $scope.datasource.statusNomData.discountedProduct = ProductService.getProductByCode($scope.datasource.products, '1G');
                                          break;
                                      case 'SL':
                                          $scope.datasource.statusNomData.discountedProduct = ProductService.getProductByCode($scope.datasource.products, '1S');
                                          break;
                                  }
                              }
                          }
                          if ($scope.datasource.statusNomData.discountedProduct && $scope.datasource.statusNomData.discountedProduct.ProductCode) {
                              $scope.datasource.statusNomData.DiscountedProductCode = $scope.datasource.statusNomData.discountedProduct.ProductCode;
                          }
                          //Changes for TOLERANCE
                          var currentLevel = 0;
                          switch ($scope.datasource.statusNomData.CurrentPremierCode) {
                              case 'GS':
                                  currentLevel = 5;
                                  break;
                              case '1K':
                                  currentLevel = 4;
                                  break;
                              case 'PL':
                                  currentLevel = 3;
                                  break;
                              case 'GL':
                                  currentLevel = 2;
                                  break;
                              case 'SL':
                                  currentLevel = 1;
                                  break;
                          }
                          if (new Date().getMonth() == 0 && currentLevel < $scope.datasource.statusNomData.minGuarLevel) {
                              $scope.datasource.statusNomData.availableProductsInJan = [];
                              switch ($scope.datasource.statusNomData.minGuarLevel) {
                                  case 4:
                                      $scope.datasource.statusNomData.availableProductsInJan = ['GS'];
                                      break;
                                  case 3:
                                      $scope.datasource.statusNomData.availableProductsInJan = ['1K', 'GS'];
                                      break;
                                  case 2:
                                      $scope.datasource.statusNomData.availableProductsInJan = ['PL', '1K', 'GS'];
                                      break;
                                  case 1:
                                      $scope.datasource.statusNomData.availableProductsInJan = ['GL', 'PL', '1K', 'GS'];
                                      break;
                              }
                          }
                      };
                      //Shivani Changes end.
                      //cherry
                      $scope.goMassFutureNomination = function () {
                          $scope.widgetSpinner = true;

                          //20171107 use userid
                          StatusNominationService.getMileagePlusNos($rootScope.currentUser.id, $scope.datasource.preSelectedAccount.accountId).then(function (value) {

                              $scope.datasource.mpNumberList = value.mpNumberList;
                              //console.log('# mp list = ' + $scope.datasource.mpNumberList.length);

                              $scope.datasource.nomiProductList = {
                                  'silver': ProductService.getProductByCode($scope.datasource.products, '1S'),
                                  'gold': ProductService.getProductByCode($scope.datasource.products, '1G'),
                                  'platinum': ProductService.getProductByCode($scope.datasource.products, '1P'),
                                  'oneK': ProductService.getProductByCode($scope.datasource.products, '1K'),
                                  'globalService': ProductService.getProductByCode($scope.datasource.products, 'GS')
                              };
                              //make sure new page can get product info
                              if ($scope.datasource.nomiProductList) {
                                  //Shivani REQ-0823 changes- set premier levels
                                  $scope.datasource.nomiProductList.silver.productLevel = 1;
                                  $scope.datasource.nomiProductList.gold.productLevel = 2;
                                  $scope.datasource.nomiProductList.platinum.productLevel = 3;
                                  $scope.datasource.nomiProductList.oneK.productLevel = 4;
                                  $scope.datasource.nomiProductList.globalService.productLevel = 5;
                                  // go new page
                                  $state.go($state.current.parent + '-status-nomination-mass', {
                                      feature: 'apply-status-nomination-mass'
                                  });
                              }

                          }, function (err) {
                              $rootScope.$broadcast('showMessage', {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                          });
                      };

                      //cherry
                      $scope.goNominationReport = function () {
                          // calll service
                          // go new page
                          $scope.widgetSpinner = true;

                          StatusNominationService.salesNominationReport($rootScope.currentUser.id, $scope.datasource.preSelectedAccount.accountId).then(function (value) {
                              $scope.datasource.mpNumberList = value.mpNumberList;
                              $scope.datasource.nomiProductList = {
                                  'silver': ProductService.getProductByCode($scope.datasource.products, '1S'),
                                  'gold': ProductService.getProductByCode($scope.datasource.products, '1G'),
                                  'platinum': ProductService.getProductByCode($scope.datasource.products, '1P'),
                                  'oneK': ProductService.getProductByCode($scope.datasource.products, '1K'),
                                  'globalService': ProductService.getProductByCode($scope.datasource.products, 'GS')
                              };
                              //make sure new page can get product info
                              if ($scope.datasource.nomiProductList) {
                                  // go new page
                                  $state.go($state.current.parent + '-status-nomination-mass', {
                                      feature: 'apply-status-nomination-report'
                                  });
                              }

                          }, function (err) {
                              $rootScope.$broadcast('showMessage', {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                          })

                      };
                      /***********
                       * status nomination end
                       ***********/

                      /***********
                       * pnr start
                       ***********/
                      // Invoke Validate PNR to retrieve PNR data.
                      $scope.searchSystem = function (systemType) {

                          // TFS - 480416 - 03/04/2021 - Fix for Confirm Button
                          $rootScope.segmentStatusArray = [];

                          if (!$scope.pnrSearchValue) {
                              return;
                          }
                          // Hamed PW
                          if (($scope.feeWaiverSelection === 'TVT' || $scope.feeWaiverSelection === 'PWTVT') && ($stateParams.feature === 'amenity-fee-waivers' || $stateParams.feature === 'apply-waiver')) {
                              if (!$scope.newpnrSearchValue || ($scope.newpnrSearchValue.length < 6 && systemType === 'HOST')) {
                                  return;
                              }
                          }
                          //End Hamed PW

                          if ($scope.pnrSearchValue.length < 6 && systemType === 'HOST') {
                              return;
                          }

                          if ($scope.pnrSearchValue) {
                              $scope.pnrSearchValue = _.toUpper($scope.pnrSearchValue);
                              $scope.pnrSearchNameValue = _.toUpper($scope.pnrSearchNameValue);
                              console.debug('Search PNR: ' + $scope.pnrSearchValue);
                              if ($scope.pnrSearchValue) {

                                  var feature = $stateParams.feature;
                                  switch (feature) {
                                      case 'amenity-fee-waivers':
                                      case 'apply-waiver':
                                          $scope.WaiverPNR(systemType);
                                          break;
                                      case 'amenity-all-waivers-favors':
                                      case 'apply-waiver-favor':
                                          $scope.WaiverFavorPNR(systemType);
                                          break;
                                      case 'amenity-ep-seat-assignment':
                                      case 'apply-eplus':

                                          if ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp) {
                                              if (!$scope.pnrSearchNameValue) {
                                                  return;
                                              }
                                          }

                                          $scope.EPlusPNR(systemType);
                                          break;
                                        case 'amenity-premier-access':
                                        case 'apply-premieraccess':

                                        if ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp) {
                                            if (!$scope.pnrSearchNameValue) {
                                                return;
                                            }
                                        }

                                        $scope.PremierAccessPNR(systemType);
                                        break;
                                  }
                              }
                          }
                      };
                      $scope.EPlusPNR = function (systemType) {

                          if ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp || $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.meeting) {
                              $scope.widgetSpinner = true;
                              PNRService.generatePNRViewModelForEPlusCorporateUser(
                                $scope.pnrSearchValue,
                                systemType,
                                $scope.pnrSearchNameValue,
                                $rootScope.currentUser.id,
                                '').then(function (value) {

                                  console.debug(value);
                                  $scope.widgetSpinner = false;
                                  $scope.datasource.pnrSearchValue = $scope.pnrSearchValue;
                                  $scope.datasource.PNR = value;
                                  $scope.datasource.selection = {
                                      selectedTravelerIndex: -1,
                                      selectedSegmentIndex: -1,
                                      selectedLegIndex: -1,
                                      selectable: false,
                                      restricted: false,
                                      seatExpired: false,
                                      currentAirSegment: null,
                                      segmentSeatMaps: [], // array of seat map object for selected segment
                                      currentSegmentSeatMap: null, // current selected leg's seat map object
                                      isAllowReset: false
                                  };
                                  // this is to cache all seat map response ever retrieve for each segment
                                  // reusable for final seat assignment price recalculation
                                  // key, value (segmentIndex, segmentSeatMaps)
                                  $scope.datasource.seatMapMemories = [];
                                  $scope.datasource.cart = {
                                      total: 0,
                                      items: [],
                                      dummyItems: [],
                                      showCart: false
                                  };
                                  $scope.datasource.showETicket = false;
                                  $state.go($state.current.parent + '-seat-assignment', {
                                      feature: 'apply-eplus'
                                  });

                              }, function (err) {

                                  console.debug(err);
                                  $scope.widgetSpinner = false;
                                  $rootScope.$broadcast('showMessage', {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                  });
                              });
                          } else {

                              var callerAccId = '';
                              if ($scope.datasource.callerAccount && $scope.datasource.callerAccount.accountId) {
                                  callerAccId = $scope.datasource.callerAccount.accountId;
                              }

                              $scope.widgetSpinner = true;
                              PNRService.getEPlusPNRDetail(
                                $scope.pnrSearchValue,
                                systemType,
                                $scope.pnrSearchNameValue,
                                $rootScope.currentUser.id,
                                callerAccId,
                                '').then(// 2021-10-19 Suyash Start - Premier access - 7095
                                function (value) {

                                    console.debug(value);
                                    $scope.widgetSpinner = false;
                                    $scope.datasource.pnrSearchValue = $scope.pnrSearchValue;
                                    $scope.datasource.PNR = value;
                                    $scope.datasource.selection = {
                                        selectedTravelerIndex: -1,
                                        selectedSegmentIndex: -1,
                                        selectedLegIndex: -1,
                                        selectable: false,
                                        restricted: false,
                                        seatExpired: false,
                                        currentAirSegment: null,
                                        segmentSeatMaps: [], // array of seat map object for selected segment
                                        currentSegmentSeatMap: null, // current selected leg's seat map object
                                        isAllowReset: false
                                    };
                                    // this is to cache all seat map response ever retrieve for each segment
                                    // reusable for final seat assignment price recalculation
                                    // key, value (segmentIndex, segmentSeatMaps)
                                    $scope.datasource.seatMapMemories = [];
                                    $scope.datasource.cart = {
                                        total: 0,
                                        items: [],
                                        dummyItems: [],
                                        showCart: false
                                    };
                                    $scope.datasource.showETicket = false;
                                    $state.go($state.current.parent + '-seat-assignment', {
                                        feature: 'apply-eplus'
                                    });
                                },
                                function (err) {
                                    console.debug(err);
                                    $scope.widgetSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                          }
                      };
                      //premier access
                      $scope.PremierAccessPNR = function (systemType) {
                        $scope.datasource.columnHeader = [];
                        $scope.datasource.tableData = {};
                        $scope.datasource.tableDataList = {};
                        $scope.datasource.FulfilmentOffer = {};
                        $scope.datasource.selectAllHeader = {};
                          if ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp || $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.meeting) {
                              $scope.widgetSpinner = true;
                              PNRService.generatePNRViewModelForEPlusCorporateUser(
                                $scope.pnrSearchValue,
                                systemType,
                                $scope.pnrSearchNameValue,
                                $rootScope.currentUser.id,
                                '{!$Label.Sip_Premier_Access}').then(function (value) {// 2021-10-19 Suyash Start - Premier access - 7095
                                  console.debug(value);
                                  $scope.widgetSpinner = false;
                                  $scope.datasource.pnrSearchValue = $scope.pnrSearchValue;
                                  $scope.datasource.PNR = value;
                                  $scope.datasource.selection = {
                                      selectedTravelerIndex: -1,
                                      selectedSegmentIndex: -1,
                                      selectedLegIndex: -1,
                                      selectable: false,
                                      restricted: false,
                                      seatExpired: false,
                                      currentAirSegment: null,
                                      segmentSeatMaps: [], // array of seat map object for selected segment
                                      currentSegmentSeatMap: null, // current selected leg's seat map object
                                      isAllowReset: false
                                  };
                                  // this is to cache all seat map response ever retrieve for each segment
                                  // reusable for final seat assignment price recalculation
                                  // key, value (segmentIndex, segmentSeatMaps)
                                  $scope.datasource.seatMapMemories = [];
                                  $scope.datasource.cart = {
                                      total: 0,
                                      items: [],
                                      dummyItems: [],
                                      showCart: false
                                  };
                                  $scope.datasource.showETicket = false;
                                  $state.go($state.current.parent + '-premier-access', {
                                      feature: 'apply-premieraccess'
                                  });
                                  //Bug Fix : 35363 - Suyash Chiplunkar
                                  if(value.errorMessages.length == 0 && value.PNRDetail.EPlusTravelerAndSegment != undefined && value.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[0].SeatMapDisabledType == 6){
                                    value.errorMessages.push('{!$Label.SIP_ELF_Fare_Error}');
                                  }

                                  if(value.errorMessages.length == 0){
                                    $scope.widgetSpinner = true;
                                    $scope.datasource.showSegment = true;//To make segments section open by defaul
                                    ProductService.getProductCodeByName(
                                        '{!$Label.Sip_Premier_Access}',
                                        $scope.datasource.preSelectedAccount.accountId                                
                                    ).then(function (productCodes) {
                                        $scope.widgetSpinner = true;
                                        console.log('Product Code ::'+productCodes.products[0].ProductCode);
                                        if(productCodes.success){
                                            UnitedClubService.retrieveMerchOffers(
                                                value.PNRDetail.MerchOfferId,                                        
                                                productCodes.products[0].ProductCode,
                                                $rootScope.currentUser.id,
                                                '{!$Label.Sip_Premier_Access}'
                                            ).then(function (value3) {
                                                $scope.widgetSpinner = true;
                                                if (value3.success) {
                                                    UnitedClubService.getTermConditionContents(
                                                        '',
                                                        '{!$Label.Sip_Terms_Condition_Premier_Access}'
                                                    ).then(function (value4){
                                                        if(value4.success){
                                                            $scope.widgetSpinner = false;
                                                            $scope.datasource.columnHeader = value3.ColumnHeaders;
                                                            $scope.datasource.tableData = value3.MapPassengerNameSegmentDetails;
                                                            $scope.datasource.tableDataList = value3.MapPassengerSegmentDetails;
                                                            $scope.datasource.FulfilmentOffer = value3.FulfillmentOffer;
                                                            $scope.datasource.selectAllHeader = {};
                                                            $scope.datasource.headerDisabled = {};
                                                            $scope.datasource.TermsAndConditions = value4.pageContent.Content__c;
                                                            for(var i = 0; i < value3.ColumnHeaders.length; i++){
                                                                $scope.datasource.selectAllHeader[value3.ColumnHeaders[i]] = false;
                                                                //Bug Fix 33557 : Suyash
                                                                var disableCol = true;
                                                                angular.forEach($scope.datasource.tableDataList, function(value, key) {
                                                                    if(value.header == value3.ColumnHeaders[i] && value.atAirport == 'N' && value.isEntitled == 'N' && value.isPaid == 'N' && value.subproductIsNotAvailable == 'N'){
                                                                        disableCol = false;
                                                                    }
                                                                });
                                                                $scope.datasource.headerDisabled[value3.ColumnHeaders[i]] = disableCol;
                                                            }
                                                            //Bug Fix 33557 : Suyash
                                                            angular.forEach($scope.datasource.tableDataList, function(value, key) {
                                                                if(value.atAirport == 'Y' || value.isEntitled == 'Y' || value.isPaid == 'Y' || value.subproductIsNotAvailable == 'Y'){
                                                                    value.checked = true;
                                                                }
                                                            });
                                                        }else{
                                                            $scope.widgetSpinner = false;
                                                            $scope.datasource.PNR.errorMessages = value4.messages ? value4.messages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                                        }
                                                    }); 
                                                }else{
                                                    $scope.widgetSpinner = false;
                                                    $scope.datasource.PNR.errorMessages = value3.messages ? value3.messages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                                }
                                            }, function (err) {
                                                $scope.widgetSpinner = false;
                                                $scope.datasource.PNR.errorMessages = ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                            });
                                        }else{
                                            $scope.widgetSpinner = false;
                                            $scope.datasource.PNR.errorMessages = productCodes.messages ? productCodes.messages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                        }
                                    }, function (err) {
                                        $scope.widgetSpinner = false;
                                        $scope.datasource.PNR.errorMessages = ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                    });
                                }else{
                                    $scope.widgetSpinner = false;
                                    $scope.datasource.PNR.errorMessages = value.errorMessages ? value.errorMessages :['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                }

                              }, function (err) {
                                  console.debug(err);
                                  $scope.widgetSpinner = false;
                                  $rootScope.$broadcast('showMessage', {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                  });
                              });
                          } else {  
                              var callerAccId = '';
                              if ($scope.datasource.callerAccount && $scope.datasource.callerAccount.accountId) {
                                  callerAccId = $scope.datasource.callerAccount.accountId;
                              }


                              $scope.widgetSpinner = true;
                              PNRService.getEPlusPNRDetail(
                                $scope.pnrSearchValue,
                                systemType,
                                $scope.pnrSearchNameValue,
                                $rootScope.currentUser.id,
                                callerAccId,
                                '{!$Label.Sip_Premier_Access}').then(// 2021-10-19 Suyash -  Premier access - 7095
                                function (value) {
                                    // 2021-10-22 Suyash Start -  Premier access - 7095
                                    console.debug(value);
                                    $scope.widgetSpinner = true;
                                    $scope.datasource.pnrSearchValue = $scope.pnrSearchValue;
                                    $scope.datasource.PNR = value;
                                    $scope.datasource.selection = {
                                        selectedTravelerIndex: -1,
                                        selectedSegmentIndex: -1,
                                        selectedLegIndex: -1,
                                        selectable: false,
                                        restricted: false,
                                        seatExpired: false,
                                        currentAirSegment: null,
                                        segmentSeatMaps: [], // array of seat map object for selected segment
                                        currentSegmentSeatMap: null, // current selected leg's seat map object
                                        isAllowReset: false
                                    };
                                    // this is to cache all seat map response ever retrieve for each segment
                                    // reusable for final seat assignment price recalculation
                                    // key, value (segmentIndex, segmentSeatMaps)
                                    $scope.datasource.seatMapMemories = [];
                                    $scope.datasource.cart = {
                                        total: 0,
                                        items: [],
                                        dummyItems: [],
                                        showCart: false
                                    };
                                    $scope.datasource.showETicket = false;
                                    $scope.widgetSpinner = false;
                                    $state.go($state.current.parent + '-premier-access', {
                                        feature: 'apply-premieraccess'
                                    });
                                    //Bug Fix : 35363 - Suyash Chiplunkar
                                    if(value.errorMessages.length == 0 && value.PNRDetail.EPlusTravelerAndSegment != undefined && value.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[0].SeatMapDisabledType == 6){
                                        value.errorMessages.push('{!$Label.SIP_ELF_Fare_Error}');
                                    }
                                    
                                    if(value.errorMessages.length == 0){
                                        $scope.widgetSpinner = true;
                                        $scope.datasource.showSegment = true;//To make segments section open by defaul
                                        ProductService.getProductCodeByName(
                                            '{!$Label.Sip_Premier_Access}',
                                            $scope.datasource.preSelectedAccount.accountId                                
                                        ).then(function (productCodes) {
                                            $scope.widgetSpinner = true;
                                            console.log('Product Code ::'+productCodes.products[0].ProductCode);
                                            if(productCodes.success){
                                                UnitedClubService.retrieveMerchOffers(
                                                    value.PNRDetail.MerchOfferId,                                        
                                                    productCodes.products[0].ProductCode,
                                                    $rootScope.currentUser.id,
                                                    '{!$Label.Sip_Premier_Access}'
                                                ).then(function (value3) {
                                                    $scope.widgetSpinner = true;
                                                    if (value3.success) {
                                                        UnitedClubService.getTermConditionContents(
                                                        '',
                                                        '{!$Label.Sip_Terms_Condition_Premier_Access}'
                                                        ).then(function (value4){
                                                            if(value4.success){
                                                                $scope.widgetSpinner = false;
                                                                $scope.datasource.columnHeader = value3.ColumnHeaders;
                                                                $scope.datasource.tableData = value3.MapPassengerNameSegmentDetails;
                                                                $scope.datasource.tableDataList = value3.MapPassengerSegmentDetails;
                                                                $scope.datasource.FulfilmentOffer = value3.FulfillmentOffer;
                                                                $scope.datasource.selectAllHeader = {};
                                                                $scope.datasource.headerDisabled = {};
                                                                $scope.datasource.TermsAndConditions = value4.pageContent.Content__c;
                                                                for(var i = 0; i < value3.ColumnHeaders.length; i++){
                                                                    $scope.datasource.selectAllHeader[value3.ColumnHeaders[i]] = false;
                                                                    //Bug Fix 33557 : Suyash
                                                                    var disableCol = true;
                                                                    angular.forEach($scope.datasource.tableDataList, function(value, key) {
                                                                        if(value.header == value3.ColumnHeaders[i] && value.atAirport == 'N' && value.isEntitled == 'N' && value.isPaid == 'N' && value.subproductIsNotAvailable == 'N'){
                                                                            disableCol = false;
                                                                        }
                                                                    });
                                                                    $scope.datasource.headerDisabled[value3.ColumnHeaders[i]] = disableCol;
                                                                    //Bug Fix 33557 : Suyash
                                                                }
                                                                //Bug Fix 33557 : Suyash
                                                                angular.forEach($scope.datasource.tableDataList, function(value, key) {
                                                                    if(value.atAirport == 'Y' || value.isEntitled == 'Y' || value.isPaid == 'Y' || value.subproductIsNotAvailable == 'Y'){
                                                                        value.checked = true;
                                                                    }
                                                                });
                                                            }else{
                                                                $scope.widgetSpinner = false;
                                                                $scope.datasource.PNR.errorMessages = value4.messages ? value4.messages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                                            }
                                                        });  
                                                    }else{
                                                        $scope.widgetSpinner = false;
                                                        $scope.datasource.PNR.errorMessages = value3.messages ? value3.messages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                                    }
                                                }, function (err) {
                                                    $scope.widgetSpinner = false;
                                                    $scope.datasource.PNR.errorMessages = ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                                });
                                            }else{
                                                $scope.widgetSpinner = false;
                                                $scope.datasource.PNR.errorMessages = productCodes.messages ? productCodes.messages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                            }
                                        }, function (err) {
                                            $scope.widgetSpinner = false;
                                            $scope.datasource.PNR.errorMessages = ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                        });
                                    }else{
                                        $scope.widgetSpinner = false;
                                        $scope.datasource.PNR.errorMessages = value.errorMessages ? value.errorMessages : ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                    }
                                },
                                function (err) {
                                    console.debug(err);
                                    $scope.widgetSpinner = false;
                                    $scope.datasource.PNR.errorMessages = ['{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'];
                                });
                          }
                      };
                      //REQ-573
                      $scope.isPWEnabled = function () {
                          $scope.pwPermissionText = 'Penalty Waiver permission is not assigned';
                          if (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                            $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                            $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) {
                              if (($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiver)) {
                                  $scope.feeWaiverSelection = 'PW';
                                  $scope.pwPermissionText = '';
                              }
                          } else {
                              if ($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiver && $rootScope.currentUser.permission.SIP_Penalty_Waiver__c) {
                                  $scope.feeWaiverSelection = 'PW';
                                  $scope.pwPermissionText = '';
                              }
                          }
                      }
                      $scope.isTVTEnabled = function () {
                          $scope.tvtPermissionText = 'Ticket Value Transfer permission is not assigned';
                          if (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                            $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                            $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) {
                              if (($scope.datasource.preSelectedAccount.accountTilePermission.TicketValueTransfer)) {
                                  $scope.feeWaiverSelection = 'TVT';
                                  $scope.tvtPermissionText = '';
                              }
                          } else {
                              if ($scope.datasource.preSelectedAccount.accountTilePermission.TicketValueTransfer && $rootScope.currentUser.permission.SIP_Ticket_Value_Transfer__c) {
                                  $scope.feeWaiverSelection = 'TVT';
                                  $scope.tvtPermissionText = '';
                              }
                          }
                      }
                      $scope.isPWTVTEnabled = function () {
                          $scope.pwtvtPermissionText = 'Penalty Waiver and Ticket Value Transfer permission is not assigned';
                          if (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent ||
                            $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) &&
                            $scope.datasource.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) {
                              if (($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiverAndTicketValueTransfer)) {
                                  $scope.feeWaiverSelection = 'PWTVT';
                                  $scope.pwtvtPermissionText = '';
                              }
                          } else {
                              if ($scope.datasource.preSelectedAccount.accountTilePermission.PenaltyWaiverAndTicketValueTransfer && $rootScope.currentUser.permission.SIP_Penalty_Ticket_Waiver__c) {
                                  $scope.feeWaiverSelection = 'PWTVT';
                                  $scope.pwtvtPermissionText = '';
                              }
                          }
                      }
                      //Hamed PW --  PNR Check - based on feeWaiverType -- if new PNR required or not.

                      $scope.isInvalidPNRSearch = function (orignalPNR, newPNR, feeWaiverType, pnrLength) {

                          var isInvalidSearch = false;

                          if (!feeWaiverType) {
                              isInvalidSearch = true;

                          }
                          else if (feeWaiverType === 'PW') {
                              isInvalidSearch = !(orignalPNR && orignalPNR.length >= pnrLength);
                          }
                          else if (feeWaiverType === 'TVT' || feeWaiverType === 'PWTVT') {
                              isInvalidSearch = !(orignalPNR && orignalPNR.length >= pnrLength) || !(newPNR && newPNR.length >= pnrLength) || (orignalPNR === newPNR);
                          }

                          return isInvalidSearch;

                      };


                      $scope.newPNRPlaceholderText = function (feeWaiverType) {

                          return (feeWaiverType === 'PW') ? '{!JSENCODE($Label.Sip_Amenity_NEW_Record_Locator_Placeholder_jet_OPT)}' : '{!JSENCODE($Label.Sip_Amenity_NEW_Record_Locator_Placeholder_jet_REQ)}';

                      };

                      $scope.OldPNRPlaceholderText = function (feeWaiverType) {

                          return (feeWaiverType === 'PW') ? '{!JSENCODE($Label.Sip_Amenity_Record_Locator_Placeholder_jet)}' : '{!JSENCODE($Label.Sip_Amenity_Record_Locator_Placeholder_jet_REQ)}';

                      };

                      $scope.newPNRToolTipText = function (feeWaiverType) {

                          return (feeWaiverType === 'PW') ? ' ' : '{!JSENCODE($Label.Sip_Amenity_NEW_Record_Locator_ToolTip_jet)}';

                      };

                      $scope.WaiverPNR = function (systemType) {

                          var callerAccId = '';
                          if ($scope.datasource.callerAccount && $scope.datasource.callerAccount.accountId) {
                              callerAccId = $scope.datasource.callerAccount.accountId;
                          }

                          var pnrValues = [];
                          pnrValues.push($scope.pnrSearchValue + ',false');
                          if ($scope.newpnrSearchValue) {
                              pnrValues.push($scope.newpnrSearchValue + ',true');
                          }

                          $scope.datasource.feeWaiverType = $scope.feeWaiverSelection;
                          $scope.widgetSpinner = true;

                          if ($scope.datasource && $scope.datasource.NEWPNR) {
                              $scope.datasource.NEWPNR = {};
                          }

                          PNRService.getPNRInfo(
                            pnrValues,
                            systemType,
                            $rootScope.currentUser.accId,
                            $rootScope.currentUser.id,
                            callerAccId, $scope.datasource.feeWaiverType
                          ).then(function (value) {
                              //BEGIN Hamed PW
                              $scope.widgetSpinner = false;
                              $scope.datasource.pnrSearchValue = $scope.pnrSearchValue;
                              $scope.datasource.newpnrSearchValue = $scope.newpnrSearchValue; // Hamed PW
                              $scope.datasource.feeWaiverSelection = $scope.feeWaiverSelection; // Hamed PW

                                //20210414 rwern TFS 484379
                                if (value.responses.length === 0) {
                                    $scope.datasource.PNR.errorMessages = value.errorMessages;
                                }

                              if (value.responses.length === 1) {
                                  $scope.datasource.PNR = value.responses[0];
                                  if (value.errorMessages && value.errorMessages.length > 0) {
                                      $scope.datasource.PNR.errorMessages = value.errorMessages;
                                  }
                              }
                              if (value.responses.length === 2) {
                                  $scope.datasource.PNR = value.responses[0];
                                  $scope.datasource.NEWPNR = value.responses[1];
                                  if (value.errorMessages && value.errorMessages.length > 0) {
                                      $scope.datasource.PNR.errorMessages = value.errorMessages;
                                  }

                              }

                              $scope.checkCallerTicketRestriction();
                              $scope.datasource.showSegment = false;

                              $('.coupon').hide();
                              $('.coupon-toggle-cell svg').removeClass('open');

                              $scope.datasource.selectedPrimaryTicketCount = 0;
                              $scope.datasource.selectedTicketCount = 0;
                              $scope.datasource.selectedTicketNumber = [];
                              $scope.datasource.selectedTicketWithoutInfantIndCount = 0; //Hamed PW
                              $state.go($state.current.parent + '-penalty-waiver', { feature: 'apply-waiver' });
                          }, function (err) {

                              console.debug(err);
                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                      $scope.WaiverFavorPNR = function (systemType) {

                          var callerAccId = '';
                          if ($scope.datasource.callerAccount && $scope.datasource.callerAccount.accountId) {
                              callerAccId = $scope.datasource.callerAccount.accountId;
                          }

                          $scope.widgetSpinner = true;
                          AmenityService.getPNRInfo(
                            $scope.pnrSearchValue,
                            systemType,
                            $rootScope.currentUser.accId,
                            $rootScope.currentUser.id,
                            callerAccId
                          ).then(function (value) {

                              console.debug(value);
                              $scope.widgetSpinner = false;
                              $scope.datasource.pnrSearchValue = $scope.pnrSearchValue;
                              $scope.datasource.PNR = value;
                              $scope.checkCallerTicketRestriction();
                              $scope.datasource.showSegment = false;

                              $('.coupon').hide();
                              $('.coupon-toggle-cell svg').removeClass('open');

                              $scope.datasource.selectedPrimaryTicketCount = 0;
                              $scope.datasource.selectedTicketCount = 0;
                              $scope.datasource.selectedTicketNumber = [];
                              $state.go($state.current.parent + '-all-waiver-favor', { feature: 'apply-waiver-favor' });
                          }, function (err) {

                              console.debug(err);
                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };
                      $scope.validatePNRText = function ($event) {

                          var pattern = '^[a-zA-Z0-9]+$';
                          var regex = new RegExp(pattern);
                          var key = String.fromCharCode(!$event.charCode ? $event.which : $event.charCode);
                          if (!regex.test(key)) {
                              event.preventDefault();
                              return false;
                          }
                      };
                      // $scope.validateNameText = function ($event) {
                      //
                      //    var pattern = '^[a-zA-Z0-9 ]+$';
                      //    var regex = new RegExp(pattern);
                      //   var key = String.fromCharCode(!$event.charCode ? $event.which : $event.charCode);
                      //    if (!regex.test(key)) {
                      //      event.preventDefault();
                      //      return false;
                      //   }
                      // };
                      $scope.checkCallerTicketRestriction = function () {

                          if ($scope.datasource.callerAccount &&
                            $scope.datasource.callerAccount.accountId &&
                            $scope.datasource.callerAccount.accountName &&
                            $scope.datasource.callerAccount.typeName &&
                            $scope.datasource.PNR &&
                            $scope.datasource.PNR.SalesReservationDetail &&
                            $scope.datasource.PNR.SalesReservationDetail.TicketInfo) {

                              var ticketMsg = '{!JSENCODE($Label.SIP_ED_Caller_Restricted_Ticket)}';
                              _.forEach($scope.datasource.PNR.SalesReservationDetail.TicketInfo, function (ticket) {

                                  if (ticket.isSelectableForCaller === false) {
                                      if (ticket.ticketLevelErrorMsg === undefined) {
                                          ticket.ticketLevelErrorMsg = [];
                                      }
                                      ticket.ticketLevelErrorMsg.push(ticketMsg);
                                  }
                              });
                          }
                      };
                      /***********
                       * pnr end
                       ***********/

                      /***********
                       * upgrades request start
                       ***********/
                      $scope.continueUpgrades = function () {

                          var requestInfoToUpgradeService = {
                              "MileagePlusNumberOfCompany": $scope.datasource.preSelectedAccount.mileagePlusNumberOfCompany,
                              // fix kevin 2020.12.17
                              "accountId": $scope.datasource.preSelectedAccount.accountId
                          };

                          //abe add validation
                          // fix kevin 2020.12.17
                          // if (!$scope.datasource.preSelectedAccount.mileagePlusNumberOfCompany) {
                          if (!$scope.datasource.preSelectedAccount.hasMileagePlusNumberOfCompany) {
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.SIP_Alert_CUB_SUB_Missing)}'
                                });
                              return;
                          }

                          $scope.widgetSpinner = true;
                          UpgradeService.getUpgradeBalance(
                            requestInfoToUpgradeService, $rootScope.currentUser.id
                          ).then(function (value1) {

                              $scope.widgetSpinner = false;
                              if (util.isSuccessService(value1)) {
                                  $scope.datasource.upgradeData = {
                                      UpgradeAccountName: $scope.datasource.preSelectedAccount.accountName,
                                      UpgradeAccountId: $scope.datasource.preSelectedAccount.accountId,
                                      UpgradeAccountType: $scope.datasource.preSelectedAccount.typeName,
                                      UpgradeAccountExtId: $scope.datasource.preSelectedAccount.extId,
                                      GPUUnitCost: $scope.prodGPU.UnitPrice,
                                      RPUUnitCost: $scope.prodRPU.UnitPrice,
                                      GPUBalance: value1.GPUBalance,
                                      RPUBalance: value1.RPUBalance,
                                      GPUs: value1.vGPUDetail,
                                      RPUs: value1.vRPUDetail,
                                      //20170615 Add Expiration Date (CST)
                                      ExpiryDate: value1.newExpirationDateShownInUI,
                                      //20190523 rwern PPR
                                      UGCUnitCost: $scope.prodUGC.UnitPrice,
                                      UGCBalance: value1.UGCBalance,
                                      UGCs: value1.vUGCDetail
                                  };
                                  $state.go($state.current.parent + '-upgrades', {
                                      feature: 'apply-upgrades'
                                  });
                              }
                          }, function (err) {

                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };

                      /***********
                       * upgrades request end
                       ***********/

                      /************
                       * Bonus Miles ------- abe modified*
                       * ***********/
                      $scope.bonusContinue = function () {

                          $scope.widgetSpinner = true;

                          BonusMilesService.retrievePremierQualification(
                            $scope.lastName_bm, $scope.milePlusNum_bm, $scope.datasource.preSelectedAccount.isTestAccount, $rootScope.currentUser.id,''
                          ).then(function (value1) {

                              $scope.widgetSpinner = false;
                              if (util.isSuccessService(value1)) {
                                  $scope.datasource.bonusMilesData = value1;
                                  $scope.widgetSpinner = true;

                                  BonusMilesService.getBonusmilesQuota(
                                    value1, $rootScope.currentUser.id
                                  ).then(function (value2) {

                                      $scope.widgetSpinner = false;
                                      $scope.datasource.bonusMilesData.maxBonusQuota = Number(value2.BousMilesQuota);
                                      if (util.isSuccessService(value2)) {
                                          $scope.datasource.bonusMilesData.UnitPrice = $scope.bonusMilesProduct.UnitPrice / 500;
                                          $state.go($state.current.parent + '-bonus-miles', {
                                              feature: 'apply-bonus-miles'
                                          });
                                      }
                                  }, function (err) {

                                      $scope.widgetSpinner = false;
                                      $rootScope.$broadcast('showMessage',
                                        {
                                            type: 'alert',
                                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                        });
                                  });
                              }
                          }, function (err) {

                              $scope.widgetSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                      };

                      /********travel certificate service call***********/
                      $scope.travelCertificateClick = function () {
                          //data from service
                          $scope.datasource.travelCertificateData = {
                              transactionNumber: 0,
                              checkedEmail: false,
                              entity: '',
                              entityList: [],
                              bookingClass: '',
                              bookingClassList: [],
                              entityName: '',
                              bookingClassName: '',
                              costPerCredit: 0,
                              infoData: [],
                              costValue: {},
                              maxBudgetNum: 0,
                              totalCreditNum: 0,
                              failureMessages: [],
                              reasonCode: '',
                              reasonCodeFull: '',
                              reasonCodeList: [],
                              divi: '',
                              diviList: [],
                              auth: '',
                              authList: [],
                              effDate: '',
                              currentDate: '',
                              recipientInfo: {
                                  lastName: '',
                                  firstName: '',
                                  email: '',
                                  emailRetype: '',
                                  street: '',
                                  city: '',
                                  state: '',
                                  ZIP: '',
                                  country: '',
                                  organisationName: '',
                                  sendCertificateType: 'Organization'
                              }
                          };
                          //save this might need in the furture (W9 to company modal)
                          /*  if ($rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.corp) {
             angular.element('#travel-certificate-modal').modal();
             } else {
             $scope.travelCertMainService();
             }*/

                          $scope.travelCertMainService();
                      };


                      $scope.travelCertMainService = function () {
                          //angular.element('#travel-certificate-modal').modal('hide');
                          $scope.widgetSpinner = true;
                          TravelCertificateService.getCertAllocationByEmpID()
                            .then(function (value1) {

                                $scope.widgetSpinner = false;
                                if (util.isSuccessService(value1)) {
                                    $scope.datasource.travelCertificateData.budget = value1.vSAAllocationInventoryMap;
                                    $scope.datasource.travelCertificateData.certAllocationByEmpID = value1;
                                    $scope.datasource.travelCertificateData.reasonCodeList = value1.ReasonCodeList;
                                    $scope.datasource.travelCertificateData.authList = value1.AuthorizerList;
                                    $scope.datasource.travelCertificateData.diviList = value1.DivisionList;
                                    $scope.datasource.travelCertificateData.currentDate = value1.CurrentUserToday;

                                    // sorting
                                    $scope.datasource.travelCertificateData.reasonCodeList = _.sortBy($scope.datasource.travelCertificateData.reasonCodeList, ['TravelCertReasonCode', 'TravelCertReasonCodeDefinition']);
                                    $scope.datasource.travelCertificateData.authList = _.sortBy($scope.datasource.travelCertificateData.authList, ['Authorizer_Full_Name__c']);
                                    $scope.datasource.travelCertificateData.diviList = _.sortBy($scope.datasource.travelCertificateData.diviList);

                                    //get all entity and booking class and each value
                                    $scope.widgetSpinner = true;
                                    ProductService.getTravelCertificate($scope.datasource.preSelectedAccount.accountId)
                                      .then(function (value2) {

                                          if (util.isSuccessService(value2)) {
                                              $scope.datasource.travelCertificateData.entityList = [];
                                              $scope.datasource.travelCertificateData.bookingClassList = [];
                                              $scope.datasource.travelCertificateData.costValue = value2.costValue;
                                              //20181210 rwern STY-01262
                                              $scope.datasource.travelCertificateData.entityClassMap = value2.entityClassMap;
                                              var classList = value2.classList,
                                                entityList = value2.entityList;
                                              for (var i = 0, len = classList.length; i < len; i++) {
                                                  //20170628 Change from "~" to "-"
                                                  var each = classList[i].split(" - ");
                                                  $scope.datasource.travelCertificateData.bookingClassList.push({
                                                      name: each[0],
                                                      detail: each[1]
                                                  });
                                              }
                                              for (var i = 0, len = entityList.length; i < len; i++) {
                                                  var each = entityList[i].split(" - ");
                                                  $scope.datasource.travelCertificateData.entityList.push({
                                                      name: each[0],
                                                      detail: each[1]
                                                  });
                                              }
                                              //go to travel certificate
                                              $state.go($state.current.parent + '-travel-certificate', {
                                                  feature: 'apply-travel-certificate'
                                              });
                                              $scope.widgetSpinner = false;
                                          }
                                      }, function (err) {

                                          $scope.widgetSpinner = false;
                                          $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                            });
                                      });
                                }
                            }, function (err) {

                                $scope.widgetSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                  });
                            });
                      };
                      /********end of travel certificate service call***********/
                      /********beverage coupon service call***********/
                      $scope.beverageCouponsClick = function () {
                          $scope.widgetSpinner = true;

                          $scope.datasource.beverageCouponsData = {
                              lastName: '',
                              firstName: '',
                              city: '',
                              state: '',
                              street: '',
                              country: '',
                              ZIP: '',
                              phoneNumber: '',
                              email: '',
                              emailRetype: '',
                              checkedEmail: false,
                              transactionNumber: 0,
                              eachCost: $scope.beverageCouponProduct.UnitPrice,
                              couponNumber: 25,
                          };
                          //$scope.datasource.beverageCouponsData.eachCost = $scope.beverageCouponProduct.UnitPrice;
                          $scope.widgetSpinner = false;

                          $state.go($state.current.parent + '-beverage-coupons', {
                              feature: 'apply-beverage-coupons'
                          });
                      };
                      /********end of beverage service call***********/
                      $scope.initWidget();
                  }];

              return {
                  restrict: 'E',
                  scope: {
                      datasource: '=datasource'
                  },
                  controller: widgetController,
                  templateUrl: 'Sip_AmenityWidgetTemplate' + '?lang={!language}'
              };
          }
          ]);
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('bankingController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state'];

        function controller($rootScope, $scope, $state) {

            /** account summary **/

            /** account summary **/

            /*** fund transfer start **/
            $scope.fundTx = {
                account: '',
                amount: 0,
                transferFromFund: '',
                fundTransferComment: '',
                totalAmount: 0,
                lines: []
            };
            /*** fund transfer stop **/
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('beverageCouponsControl', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', '$interval', '$timeout',
            'BeverageCouponService', 'CMSService', 'AmenityService'];

        function controller($rootScope, $scope, $state, $interval, $timeout,
                            BeverageCouponService, CMSService, AmenityService) {

            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: 'SIP_Beverage_Vouchers__c'
            };

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;

                if ($scope.data.widgetFeature === 'apply-beverage-coupons') {
                    $scope.data.charge.chargeAmount = '';

                    if (!$scope.countryList) {
                        //get country list
                        CMSService.getCountryList().then(function (val) {
                            var list = val;
                            for (var i = 0, len = list.length - 1; i < len; i++) {
                                if (list[i].value === 'U.S.A.') {
                                    list.splice(i, 1);
                                }
                            }
                            list.unshift({
                                disabled: false,
                                value: 'USA',
                                label: 'USA'
                            });
                            $scope.countryList = list;
                            if ($scope.recipientForm && $scope.recipientForm.country) {
                                $timeout(function () {
                                    $scope.recipientForm.country.$validate();
                                }, 1000);
                            }
                        });
                    }
                    else {
                        if ($scope.recipientForm && $scope.recipientForm.country) {
                            $timeout(function () {
                                $scope.recipientForm.country.$validate();
                            }, 1000);
                        }
                    }
                }
                else if ($scope.data.widgetFeature === 'confirm-beverage-coupons') {
                    $scope.data.charge.chargeAmount = $scope.data.beverageCouponsData.eachCost * $scope.data.beverageCouponsData.couponNumber;
                }
            });

            $scope.showDropDown = function (event) {
                $(event.target).siblings('ul').dropdown('toggle');
            };

            $scope.countrySelect = function (c) {
                $scope.data.beverageCouponsData.country = c;
            };

            $scope.clearCountryList = function () {
                $scope.data.beverageCouponsData.country = '';
            };

            //add coupon number
            $scope.addBeverage = function () {

                $scope.data.beverageCouponsData.couponNumber += 5;
            };

            //minus coupon number
            $scope.minusBeverage = function () {
                if ($scope.data.beverageCouponsData.couponNumber > 25) {
                    $scope.data.beverageCouponsData.couponNumber -= 5;
                }
            };

            //keep adding coupon number
            $scope.addHold = function () {

                $scope.keyHoldInterval = $interval(function () {

                    $scope.addBeverage();
                }, 300);
            };

            //keep mining coupon number
            $scope.minusHold = function () {

                $scope.keyHoldInterval = $interval(function () {

                    $scope.minusBeverage();
                }, 300);
            };

            $scope.clearHoldInterval = function () {
                $interval.cancel($scope.keyHoldInterval);
            };

            $scope.confirmContinue = function () {

                $state.go($state.current.parent + '-beverage-coupons', {
                    feature: 'confirm-beverage-coupons'
                });
            };

            $scope.goBack = function () {

                $state.go($state.current.parent + '-beverage-coupons', { feature: 'apply-beverage-coupons' });
            };

            //purchase beverage coupon
            $scope.purchase = function () {

                angular.element('#beverage-coupons-confirm-modal').modal();
            };

            // confirm purchase coupon
            $scope.confirmPurchase = function () {

                //proceed purchase call service
                angular.element('#beverage-coupons-confirm-modal').modal('hide');
                $rootScope.mainSpinner = true;

                var comment = $scope.data.charge.comment;
                var payerId = $scope.data.charge.accSearchId;
                var beneficiaryId = $scope.data.charge.beneficiarySearchId;

                // this param is only used in United Meeting
                var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                // 3 type, jet Stream 1, meeting 2
                var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                //console.log('agreementsIds', agreementsIds)
                //console.log('deduct', deduct)


                var param = {
                    FirstName: $scope.data.beverageCouponsData.firstName,
                    LastName: $scope.data.beverageCouponsData.lastName,
                    PhoneNumber: $scope.data.beverageCouponsData.phoneNumber,
                    StreetAddress: $scope.data.beverageCouponsData.street,
                    BeverageCoutry: $scope.data.beverageCouponsData.country,
                    BeverageCity: $scope.data.beverageCouponsData.city,
                    BeverageState: $scope.data.beverageCouponsData.state,
                    BeverageZIP: $scope.data.beverageCouponsData.ZIP,
                    NumberOfCoupons: $scope.data.beverageCouponsData.couponNumber,
                    BeverageEmailAddress: $scope.data.beverageCouponsData.email
                };

                var totalcost = $scope.data.beverageCouponsData.eachCost * $scope.data.beverageCouponsData.couponNumber;
                //purchase
                AmenityService.preDeductAccountBalance(payerId, totalcost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                    if (value.success) {
                        BeverageCouponService.
                        purchaseBeverageCoupons(
                          param,
                          payerId,
                          beneficiaryId,
                          $scope.data.callerAccount.accountId,
                          comment, $rootScope.currentUser.id,
                          totalcost,
                          value.pendingAmountObjId,
                          agreementsIds,
                          deduct
                        ).then(function (value) {
                            $rootScope.mainSpinner = false;
                            if (value.success) {
                                $scope.data.beverageCouponsData.transactionNumber = value.transactionNumber;
                                angular.element('#beverage-coupons-success-modal').modal();
                            } else {
                                $scope.shouldCheckBalance = true;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }

                        }, function (e) {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                    } else {
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: value.messages[0]
                          });
                    }
                }, function (err) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };

            angular.element('#message-modal').on('hidden.bs.modal', function (e) {

                if ($scope.shouldCheckBalance) {
                    $scope.shouldCheckBalance = false;

                    $rootScope.$broadcast('refreshSelectedAccount', {});
                }
            });

            angular.element('#beverage-coupons-success-modal').on('hidden.bs.modal', function (e) {

                if ($scope.data.beverageCouponsData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.beverageCouponsData.transactionNumber
                    ).then(function () {

                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    }, function (err) {

                        console.debug(err);
                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    })
                }
                else {
                    $state.go($state.current.parent + '-home', { feature: 'init' });
                }
            });
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('bonusMileControl', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', '$interval',
            'BonusMilesService', 'AmenityService'];

        function controller($rootScope, $scope, $state, $interval,
                            BonusMilesService, AmenityService) {

            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: 'SIP_Bonus_Miles__c'
            };

            $scope.bonusMilesNum = 0;
            $scope.bonusMiles = $scope.bonusMilesNum + ' {!$Label.SIP_Miles_Unit}';
            //$scope.checkedEmail123=false;

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;

                if ($scope.data.widgetFeature === 'apply-bonus-miles') {
                    $scope.data.charge.chargeAmount = '';
                }
                else if ($scope.data.widgetFeature === 'confirm-bonus-miles') {
                    $scope.data.charge.chargeAmount = $scope.data.bonusMilesData.UnitPrice * $scope.data.bonusMilesData.bonusMilesNum;
                }
            });

            $scope.addMiles = function () {

                if ($scope.bonusMilesNum >= 10000 || $scope.bonusMilesNum >= $scope.data.bonusMilesData.maxBonusQuota || $scope.data.bonusMilesData.maxBonusQuota <= 0) {
                    return;
                } else {
                    $scope.bonusMilesNum += 500;
                    $scope.bonusMiles = $scope.bonusMilesNum.toLocaleString() + ' {!$Label.SIP_Miles_Unit}';
                    $scope.data.bonusMilesData.bonusMilesNum = $scope.bonusMilesNum;
                }
            };
            $scope.minusMiles = function () {

                if ($scope.bonusMilesNum < 500) {
                    $scope.bonusMiles = 0 + ' {!$Label.SIP_Miles_Unit}';
                } else {
                    $scope.bonusMilesNum -= 500;
                    $scope.bonusMiles = $scope.bonusMilesNum.toLocaleString() + ' {!$Label.SIP_Miles_Unit}';
                    $scope.data.bonusMilesData.bonusMilesNum = $scope.bonusMilesNum;
                }
            };

            //hold button add quick
            $scope.addMilesContinue = function () {

                $scope.continueInterval = $interval(function () {
                    $scope.addMiles();
                }, 300);
            };
            //hold button minus quick
            $scope.minusMilesContinue = function () {

                $scope.continueInterval = $interval(function () {
                    $scope.minusMiles();
                }, 300);
            };
            //release button
            $scope.clearAddMinusInterval = function () {

                $interval.cancel($scope.continueInterval);
            };


            $scope.confirmBonusMiles = function () {

                $state.go($state.current.parent + '-bonus-miles', {
                    feature: 'confirm-bonus-miles'
                });
            };

            $scope.goBack = function () {

                $state.go($state.current.parent + '-bonus-miles', { feature: 'apply-bonus-miles' });
            };

            //purchase bonus miles
            $scope.purchase = function () {

                angular.element('#bonus-miles-confirm-modal').modal();
            };
            // confirm purchase bonus miles

            $scope.confirmPurchase = function () {

                $rootScope.mainSpinner = true;

                var comment = $scope.data.charge.comment;
                var payerId = $scope.data.charge.accSearchId;
                var beneficiaryId = $scope.data.charge.beneficiarySearchId;
                var totalcost = $scope.data.bonusMilesData.UnitPrice * $scope.data.bonusMilesData.bonusMilesNum;

                var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                // 3 type, jet Stream 1, meeting 2
                var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                //proceed purchase
                AmenityService.preDeductAccountBalance(payerId, totalcost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                    if (value.success) {
                        //20170620 add pendingAmountObjId
                        console.log('getAwardMiles in controller');
                        BonusMilesService.getAwardMiles(
                          $rootScope.currentUser.accId,
                          payerId,
                          $scope.data.bonusMilesData.bonusMilesNum.toString(),
                          $scope.data.bonusMilesData.MileagePlusNumber,
                          beneficiaryId,
                          comment,
                          $rootScope.currentUser.id,
                          $scope.data.bonusMilesData.CurrentPremierLevel,
                          $scope.data.bonusMilesData.FirstName,
                          $scope.data.bonusMilesData.LastName,
                          $scope.data.callerAccount.accountId,
                          totalcost,
                          value.pendingAmountObjId
                        ).then(function (value) {

                              $rootScope.mainSpinner = false;
                              angular.element('#bonus-miles-confirm-modal').modal('hide');
                              if (value.success) {
                                  $scope.data.bonusMilesData.transactionNumber = value.transactionNumber;
                                  $scope.beneficiaryName = value.BeneficiaryName || "";
                                  angular.element('#bonus-miles-success-modal').modal();
                              } else {
                                  $scope.shouldCheckBalance = true;
                                  $rootScope.$broadcast('showMessage',
                                    {
                                        type: 'alert',
                                        text: value.messages[0]
                                    });
                              }
                          },
                          function (err) {

                              $rootScope.mainSpinner = false;
                              $rootScope.$broadcast('showMessage',
                                {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                          });
                    } else {
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: value.messages[0]
                          });
                    }
                }, function (err) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };
            angular.element('#message-modal').on('hidden.bs.modal', function (e) {

                if ($scope.shouldCheckBalance) {
                    $scope.shouldCheckBalance = false;

                    $rootScope.$broadcast('refreshSelectedAccount', {});
                }
            });
            angular.element('#bonus-miles-success-modal').on('hidden.bs.modal', function (e) {

                if ($scope.data.bonusMilesData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.bonusMilesData.transactionNumber
                    ).then(function () {

                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    }, function (err) {

                        console.debug(err);
                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    })
                }
                else {
                    $state.go($state.current.parent + '-home', { feature: 'init' });
                }
            });
        }
    })();
    (function () {
        "use strict";

        angular.module('bankingModule')
          .component('eTicketComp', {
              templateUrl: 'Sip_ETicketCompTemplate' + '?lang={!language}',
              controller: controller,
              bindings: {
                  pnr: '=',
                  ticket: '=',
                  isSelectable: '<',
                  toggleticket: '&'
              }
          });

        controller.$inject = [];

        function controller() {

            var $ctrl = this;

            $ctrl.formatDate = function (date) {

                var dateOut = new Date(date);
                return dateOut;
            };
            $ctrl.formatDate2 = function (date) {

                var year = date.substring(0, 4);
                var month = date.substring(4).substring(0, 2);
                var day = date.substring(6);
                var dateOut = new Date(year + '/' + month + '/' + day);
                return dateOut;
            };

            $ctrl.toggleCoupon = function (ticket) {

                ticket.showDetail = ticket.showDetail ? false : true;
            };

            $ctrl.toggleTicket = function (ticket) {

                if ($ctrl.isSelectable) {
                    if ($ctrl.toggleticket) {
                        $ctrl.toggleticket({ ticket: ticket });
                    }
                }
            }
        }

    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('fundTransferController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', 'AccountService', '$timeout', 'util'];

        function controller($rootScope, $scope, $state, AccountService, $timeout, util) {
            $scope.fundTx.iata = '';
            $scope.fundTx.accountSearchValue = '';
            $scope.fundTx.amount = 0;
            $scope.fundTx.maxTransferAmount = 0;

            $scope.getAccClass = util.getAccClass;
            $scope.getAccSymbol = util.getAccSymbol;
            $scope.getAccTitle = util.getAccTitle;

            $scope.$watch('data.preSelectedAccount.accountId', function (newVal, oldVal) {
                if (oldVal !== newVal && newVal) {
                    $scope.loadTargetAccounts();
                    $scope.getMaxAmount();
                }
            });
            $scope.$watch('fundTx.transferFromFund', function (newVal, oldVal) {

                $scope.getMaxAmount();
            });

            $scope.listLimitTo = 500;

            $scope.specialLoad = $rootScope.currentUser.isInternalUser;

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;

                if ($scope.data.widgetFeature === 'apply-fund-transfer') {
                    $scope.fundTx.lines = [];
                    $scope.fundTx.totalAmount = 0;
                    $scope.fundTx.transferFromFund = 'Expiring first';
                    $scope.fundTx.fundTransferComment = '';
                    $scope.txAccountList = [];
                    $scope.loadTargetAccounts();
                    $scope.getMaxAmount();
                }

                if ($scope.data.widgetFeature === 'confirm-fund-transfer') {
                    $scope.fundTx.totalAmount = 0;
                    _($scope.fundTx.lines).forEach(function (item) {

                        $scope.fundTx.totalAmount += parseInt(item.amount);
                    });
                }
            });

            $scope.searchAccount = function () {
                //console.log('specialLoad = ' + $scope.specialLoad);
                $("#txt-fund-transfer").dropdown('toggle');
                if ($scope.specialLoad) {
                    $scope.loadTargetAccounts();
                } else {
                    $scope.searchAccountInfo();
                }
            };
            $scope.lineNumberValChanged = function ($event) {

                $timeout(function () {
                    $scope.fundTx.totalAmount = 0;
                    _($scope.fundTx.lines).forEach(function (item) {

                        $scope.fundTx.totalAmount += parseInt(item.amount);
                    });
                }, 100);
            };
            $scope.getMaxAmount = function () {
                if ($scope.data.preSelectedAccount.accountId) {
                    $rootScope.mainSpinner = true;
                    var expire = $scope.fundTx.transferFromFund === 'Expiring first';
                    AccountService.getTransferLimit(
                      $scope.data.preSelectedAccount.accountId, expire
                    ).then(function (value) {
                        $scope.fundTx.maxTransferAmount = value;
                        $rootScope.mainSpinner = false;
                    });
                }
            };
            $scope.loadTargetAccounts = function () {
                //20181120 rwern MultiBudget: account select defect fix
                //changes req-0681
                $scope.fundTx.accountSearchValue = $scope.fundTx.accountSearchValue.trim();
                var searchValue = '';

                if ($scope.specialLoad && $scope.fundTx.accountSearchValue.length >= 1) {
                    searchValue = $scope.fundTx.accountSearchValue;
                    //changes  req-0681
                    $scope.fundTx.accountSearchValue = '' + $scope.fundTx.accountSearchValue;
                }
                $scope.widgetSpinner = true;
                if ($scope.data.preSelectedAccount && $scope.data.preSelectedAccount.accountId) {
                    AccountService.getSelectableAccountsForFundsTxMultiple(
                      $rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId, searchValue
                    ).then(function (value) {
                        if (value.Accounts.length === 0 && searchValue !== '') {
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                              });
                        }
                        $scope.widgetSpinner = false;
                        $scope.txAccountList = value.Accounts;
                        $('#txt-fund-transfer').dropdown('toggle');

                    }, function (err) {
                        $scope.widgetSpinner = false;
                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                          });
                    });
                }
            };
            $scope.txtAccountKeyup = function ($event) {
                switch ($event.keyCode) {
                    case 13: // enter key trigger search
                        var txt = $event.target;
                        $(txt).dropdown('toggle');
                        if ($scope.specialLoad) {
                            $scope.loadTargetAccounts();
                        } else {
                            $scope.searchAccountInfo();
                        }
                        break;

                    case 40:
                        var txt = $event.target;
                        var ddl = $(txt).attr('aria-describedby');
                        $('#' + ddl).find('li:first').focus();
                        break;

                    default:
                        $scope.fundTx.account = null;
                        $scope.accountSymbol = '';
                        break;
                }
            };
            $scope.ddlAccountKeyup = function ($event) {

                switch ($event.keyCode) {
                    case 38:
                        var prev = $($event.target).prev();
                        if (prev.length > 0) {
                            prev.focus();
                        }
                        break;

                    case 40:
                        var next = $($event.target).next();
                        if (next.length > 0) {
                            next.focus();
                        }
                        break;
                }
            };
            $scope.selectAccount = function (acc, txtId) {
                $scope.accountSymbol = acc.AccountType;
                $('#' + txtId).dropdown('toggle');
                $scope.fundTx.account = acc;
                $scope.fundTx.accountSearchValue = acc.Name;
                $scope.fundTx.iata = acc.ExtId;
            };
            $scope.searchAccountInfo = function () {

                // search button
                // find corresponding company from array
                var recordFound = false;
                _($scope.txAccountList).forEach(function (listItem) {

                    if (listItem.Name === $scope.fundTx.accountSearchValue) {
                        recordFound = true;
                        $scope.fundTx.account = listItem;
                    }
                });

                if (!recordFound) {
                    $scope.fundTx.account = null;
                }
            };
            $scope.filterAccount = function (item) {
                //20181120 rwern MultiBudget: account select defect fix
                var fixedSearchValue = $scope.fundTx.accountSearchValue.trim();
                if ((_.toLower(item.Name)).indexOf((_.toLower(fixedSearchValue))) >= 0 ||
                  (item.AccountType !== $rootScope.ACC_TYPE.corp && item.ExtId && item.ExtId.indexOf($scope.fundTx.accountSearchValue) >= 0)) {
                    return true;
                }
                else {
                    return false;
                }
            };

            $scope.addFundLineItem = function () {

                if ($scope.fundTx.account !== null) {

                    var isValidAccount = true;
                    _($scope.fundTx.lines).forEach(function (item) {

                        if ($scope.fundTx.account.Id === item.account.Id) {
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_fund_transfer_multiple_records)}'
                              });
                            isValidAccount = false;
                            return false;
                        }
                    });

                    if (isValidAccount) {
                        $scope.fundTx.lines.push({
                            index: $scope.fundTx.lines.length + 1,
                            account: $scope.fundTx.account,
                            amount: $scope.fundTx.amount
                        });
                        $scope.fundTx.account = null;
                        $scope.fundTx.accountSearchValue = '';
                        $scope.fundTx.iata = '';
                        $scope.fundTx.amount = 0;
                        $scope.fundTx.totalAmount = 0;
                        _($scope.fundTx.lines).forEach(function (item) {

                            $scope.fundTx.totalAmount += parseInt(item.amount);
                        });
                    }
                }
            };
            $scope.removeFundLineItem = function (index) {

                $scope.fundTx.lines.splice(index - 2, 1);
                _($scope.fundTx.lines).each(function (item, idx) {
                    item.index = idx;
                });
            };

            $scope.continueTransfer = function () {

                $state.go($state.current.parent + '-fund-transfer', { feature: 'confirm-fund-transfer' });
            };

            $scope.confirmModal = $('#fund-transfer-confirm-modal');
            $scope.successModal = $('#fund-transfer-success-modal');

            $scope.transfer = function () {

                $scope.confirmModal.modal();
            };

            $scope.confirmTransfer = function () {

                if ($scope.fundTx.totalAmount > $scope.data.preSelectedAccount.balance) {
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Insufficient_Fund)}'
                      });

                    return false;
                }

                // combine the obj
                $scope.transferObj = {};
                $scope.transferObj.RequestItems = [];
                $scope.transferObj.Order = $scope.fundTx.transferFromFund;
                $scope.transferObj.Comments = $scope.fundTx.fundTransferComment;

                for (var i = 0; i < $scope.fundTx.lines.length; i++) {

                    $scope.transferObj.RequestItems.push({
                        ReceiverId: $scope.fundTx.lines[i].account.Id,
                        PayerId: $scope.data.preSelectedAccount.accountId,
                        Amount: $scope.fundTx.lines[i].amount
                    })
                }

                $rootScope.mainSpinner = true;
                AccountService.submitFundsTransfer($scope.transferObj).then(function (value) {
                // 2021-03-10. US481575. Suraphol.
                // if fund transfer failed, set up next screen and return to caller.
                if (!value) {
//console.debug('display error message and return');
                    $rootScope.mainSpinner = false;
                    $scope.confirmModal.modal('hide');
                    $scope.successModal.modal();
                    $rootScope.$broadcast('showMessage',
                    {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                    });
                    return false;
                }

                    AccountService.getAccountById($scope.data.preSelectedAccount.accountId, $rootScope.currentUser.id).then(function (value) {
                        $scope.data.preSelectedAccount.balance = value.Fund;
                        $rootScope.mainSpinner = false;
                        $scope.getMaxAmount();
                        $scope.confirmModal.modal('hide');
                        $scope.successModal.modal();
                        $scope.transferObj = '';
                    }, function (err) {

                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    })
                }, function (err) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                })
            };
            $scope.successModal.on('hidden.bs.modal', function (e) {
                if ($rootScope.currentUser.permission.SIP_Account_Summary__c) {
                    $state.go($state.current.parent + '-account-summary', {
                        feature: 'banking-summary'
                    });
                } else {
                    $state.go($state.current.parent + '-fund-transfer', {
                        feature: 'apply-fund-transfer'
                    });
                }
            });
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('GSTransferController', controller);
        controller.$inject = ['$rootScope', '$scope', '$state', 'AccountService', '$timeout', 'util'];

        function controller($rootScope, $scope, $state, AccountService, $timeout, util) {
            $scope.fundTx.iata = '';
            $scope.fundTx.accountSearchValue = '';
            $scope.fundTx.amount = 0;
            $scope.fundTx.maxGSTransferAmount = 0;
            $scope.fundTx.noGSPermission = false;

            $scope.getAccClass = util.getAccClass;
            $scope.getAccSymbol = util.getAccSymbol;
            $scope.getAccTitle = util.getAccTitle;
            $scope.$watch('data.preSelectedAccount.accountId', function (newVal, oldVal) {
                if (oldVal !== newVal && newVal) {
                    $scope.loadTargetAccounts();
                    $scope.getMaxAmount();
                }
            });
            $scope.listLimitTo = 500;
            $scope.specialLoad = $rootScope.currentUser.isInternalUser;
            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                $scope.data.widgetFeature = toParams.feature;
                if ($scope.data.widgetFeature === 'apply-gs-transfer') {
                    $scope.fundTx.lines = [];
                    $scope.fundTx.totalAmount = 0;
                    $scope.fundTx.transferFromFund = 'Expiring first';
                    $scope.fundTx.fundTransferComment = '';
                    $scope.txAccountList = [];
                    $scope.loadTargetAccounts();
                    $scope.getMaxAmount();
                }
                if ($scope.data.widgetFeature === 'confirm-gs-transfer') {
                    $scope.getMaxAmount();
                    $scope.fundTx.totalAmount = 0;
                    _($scope.fundTx.lines).forEach(function (item) {
                        $scope.fundTx.totalAmount += parseInt(item.amount);
                    });
                }
            });
            $scope.searchAccount = function () {
                $("#txt-fund-transfer").dropdown('toggle');
                $scope.loadTargetAccounts();
            };
            $scope.lineNumberValChanged = function ($event) {
                $timeout(function () {
                    $scope.fundTx.totalAmount = 0;
                    _($scope.fundTx.lines).forEach(function (item) {
                        $scope.fundTx.totalAmount += parseInt(item.amount);
                    });
                }, 100);
            };
            $scope.getMaxAmount = function () {
                if ($scope.data.preSelectedAccount.accountId) {
                    $rootScope.mainSpinner = true;
                    AccountService.getGSTransferLimit(
                      $scope.data.preSelectedAccount.accountId
                    ).then(function (value) {
                        $scope.fundTx.maxGSTransferAmount = value;
                        $rootScope.mainSpinner = false;
                    });
                }
            };
            $scope.loadTargetAccounts = function () {
                //20181120 rwern MultiBudget: account select defect fix
                $scope.fundTx.accountSearchValue = $scope.fundTx.accountSearchValue.trim();
                var searchValue = '';
                if ($scope.specialLoad && $scope.fundTx.accountSearchValue.length >= 1) {
                    searchValue = $scope.fundTx.accountSearchValue;
                    $scope.fundTx.accountSearchValue = ' ' + $scope.fundTx.accountSearchValue;
                }
                $scope.widgetSpinner = true;
                if ($scope.data.preSelectedAccount && $scope.data.preSelectedAccount.accountId) {
                    AccountService.getSelectableAccountsForFundsTxMultiple(
                      $rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId, searchValue
                    ).then(function (value) {
                        if (value.Accounts.length === 0 && searchValue !== '') {
                            $rootScope.$broadcast('showMessage', {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                            });
                        }
                        $scope.widgetSpinner = false;
                        $scope.txAccountList = value.Accounts;
                        $('#txt-fund-transfer').dropdown('toggle');
                    }, function (err) {
                        $scope.widgetSpinner = false;
                        console.debug(err);
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                }
            };
            $scope.txtAccountKeyup = function ($event) {
                switch ($event.keyCode) {
                    case 13: // enter key trigger search
                        var txt = $event.target;
                        $(txt).dropdown('toggle');
                        if ($scope.specialLoad) {
                            $scope.loadTargetAccounts();
                        } else {
                            $scope.searchAccountInfo();
                        }
                        break;
                    case 40:
                        var txt = $event.target;
                        var ddl = $(txt).attr('aria-describedby');
                        $('#' + ddl).find('li:first').focus();
                        break;
                    default:
                        $scope.fundTx.account = null;
                        $scope.accountSymbol = '';
                        break;
                }
            };
            $scope.ddlAccountKeyup = function ($event) {
                switch ($event.keyCode) {
                    case 38:
                        var prev = $($event.target).prev();
                        if (prev.length > 0) {
                            prev.focus();
                        }
                        break;
                    case 40:
                        var next = $($event.target).next();
                        if (next.length > 0) {
                            next.focus();
                        }
                        break;
                }
            };
            $scope.selectAccount = function (acc, txtId) {
                $scope.accountSymbol = acc.AccountType;
                $('#' + txtId).dropdown('toggle');
                $scope.fundTx.account = acc;
                $scope.fundTx.accountSearchValue = acc.Name;
                $scope.fundTx.iata = acc.ExtId;
                $scope.fundTx.noGSPermission = true;
            };
            $scope.filterAccount = function (item) {
                //20181120 rwern MultiBudget: account select defect fix
                var fixedSearchValue = $scope.fundTx.accountSearchValue.trim();
                if ((_.toLower(item.Name)).indexOf((_.toLower(fixedSearchValue))) >= 0 ||
                  (item.AccountType !== $rootScope.ACC_TYPE.corp && item.ExtId && item.ExtId.indexOf($scope.fundTx.accountSearchValue) >= 0)) {
                    return true;
                } else {
                    return false;
                }
            };
            $scope.addFundLineItem = function () {
                if ($scope.fundTx.account !== null) {
                    var isValidAccount = true;
                    _($scope.fundTx.lines).forEach(function (item) {
                        if ($scope.fundTx.account.Id === item.account.Id) {
                            $rootScope.$broadcast('showMessage', {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Sip_fund_transfer_multiple_records)}'
                            });
                            isValidAccount = false;
                            return false;
                        }
                    });
                    if (isValidAccount) {
                        $scope.fundTx.lines.push({
                            index: $scope.fundTx.lines.length + 1,
                            account: $scope.fundTx.account,
                            amount: $scope.fundTx.amount
                        });
                        $scope.fundTx.account = null;
                        $scope.fundTx.accountSearchValue = '';
                        $scope.fundTx.iata = '';
                        $scope.fundTx.amount = 0;
                        $scope.fundTx.totalAmount = 0;
                        _($scope.fundTx.lines).forEach(function (item) {
                            $scope.fundTx.totalAmount += parseInt(item.amount);
                        });
                    }
                }
            };
            $scope.removeFundLineItem = function (index) {
                $scope.fundTx.lines.splice(index - 2, 1);
                _($scope.fundTx.lines).each(function (item, idx) {
                    item.index = idx;
                });
            };
            $scope.continueTransfer = function () {
                $state.go($state.current.parent + '-gs-transfer', {
                    feature: 'confirm-gs-transfer'
                });
            };
            $scope.confirmModal = $('#fund-transfer-confirm-modal');
            $scope.successModal = $('#fund-transfer-success-modal');
            $scope.transfer = function () {
                $scope.confirmModal.modal();
            };
            $scope.confirmTransfer = function () {
                if ($scope.fundTx.totalAmount > $scope.fundTx.maxGSTransferAmount) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Insufficient_Fund)}'
                    });
                    return false;
                }
                // combine the obj
                $scope.transferObj = {};
                $scope.transferObj.RequestItems = [];
                //$scope.transferObj.Order = $scope.fundTx.transferFromFund;
                $scope.transferObj.Order = 'Expiring first';
                $scope.transferObj.Comments = $scope.fundTx.fundTransferComment;
                for (var i = 0; i < $scope.fundTx.lines.length; i++) {
                    $scope.transferObj.RequestItems.push({
                        ReceiverId: $scope.fundTx.lines[i].account.Id,
                        PayerId: $scope.data.preSelectedAccount.accountId,
                        Amount: $scope.fundTx.lines[i].amount
                    })
                }
                $rootScope.mainSpinner = true;
                AccountService.submitGSTransfer($scope.transferObj).then(function (value) {
                    // 2021-03-10. US481575. Suraphol.
                    // if fund transfer failed, set up next screen and return to caller.
                    if (!value) {
//console.debug('display error message and return');
                        $rootScope.mainSpinner = false;
                        $scope.confirmModal.modal('hide');
                        $scope.successModal.modal();
                        $rootScope.$broadcast('showMessage',
                        {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                        });
                        return false;
                    }
                    AccountService.getAccountById($scope.data.preSelectedAccount.accountId, $rootScope.currentUser.id).then(function (value) {
                        $scope.data.preSelectedAccount.globalService = value.GlobalService;
                        $rootScope.mainSpinner = false;
                        $scope.getMaxAmount();
                        $scope.confirmModal.modal('hide');
                        $scope.successModal.modal();
                        $scope.transferObj = '';
                    }, function (err) {
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                        });
                    })
                }, function (err) {
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                })
            };
            $scope.successModal.on('hidden.bs.modal', function (e) {
                if ($rootScope.currentUser.permission.SIP_Account_Summary__c) {
                    $state.go($state.current.parent + '-account-summary', {
                        feature: 'banking-summary'
                    });
                } else {
                    $state.go($state.current.parent + '-gs-transfer', {
                        feature: 'apply-gs-transfer'
                    });
                }
            });
        }
    })();
    (function () {
        "use strict";

        angular.module('bankingModule')
          .component('passengerComp', {
              templateUrl: 'Sip_PassengerCompTemplate' + '?lang={!language}',
              controller: controller,
              bindings: {
                  passengers: '=',
                  isShowHeader: '='
              }
          });

        controller.$inject = ['$rootScope'];

        function controller($rootScope) {

            var $ctrl = this;

            this.$onInit = function () {

                console.debug($ctrl.passengers);
            };
        }
    })();
    (function () {
        "use strict";

        angular.module('bankingModule')
          .component('paymentOptionComp', {
              templateUrl: 'Sip_PaymentOptionCompTemplate' + '?lang={!language}',
              controller: controller,
              bindings: {
                  forms: '=',
                  accountType: '=', // company, agency, discretionary,
                  accSearchValue: '=',
                  accSearchId: '=',
                  accSearchExtId: '=',
                  beneficiarySearchValue: '=',
                  beneficiarySearchId: '=',
                  preSelectedAccount: '=',
                  callerAccount: '=',
                  chargeAmount: '=',
                  chargeType: '=',
                  comment: '=',
                  remark: '=',
                  isValidFundOption: '=',
                  enableFund: '=',
                  enableIns: '=',
                  enableGs: '=',
                  companyOption: '=', // 1 = enable, 2 = disable (hide), 3 = readonly
                  agencyOption: '=', // 1 = enable, 2 = disable (hide), 3 = readonly
                  disOption: '=', // 1 = enable, 2 = disable (hide), 3 = readonly
                  amenityType: '=',
                  //rwern 20181101 REQ-0354
                  beneficiaryOrReason: '=?',
                  reason: '=?'
              }
          });

        controller.$inject = ['$rootScope', 'AccountService', 'util', 'UnitedClubService'];

        function controller($rootScope, AccountService, util, UnitedClubService) {

            var $ctrl = this;

            $ctrl.listLimitTo = 500;
            $ctrl.poSpinner = false;

            $ctrl.specialLoad = $rootScope.currentUser.isInternalUser &&
              ($rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ||
                $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c);

            $ctrl.companySearchValue = '';
            $ctrl.companySearchId = '';
            $ctrl.companySearchExtId = '';
            $ctrl.companyAccType = '';

            $ctrl.agencySearchValue = '';
            $ctrl.agencySearchId = '';
            $ctrl.agencySearchExtId = '';
            $ctrl.agencyAccType = '';

            $ctrl.disSearchValue = '';
            $ctrl.disSearchId = '';
            $ctrl.disSearchExtId = '';
            $ctrl.disAccType = '';

            $ctrl.companyBalance = '';
            $ctrl.companyIns = '';
            $ctrl.companyGs = '';
            $ctrl.agencyBalance = '';
            $ctrl.agencyIns = '';
            $ctrl.agencyGs = '';
            $ctrl.disBalance = '';
            $ctrl.disIns = '';
            $ctrl.disGs = '';

            $ctrl.companyBalanceAccess = false;
            $ctrl.agencyBalanceAccess = false;
            $ctrl.disBalanceAccess = false;

            $ctrl.isCompanyReadOnly = false;
            $ctrl.isAgencyReadOnly = false;
            $ctrl.isDiscretionaryReadOnly = false;

            $ctrl.isValidCompanyFund = false;
            $ctrl.isValidAgencyFund = false;
            $ctrl.isValidDiscretionaryFund = false;

            $ctrl.isValidCompanyIns = false;
            $ctrl.isValidAgencyIns = false;
            $ctrl.isValidDiscretionaryIns = false;

            $ctrl.isValidCompanyGs = false;
            $ctrl.isValidAgencyGs = false;
            $ctrl.isValidDiscretionaryGs = false;

            $ctrl.accounts = [];
            $ctrl.corpAccounts = [];
            $ctrl.agtAccounts = [];
            $ctrl.disAccounts = [];
            $ctrl.agtBeneficiaries = [];
            $ctrl.disBeneficiaries = [];

            $ctrl.agtBeneficiary = '';
            $ctrl.agtBeneficiaryId = '';
            $ctrl.agtBeneficiaryAccType = '';
            $ctrl.agtBeneficiaryExtId = '';
            $ctrl.agtBeneficiaries = [];

            $ctrl.disBeneficiary = '';
            $ctrl.disBeneficiaryId = '';
            $ctrl.disBeneficiaryAccType = '';
            $ctrl.disBeneficiaryExtId = '';
            $ctrl.disBeneficiaries = [];

            $ctrl.beneficiaryRequired = false;

            $ctrl.txtAgency = $('#txt-agency');
            $ctrl.ddlAgency = $('#ddl-agency');
            $ctrl.txtAgencyBeneficiary = $('#txt-agency-beneficiary');
            $ctrl.ddlAgencyBeneficiary = $('#ddl-agency-beneficiary');
            $ctrl.txtCompany = $('#txt-company');
            $ctrl.ddlCompany = $('#ddl-company');
            $ctrl.txtDiscretionary = $('#txt-dis');
            $ctrl.ddlDiscretionary = $('#ddl-dis');
            $ctrl.txtDiscretionaryBeneficiary = $('#txt-dis-beneficiary');
            $ctrl.ddlDiscretionaryBeneficiary = $('#ddl-dis-beneficiary');

            //rwern 20181026 REQ-0354 - start
            $ctrl.beneficiaryOrReason = 'Beneficiary';
            $ctrl.reason = '';
            $ctrl.reasonList = [];
            $ctrl.reasonRequired = false;
            $ctrl.checkSingleNomination = function () {
                if ($ctrl.amenityType &&
                  ($ctrl.amenityType === 'SIP_Global_Service_Status_Nominations__c' ||
                    $ctrl.amenityType === 'SIP_1K_Status_Nominations__c' ||
                    $ctrl.amenityType === 'SIP_Platinum_Status_Nominations__c' ||
                    $ctrl.amenityType === 'SIP_Gold_Status_Nominations__c' ||
                    $ctrl.amenityType === 'SIP_Silver_Status_Nominations__c'))
                    return true;
                else
                    return false;
            };
            $ctrl.beneficiaryOrReasonChange = function (value) {
                $ctrl.beneficiaryOrReason = value;
                if (value === 'Reason') {
                    $ctrl.beneficiaryRequired = false;
                    $ctrl.reasonRequired = true;
                    $ctrl.disBeneficiary = '';
                } else {
                    $ctrl.beneficiaryRequired = true;
                    $ctrl.reasonRequired = false;
                    $ctrl.reason = '';
                }
            };
            $ctrl.getReason = function () {
                $ctrl.poSpinner = true;
                if ($ctrl.reasonList.length <= 0) {
                    AccountService.getReasonValues().then(function (value) {
                        $ctrl.reasonList = value;
                    }, function (err) {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                }
                $ctrl.poSpinner = false;
            };
            $ctrl.setReason = function (value) {
                $ctrl.reason = value;
                if (value !== null) {
                    $ctrl.reasonRequired = false;
                }
            };

            //START Task:24522 Moin :: Code to enable the purchase button only when Comment is added on Subscription Transaction Summary Page
            /*$ctrl.addComment = function(){
                if($ctrl.comment){
                    $scope.$parent.data.charge.comment = true;
                }else{
                    $scope.$parent.data.charge.comment = false;
                }
            }*/
            //rwern 20181026 REQ-0354 - end

            $rootScope.$on('checkAccount', function (event, data) {

                $ctrl.checkAccount();
            });
            $rootScope.$on('fundCheck', function (event, data) {

                $ctrl.fundCheck();
            });
            $rootScope.$on('refreshSelectedAccount', function (event, data) {

                $ctrl.getAccountById();
            });

            this.$onInit = function () {

                $ctrl.accounts = [];
                if ($ctrl.specialLoad) {
                    if ($ctrl.preSelectedAccount) {
                        $ctrl.accounts = [{
                            'Id': $ctrl.preSelectedAccount.accountId,
                            'Name': $ctrl.preSelectedAccount.accountName,
                            'ExtId': $ctrl.preSelectedAccount.extId,
                            'AccountType': $ctrl.preSelectedAccount.typeName,
                            'BankingBalanceAccess': $ctrl.preSelectedAccount.bankingBalanceAccess,
                            'Fund': $ctrl.preSelectedAccount.balance,
                            'Instrument': $ctrl.preSelectedAccount.instrument,
                            'GlobalService': $ctrl.preSelectedAccount.globalService,
                            'IsTestAccount': $ctrl.preSelectedAccount.isTestAccount,
                            'MileagePlusNumberOfCompany': $ctrl.preSelectedAccount.mileagePlusNumberOfCompany
                        }];
                        $ctrl.arrangeAcc();
                    }
                }
                $ctrl.loadAccounts();
                //abe edit 0822 add assist text
                $ctrl.showBenefiLabel = $rootScope.currentUser.isInternalUser;
                //rwern 20181026 REQ-0354
                if ($rootScope.currentUser.isInternalUser) {
                    $ctrl.getReason();
                }
                $ctrl.isSingleNomination = $ctrl.checkSingleNomination();
            };
            $ctrl.arrangeAcc = function (skipCheck) {

                $ctrl.corpAccounts = util.filterAccountByType($ctrl.accounts,
                  [$rootScope.ACC_TYPE.corp, $rootScope.ACC_TYPE.aor,$rootScope.ACC_TYPE.passPlus]);
                $ctrl.agtAccounts = util.filterAccountByType($ctrl.accounts,
                  [$rootScope.ACC_TYPE.agency, $rootScope.ACC_TYPE.agencyBranch, $rootScope.ACC_TYPE.resv]);
                $ctrl.disAccounts = util.filterAccountByType($ctrl.accounts,
                  [$rootScope.ACC_TYPE.dis]);
                //rwern 20181101 REQ-0354: For single nomination, don't add 'Reason' accounts to the beneficiary list
                var corp;
                if ($ctrl.isSingleNomination) {
                    corp = util.filterAccountByType($ctrl.beneficiaryAccounts,
                      [$rootScope.ACC_TYPE.corp]);
                } else {
                    corp = util.filterAccountByType($ctrl.beneficiaryAccounts,
                      [$rootScope.ACC_TYPE.corp, $rootScope.ACC_TYPE.psuedo]);
                }
                var agt = util.filterAccountByType($ctrl.beneficiaryAccounts,
                  [$rootScope.ACC_TYPE.agency, $rootScope.ACC_TYPE.agencyBranch]);

                $ctrl.agtBeneficiaries = _.cloneDeep(corp);
                $ctrl.disBeneficiaries = _.concat(_.cloneDeep(corp), _.cloneDeep(agt));

                if (!skipCheck) {
                    $ctrl.checkAccount();
                }
            };
            $ctrl.loadAccounts = function (txtId) {
                if ($ctrl.amenityType && _.isNumber($ctrl.chargeAmount)) {

                    var searchText = '';
                    var extId = '';

                    if ($ctrl.specialLoad) {
                        switch (txtId) {
                            case 'txt-company':
                                searchText = $ctrl.companySearchValue;
                                break;
                            case 'txt-agency':
                                searchText = $ctrl.agencySearchValue;
                                break;
                            case 'txt-dis':
                                searchText = $ctrl.disSearchValue;
                                break;
                            case 'txt-agency-beneficiary':
                                searchText = $ctrl.agtBeneficiary;
                                break;
                            case 'txt-dis-beneficiary':
                                searchText = $ctrl.disBeneficiary;
                                break;
                        }

                        if ($ctrl.callerAccount) {
                            if ($ctrl.callerAccount.extId) {
                                extId = $ctrl.callerAccount.extId;
                            }
                        }
                    }

                    $ctrl.poSpinner = true;

                    if (!txtId) {

                        AccountService.getBeneficiaryAccounts(
                          $rootScope.currentUser.id, $ctrl.amenityType, searchText
                        ).then(function (value) {

                            $ctrl.poSpinner = false;
                            $ctrl.beneficiaryAccounts = value.Accounts;
                        }, function (err) {

                            $ctrl.poSpinner = false;
                            console.debug(err);
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        AccountService.getAccounts(
                          $rootScope.currentUser.id, $ctrl.amenityType, searchText, extId
                        ).then(function (value) {

                            $ctrl.poSpinner = false;
                            $ctrl.accounts = value.Accounts;
                        }, function (err) {

                            $ctrl.poSpinner = false;
                            console.debug(err);
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        if ($ctrl.specialLoad) {
                            $ctrl.arrangeAcc(true);
                            if (txtId) {
                                $ctrl.searchAccInfo(txtId);
                            }
                        }
                        else {
                            $ctrl.arrangeAcc();
                        }
                    }

                    if (txtId === 'txt-agency-beneficiary' ||
                      txtId === 'txt-dis-beneficiary') {
                        AccountService.getBeneficiaryAccounts(
                          $rootScope.currentUser.id, $ctrl.amenityType, searchText
                        ).then(function (value) {
                            if (value.Accounts.length === 0 && searchText !== '') {
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                                  });
                            }
                            $ctrl.poSpinner = false;
                            // var acc = value.Accounts;
                            // $ctrl.accounts = _.merge($ctrl.accounts, acc);
                            $ctrl.beneficiaryAccounts = value.Accounts;
                            if ($ctrl.specialLoad) {
                                $ctrl.arrangeAcc(true);
                                if (txtId) {
                                    $ctrl.searchAccInfo(txtId);
                                }
                            }
                            else {
                                $ctrl.arrangeAcc();
                            }
                        }, function (err) {

                            $ctrl.poSpinner = false;
                            console.debug(err);
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        })
                    } else {
                        AccountService.getAccounts(
                          $rootScope.currentUser.id, $ctrl.amenityType, searchText, extId
                        ).then(function (value) {
                            if (value.Accounts.length === 0 && searchText !== '') {
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                                  });
                            }
                            $ctrl.poSpinner = false;
                            // var acc = value.Accounts;
                            // $ctrl.accounts = _.merge($ctrl.accounts, acc);
                            $ctrl.accounts = value.Accounts;

                            if ($ctrl.specialLoad) {
                                $ctrl.arrangeAcc(true);
                                if (txtId) {
                                    $ctrl.searchAccInfo(txtId);
                                }
                            }
                            else {
                                $ctrl.arrangeAcc();
                            }
                        }, function (err) {

                            $ctrl.poSpinner = false;
                            console.debug(err);
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });


                    }
                }

                // united meeting
                $ctrl.getAgreementsByAccountId();
            };
            $ctrl.checkAccount = function () {

                $ctrl.txtAgency = $('#txt-agency');
                $ctrl.ddlAgency = $('#ddl-agency');
                $ctrl.txtCompany = $('#txt-company');
                $ctrl.ddlCompany = $('#ddl-company');
                $ctrl.txtDiscretionary = $('#txt-dis');
                $ctrl.ddlDiscretionary = $('#ddl-dis');

                if ($ctrl.preSelectedAccount && $ctrl.preSelectedAccount.accountName !== '') {

                    if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.corp) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.corp;
                        $ctrl.companyAccType = $rootScope.ACC_TYPE.corp;
                        $ctrl.companySearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.companySearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.companySearchExtId = $ctrl.preSelectedAccount.extId;
                        $ctrl.companyBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.companyIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.companyGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.companyBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.isCompanyReadOnly = true;
                        if ($rootScope.currentUser.isInternalUser) {
                            $ctrl.txtCompany.prop('readonly', true);
                            $ctrl.txtCompany.prop('disabled', true);
                        };
                        // $ctrl.txtCompany.prop('readonly', true);
                        // $ctrl.txtCompany.prop('disabled', true);
                        $ctrl.accSearchValue = $ctrl.companySearchValue;
                        $ctrl.accSearchId = $ctrl.companySearchId;
                        $ctrl.accSearchExtId = $ctrl.companySearchExtId;
                        $ctrl.chargeTypeClick('company');
                    }
                    else if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.aor;
                        $ctrl.companyAccType = $rootScope.ACC_TYPE.aor;
                        $ctrl.companySearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.companySearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.companySearchExtId = $ctrl.preSelectedAccount.extId;
                        $ctrl.companyBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.companyIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.companyGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.companyBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.isCompanyReadOnly = true;
                        $ctrl.txtCompany.prop('readonly', true);
                        $ctrl.txtCompany.prop('disabled', true);
                        $ctrl.accSearchValue = $ctrl.companySearchValue;
                        $ctrl.accSearchId = $ctrl.companySearchId;
                        $ctrl.accSearchExtId = $ctrl.companySearchExtId;
                        $ctrl.chargeTypeClick('company');
                    }
                    else if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.agencyBranch) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.agencyBranch;
                        $ctrl.agencyAccType = $rootScope.ACC_TYPE.agencyBranch;
                        $ctrl.agencySearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.agencySearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.agencySearchExtId = $ctrl.preSelectedAccount.extId;
                        $ctrl.agencyBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.agencyIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.agencyGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.agencyBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.accSearchValue = $ctrl.agencySearchValue;
                        $ctrl.accSearchId = $ctrl.agencySearchId;
                        $ctrl.accSearchExtId = $ctrl.agencySearchExtId;
                        $ctrl.chargeTypeClick('agency');
                    }
                    else if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.agency) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.agency;
                        $ctrl.agencyAccType = $rootScope.ACC_TYPE.agency;
                        $ctrl.agencySearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.agencySearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.agencySearchExtId = $ctrl.preSelectedAccount.extId;
                        $ctrl.agencyBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.agencyIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.agencyGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.agencyBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.accSearchValue = $ctrl.agencySearchValue;
                        $ctrl.accSearchId = $ctrl.agencySearchId;
                        $ctrl.accSearchExtId = $ctrl.agencySearchExtId;
                        $ctrl.chargeTypeClick('agency');
                    }
                    else if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.resv) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.resv;
                        $ctrl.agencyAccType = $rootScope.ACC_TYPE.resv;
                        $ctrl.agencySearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.agencySearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.agencySearchExtId = $ctrl.preSelectedAccount.extId;
                        $ctrl.agencyBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.agencyIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.agencyGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.agencyBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.accSearchValue = $ctrl.agencySearchValue;
                        $ctrl.accSearchId = $ctrl.agencySearchId;
                        $ctrl.accSearchExtId = $ctrl.agencySearchExtId;
                        $ctrl.chargeTypeClick('agency');
                    }
                    else if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.dis) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.dis;
                        $ctrl.disAccType = $rootScope.ACC_TYPE.dis;
                        $ctrl.disSearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.disSearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.disBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.disIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.disGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.disBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.accSearchValue = $ctrl.disSearchValue;
                        $ctrl.accSearchId = $ctrl.disSearchId;
                        $ctrl.accSearchExtId = $ctrl.disSearchExtId;
                        $ctrl.chargeTypeClick('dis');
                    }
                    else if ($ctrl.preSelectedAccount.typeName === $rootScope.ACC_TYPE.passPlus) {

                        $ctrl.accountType = $rootScope.ACC_TYPE.passPlus;
                        $ctrl.companyAccType = $rootScope.ACC_TYPE.passPlus;
                        $ctrl.companySearchValue = $ctrl.preSelectedAccount.accountName;
                        $ctrl.companySearchId = $ctrl.preSelectedAccount.accountId;
                        $ctrl.companySearchExtId = $ctrl.preSelectedAccount.extId;
                        $ctrl.companyBalance = $ctrl.preSelectedAccount.balance;
                        $ctrl.companyIns = $ctrl.preSelectedAccount.instrument;
                        $ctrl.companyGs = $ctrl.preSelectedAccount.globalService;
                        $ctrl.companyBalanceAccess = $ctrl.preSelectedAccount.bankingBalanceAccess;
                        $ctrl.isCompanyReadOnly = true;
                        if ($rootScope.currentUser.isInternalUser) {
                            $ctrl.txtCompany.prop('readonly', true);
                            $ctrl.txtCompany.prop('disabled', true);
                        };
                        // $ctrl.txtCompany.prop('readonly', true);
                        // $ctrl.txtCompany.prop('disabled', true);
                        $ctrl.accSearchValue = $ctrl.companySearchValue;
                        $ctrl.accSearchId = $ctrl.companySearchId;
                        $ctrl.accSearchExtId = $ctrl.companySearchExtId;
                        $ctrl.chargeTypeClick('company');
                    }


                    if ($ctrl.companyOption === 3) {
                        $ctrl.isCompanyReadOnly = true;
                        $ctrl.txtCompany.prop('readonly', true);
                        $ctrl.txtCompany.prop('disabled', true);
                    }

                    if ($ctrl.agencyOption === 3) {
                        $ctrl.isAgencyReadOnly = true;
                        $ctrl.txtAgency.prop('readonly', true);
                        $ctrl.txtAgency.prop('disabled', true);
                    }

                    if ($ctrl.disOption === 3) {
                        $ctrl.isDiscretionaryReadOnly = true;
                        $ctrl.txtDiscretionary.prop('readonly', true);
                        $ctrl.txtDiscretionary.prop('disabled', true);
                    }

                    $ctrl.populateBeneficiary();
                    $ctrl.getAccountById();
                }
            };
            $ctrl.chargeTypeClick = function (type) {

                $ctrl.accountType = '';
                $ctrl.chargeType = '';
                $ctrl.accSearchValue = '';
                $ctrl.accSearchId = '';
                $ctrl.accSearchExtId = '';

                switch (type) {
                    case 'company':
                        $ctrl.accountType = $rootScope.ACC_TYPE.corp;
                        if ($ctrl.companySearchId) {
                            _($ctrl.corpAccounts).forEach(function (acc) {

                                if (acc.Id === $ctrl.companySearchId) {
                                    $ctrl.accountType = acc.AccountType;
                                    $ctrl.accSearchValue = acc.Name;
                                    $ctrl.accSearchId = acc.Id;
                                    $ctrl.accSearchExtId = acc.ExtId;
                                    $ctrl.beneficiarySearchId = '';
                                    $ctrl.beneficiarySearchValue = '';
                                    return false;
                                }
                            });
                        }
                        if ($ctrl.enableFund) {
                            $ctrl.chargeType = 'fund';
                        }
                        else if ($ctrl.enableGs) {
                            $ctrl.chargeType = 'gs';
                        }
                        else if ($ctrl.enableIns) {
                            $ctrl.chargeType = 'ins';
                        }
                        $ctrl.agtBeneficiaryId = '';
                        $ctrl.agtBeneficiary = '';
                        $ctrl.agtBeneficiaryExtId = '';
                        $ctrl.disBeneficiaryId = '';
                        $ctrl.disBeneficiary = '';
                        $ctrl.disBeneficiaryExtId = '';
                        break;
                    case 'agency':
                        $ctrl.accountType = $rootScope.ACC_TYPE.agency;
                        if ($ctrl.agencySearchId) {
                            _($ctrl.agtAccounts).forEach(function (acc) {

                                if (acc.Id === $ctrl.agencySearchId) {
                                    $ctrl.accountType = acc.AccountType;
                                    $ctrl.accSearchValue = acc.Name;
                                    $ctrl.accSearchId = acc.Id;
                                    $ctrl.accSearchExtId = acc.ExtId;
                                    $ctrl.beneficiarySearchId = $ctrl.agtBeneficiaryId;
                                    $ctrl.beneficiarySearchValue = $ctrl.agtBeneficiary;
                                    return false;
                                }
                            });
                        }
                        if ($ctrl.enableFund) {
                            $ctrl.chargeType = 'fund';
                        }
                        else if ($ctrl.enableGs) {
                            $ctrl.chargeType = 'gs';
                        }
                        else if ($ctrl.enableIns) {
                            $ctrl.chargeType = 'ins';
                        }
                        $ctrl.disBeneficiaryId = '';
                        $ctrl.disBeneficiary = '';
                        $ctrl.disBeneficiaryExtId = '';
                        break;
                    case 'dis':
                        $ctrl.accountType = $rootScope.ACC_TYPE.dis;
                        $ctrl.accSearchValue = $ctrl.disSearchValue;
                        $ctrl.accSearchId = $ctrl.disSearchId;
                        $ctrl.accSearchExtId = $ctrl.disSearchExtId;
                        $ctrl.beneficiarySearchId = $ctrl.disBeneficiaryId;
                        $ctrl.beneficiarySearchValue = $ctrl.disBeneficiary;
                        if ($ctrl.enableFund) {
                            $ctrl.chargeType = 'fund';
                        }
                        else if ($ctrl.enableGs) {
                            $ctrl.chargeType = 'gs';
                        }
                        else if ($ctrl.enableIns) {
                            $ctrl.chargeType = 'ins';
                        }
                        $ctrl.agtBeneficiaryId = '';
                        $ctrl.agtBeneficiary = '';
                        $ctrl.agtBeneficiaryExtId = '';
                        break;
                }

                $ctrl.populateBeneficiary();
                $ctrl.fundCheck();
            };
            $ctrl.fundCheck = function () {

                $ctrl.isValidCompanyFund = _.isNumber($ctrl.chargeAmount) &&
                  _.isNumber($ctrl.companyBalance) && $ctrl.companyBalance >= $ctrl.chargeAmount;
                $ctrl.isValidCompanyIns = _.isNumber($ctrl.companyIns) && $ctrl.companyIns > 0;
                $ctrl.isValidCompanyGs = _.isNumber($ctrl.companyGs) && $ctrl.companyGs > 0;

                $ctrl.isValidAgencyFund = _.isNumber($ctrl.chargeAmount) &&
                  _.isNumber($ctrl.agencyBalance) && $ctrl.agencyBalance >= $ctrl.chargeAmount;
                $ctrl.isValidAgencyIns = _.isNumber($ctrl.agencyIns) && $ctrl.agencyIns > 0;
                $ctrl.isValidAgencyGs = _.isNumber($ctrl.agencyGs) && $ctrl.agencyGs > 0;

                $ctrl.isValidDisFund = _.isNumber($ctrl.chargeAmount) &&
                  _.isNumber($ctrl.disBalance) && $ctrl.disBalance >= $ctrl.chargeAmount;
                $ctrl.isValidDisIns = _.isNumber($ctrl.disIns) && $ctrl.disIns > 0;
                $ctrl.isValidDisGs = _.isNumber($ctrl.disGs) && $ctrl.disGs > 0;

                switch ($ctrl.accountType) {
                    case $rootScope.ACC_TYPE.corp:
                    case $rootScope.ACC_TYPE.passPlus:
                    case $rootScope.ACC_TYPE.aor:
                        switch ($ctrl.chargeType) {
                            case 'fund':
                                $ctrl.isValidFundOption = $ctrl.isValidCompanyFund;
                                break;
                            case 'ins':
                                $ctrl.isValidFundOption = $ctrl.isValidCompanyIns;
                                break;
                            case 'gs':
                                $ctrl.isValidFundOption = $ctrl.isValidCompanyGs;
                                break;
                        }
                        break;
                    case $rootScope.ACC_TYPE.agency:
                    case $rootScope.ACC_TYPE.agencyBranch:
                    case $rootScope.ACC_TYPE.resv:
                        switch ($ctrl.chargeType) {
                            case 'fund':
                                $ctrl.isValidFundOption = $ctrl.isValidAgencyFund;
                                break;
                            case 'ins':
                                $ctrl.isValidFundOption = $ctrl.isValidAgencyIns;
                                break;
                            case 'gs':
                                $ctrl.isValidFundOption = $ctrl.isValidAgencyGs;
                                break;
                        }
                        break;
                    case $rootScope.ACC_TYPE.dis:
                        switch ($ctrl.chargeType) {
                            case 'fund':
                                $ctrl.isValidFundOption = $ctrl.isValidDisFund;
                                break;
                            case 'ins':
                                $ctrl.isValidFundOption = $ctrl.isValidDisIns;
                                break;
                            case 'gs':
                                $ctrl.isValidFundOption = $ctrl.isValidDisGs;
                                break;
                        }
                        break;
                }
            };

            //united meeting
            $ctrl.agreementBalance = 0;
            $ctrl.getAgreementsByAccountId = function () {
                var id = '';
                switch ($ctrl.accountType) {
                    case $rootScope.ACC_TYPE.corp:
                    case $rootScope.ACC_TYPE.aor:
                        id = $ctrl.companySearchId;
                        break;
                    case $rootScope.ACC_TYPE.agency:
                    case $rootScope.ACC_TYPE.agencyBranch:
                    case $rootScope.ACC_TYPE.resv:
                        id = $ctrl.agencySearchId;
                        break;
                    case $rootScope.ACC_TYPE.dis:
                        id = $ctrl.disSearchId;
                        break;
                }

                if (id) {
                    // AccountService.getAgreementsByAccountId(id,$rootScope.currentUser.id).then(function(res){
                    //     $ctrl.aAgreements = res.result;
                    //     $ctrl.agreementBalance = $ctrl.aAgreements[0].agreementBalance;
                    //     console.log('getAgreementsByAccountId',res)
                    // })
                }
            }
            $ctrl.selectAgreement = function (agreementObj) {

                $ctrl.agreeSearchValue = agreementObj.agreementName;
            }

            $ctrl.getAccountById = function () {

                var id = '';
                switch ($ctrl.accountType) {
                    case $rootScope.ACC_TYPE.corp:
                    case $rootScope.ACC_TYPE.passPlus:
                    case $rootScope.ACC_TYPE.aor:
                        id = $ctrl.companySearchId;
                        break;
                    case $rootScope.ACC_TYPE.agency:
                    case $rootScope.ACC_TYPE.agencyBranch:
                    case $rootScope.ACC_TYPE.resv:
                        id = $ctrl.agencySearchId;
                        break;
                    case $rootScope.ACC_TYPE.dis:
                        id = $ctrl.disSearchId;
                        break;
                }

                if (id) {
                    $ctrl.poSpinner = true;
                    AccountService.getAccountById(
                      id,
                      $rootScope.currentUser.id
                    ).then(function (value) {
                        $ctrl.poSpinner = false;
                        $ctrl.accSearchValue = value.Name;
                        $ctrl.accSearchId = value.Id;
                        $ctrl.accSearchExtId = value.ExtId;
                        switch ($ctrl.accountType) {
                            case $rootScope.ACC_TYPE.corp:
                            case $rootScope.ACC_TYPE.passPlus:
                            case $rootScope.ACC_TYPE.aor:
                                $ctrl.companyBalance = value.Fund;
                                $ctrl.companyIns = value.Instrument;
                                $ctrl.companyGs = value.GlobalService;
                                $ctrl.companyBalanceAccess = value.BankingBalanceAccess;
                                if ($ctrl.companyBalance === null || $ctrl.companyIns === null || $ctrl.companyGs === null) {
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                                      });
                                }
                                break;
                            case $rootScope.ACC_TYPE.agency:
                            case $rootScope.ACC_TYPE.agencyBranch:
                            case $rootScope.ACC_TYPE.resv:
                                $ctrl.agencyBalance = value.Fund;
                                $ctrl.agencyIns = value.Instrument;
                                $ctrl.agencyGs = value.GlobalService;
                                $ctrl.agencyBalanceAccess = value.BankingBalanceAccess;
                                if ($ctrl.agencyBalance === null || $ctrl.agencyIns === null || $ctrl.agencyGs === null) {
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                                      });
                                }
                                break;
                            case $rootScope.ACC_TYPE.dis:
                                $ctrl.disBalance = value.Fund;
                                $ctrl.disIns = value.Instrument;
                                $ctrl.disGs = value.GlobalService;
                                $ctrl.disBalanceAccess = value.BankingBalanceAccess;
                                if ($ctrl.disBalance === null || $ctrl.disIns === null || $ctrl.disGs === null) {
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                                      });
                                }
                                break;
                        }

                        if (value.Id === $ctrl.preSelectedAccount.accountId) {
                            $ctrl.preSelectedAccount.balance = value.Fund;
                            $ctrl.preSelectedAccount.instrument = value.Instrument;
                            $ctrl.preSelectedAccount.globalService = value.GlobalService;
                        }

                        $ctrl.fundCheck();
                    }, function (err) {

                        console.debug(err);
                        $ctrl.poSpinner = false;
                        switch (type) {
                            case $rootScope.ACC_TYPE.corp:
                            case $rootScope.ACC_TYPE.passPlus:
                            case $rootScope.ACC_TYPE.aor:
                                $ctrl.companyBalance = null;
                                $ctrl.companyIns = null;
                                $ctrl.companyGs = null;
                                break;
                            case $rootScope.ACC_TYPE.agency:
                            case $rootScope.ACC_TYPE.agencyBranch:
                            case $rootScope.ACC_TYPE.resv:
                                $ctrl.agencyBalance = null;
                                $ctrl.agencyIns = null;
                                $ctrl.agencyGs = null;
                                break;
                            case $rootScope.ACC_TYPE.dis:
                                $ctrl.disBalance = null;
                                $ctrl.disIns = null;
                                $ctrl.disGs = null;
                                break;
                        }
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                }
            };
            $ctrl.populateBeneficiary = function () {

                switch ($ctrl.accountType) {
                    case $rootScope.ACC_TYPE.corp:
                    case $rootScope.ACC_TYPE.passPlus:
                    case $rootScope.ACC_TYPE.aor:
                        $ctrl.beneficiaryRequired = false;
                        break;
                    case $rootScope.ACC_TYPE.agency:
                    case $rootScope.ACC_TYPE.agencyBranch:
                    case $rootScope.ACC_TYPE.resv:
                        $ctrl.beneficiaryRequired = false;
                        break;
                    case $rootScope.ACC_TYPE.dis:
                        $ctrl.beneficiaryRequired = true;
                        break;
                }
            };

            $ctrl.txtClick = function ($event) {

                $event.target.select();
            };
            $ctrl.txtKeyup = function ($event) {

                var txt = $event.target;
                switch ($event.keyCode) {
                    case 13: // enter key trigger search
                        $(txt).dropdown('toggle');
                        switch (txt.id) {
                            case 'txt-company':
                            case 'txt-agency':
                            case 'txt-dis':
                            case 'txt-agency-beneficiary':
                            case 'txt-dis-beneficiary':
                                $ctrl.searchAcc(txt.id);
                                break;
                        }
                        break;
                    case 40:
                        var ddl = $(txt).attr('aria-describedby');
                        var li = $('#' + ddl).find('li:first');
                        if (li.hasClass('list-limit-exceeded')) {
                            li = li.next();
                        }
                        li.focus();
                        break;
                    default:
                        switch (txt.id) {
                            case 'txt-company':
                                $ctrl.purgeCompany();
                                break;
                            case 'txt-agency':
                                $ctrl.purgeAgency();
                                break;
                            case 'txt-dis':
                                $ctrl.purgeDis();
                                break;
                            case 'txt-agency-beneficiary':
                                $ctrl.agtBeneficiaryAccType = '';
                                $ctrl.agtBeneficiaryExtId = '';
                                $ctrl.beneficiarySearchId = '';
                                break;
                            case 'txt-dis-beneficiary':
                                $ctrl.disBeneficiaryAccType = '';
                                $ctrl.disBeneficiaryExtId = '';
                                $ctrl.beneficiarySearchId = '';
                                break;
                        }
                        break;
                }
            };
            $ctrl.ddlKeyup = function ($event) {

                switch ($event.keyCode) {
                    case 38:
                        var prev = $($event.target).prev();
                        if (prev.length > 0) {
                            prev.focus();
                        }
                        break;

                    case 40:
                        var next = $($event.target).next();
                        if (next.length > 0) {
                            next.focus();
                        }
                        break;
                }
            };

            $ctrl.purgeCompany = function () {

                $ctrl.isValidFundOption = false;
                $ctrl.companyAccType = '';
                $ctrl.companySearchId = '';
                $ctrl.companySearchExtId = '';
                $ctrl.chargeType = '';
                $ctrl.companyBalance = '';
                $ctrl.companyIns = '';
                $ctrl.companyGs = '';
                $ctrl.companyBalanceAccess = false;
                $ctrl.accSearchValue = '';
                $ctrl.accSearchId = '';
                $ctrl.accSearchExtId = '';
            };
            $ctrl.purgeAgency = function () {

                $ctrl.isValidFundOption = false;
                $ctrl.chargeType = '';
                $ctrl.agencyAccType = '';
                $ctrl.agencySearchId = '';
                $ctrl.agencySearchExtId = '';
                $ctrl.agencyBalance = '';
                $ctrl.agencyIns = '';
                $ctrl.agencyGs = '';
                $ctrl.agencyBalanceAccess = false;
                $ctrl.accSearchValue = '';
                $ctrl.accSearchId = '';
                $ctrl.accSearchExtId = '';
            };
            $ctrl.purgeDis = function () {

                $ctrl.disAccType = '';
                $ctrl.isValidFundOption = false;
                $ctrl.disSearchId = '';
                $ctrl.chargeType = '';
                $ctrl.disBalance = '';
                $ctrl.disIns = '';
                $ctrl.disGs = '';
                $ctrl.disBalanceAccess = false;
                $ctrl.accSearchValue = '';
                $ctrl.accSearchId = '';
                $ctrl.accSearchExtId = '';
            };

            $ctrl.searchAcc = function (txtId) {
                if ($ctrl.specialLoad) {
                    $ctrl.loadAccounts(txtId);
                }
                else {
                    $ctrl.searchAccInfo(txtId);
                }
            };

            $ctrl.searchAccInfo = function (txtId) {
                var record;
                if (txtId === 'txt-company' || txtId === 'txt-agency' || txtId === 'txt-dis') {
                    $ctrl.accSearchValue = '';
                    $ctrl.accSearchId = '';
                    $ctrl.accSearchExtId = '';
                    switch (txtId) {
                        case 'txt-company':
                            $ctrl.purgeCompany();
                            _($ctrl.corpAccounts).forEach(function (acc) {

                                if ($ctrl.companySearchValue === acc.Name) {
                                    $ctrl.companySearchId = acc.Id;
                                    $ctrl.companySearchExtId = acc.ExtId;
                                    $ctrl.accountType = acc.AccountType;
                                    record = acc;
                                    return false;
                                }
                            });
                            break;
                        case 'txt-agency':
                            $ctrl.purgeAgency();
                            _($ctrl.agtAccounts).forEach(function (acc) {

                                if ($ctrl.agencySearchValue === acc.ExtId || $ctrl.agencySearchValue === acc.Name) {
                                    $ctrl.agencySearchId = acc.Id;
                                    $ctrl.agencySearchExtId = acc.ExtId;
                                    $ctrl.accountType = acc.AccountType;
                                    record = acc;
                                    return false;
                                }
                            });
                            break;
                        case 'txt-dis':
                            $ctrl.purgeDis();
                            _($ctrl.disAccounts).forEach(function (acc) {

                                if ($ctrl.disSearchValue === acc.Name) {
                                    $ctrl.disSearchId = acc.Id;
                                    $ctrl.disSearchExtId = acc.ExtId;
                                    $ctrl.accountType = acc.AccountType;
                                    record = acc;
                                    return false;
                                }
                            });
                            break;
                    }
                    if ($ctrl.enableFund) {
                        $ctrl.chargeType = 'fund';
                    }
                    else if ($ctrl.enableGs) {
                        $ctrl.chargeType = 'gs';
                    }
                    else if ($ctrl.enableIns) {
                        $ctrl.chargeType = 'ins';
                    }
                    if (record) {
                        $ctrl.getAccountById();
                    }
                    else {
                        $('#' + txtId).dropdown('toggle');
                    }
                }
                else if (txtId === 'txt-agency-beneficiary') {

                    var isMatch = false;
                    $ctrl.beneficiarySearchId = '';
                    $ctrl.beneficiarySearchValue = '';
                    $ctrl.agtBeneficiaryAccType = '';
                    $ctrl.agtBeneficiaryExtId = '';
                    _($ctrl.agtBeneficiaries).forEach(function (b) {

                        if (_.lowerCase($ctrl.agtBeneficiary) === _.lowerCase(b.Name)) {
                            isMatch = true;
                            $ctrl.beneficiarySearchValue = b.Name;
                            $ctrl.beneficiarySearchId = b.Id;
                            $ctrl.agtBeneficiaryId = b.Id;
                            $ctrl.agtBeneficiaryAccType = b.AccountType;
                            $ctrl.agtBeneficiaryExtId = b.ExtId;
                            return false;
                        }
                    });
                    if (!isMatch) {
                        $ctrl.agtBeneficiaryId = '';
                        $ctrl.agtBeneficiary = '';
                        $('#' + txtId).dropdown('toggle');
                    }
                    if (!$('#' + txtId).parent().hasClass('open')) {
                        $('#' + txtId).parent().get(0).className += ' open';
                    }
                }
                else if (txtId === 'txt-dis-beneficiary') {

                    var isMatch = false;
                    $ctrl.beneficiarySearchId = '';
                    $ctrl.beneficiarySearchValue = '';
                    $ctrl.disBeneficiaryAccType = '';
                    $ctrl.disBeneficiaryExtId = '';
                    _($ctrl.disBeneficiaries).forEach(function (b) {

                        if (_.lowerCase($ctrl.disBeneficiary) === _.lowerCase(b.Name)) {
                            isMatch = true;
                            $ctrl.beneficiarySearchValue = b.Name;
                            $ctrl.beneficiarySearchId = b.Id;
                            $ctrl.disBeneficiaryId = b.Id;
                            $ctrl.disBeneficiaryAccType = b.AccountType;
                            $ctrl.disBeneficiaryExtId = b.ExtId;
                            return false;
                        }
                    });
                    if (!isMatch) {
                        $ctrl.disBeneficiaryId = '';
                        $ctrl.disBeneficiary = '';
                        $('#' + txtId).dropdown('toggle');
                    }
                    if (!$('#' + txtId).parent().hasClass('open')) {
                        $('#' + txtId).parent().get(0).className += ' open';
                    }
                }
            };

            function getCurrentPermission(accId) {
                var userId = $rootScope.currentUser.id,
                  meetingAccountId = accId;

                AccountService.getUserWithMeetingAcctPermissions(userId, meetingAccountId).then(function (res) {
                    if (res) {
                        util.setRootCurPermission(res[0].userPermissionMap);
                    };
                });
            };

            $ctrl.selectAcc = function (acc, txtId) {
                getCurrentPermission(acc.Id);
                if (txtId === 'txt-company' || txtId === 'txt-agency' || txtId === 'txt-dis') {
                    switch (txtId) {
                        case 'txt-company':
                            // $ctrl.txtCompany.dropdown('toggle');
                            $ctrl.purgeCompany();
                            $ctrl.companySearchValue = acc.Name;
                            $ctrl.companySearchId = acc.Id;
                            $ctrl.companySearchExtId = acc.ExtId;
                            $ctrl.companyAccType = acc.AccountType;
                            $ctrl.forms.paymentOptForm.txtCompany.$validate();
                            break;
                        case 'txt-agency':
                            // $ctrl.txtAgency.dropdown('toggle');
                            $ctrl.purgeAgency();
                            $ctrl.agencySearchValue = acc.Name;
                            $ctrl.agencySearchId = acc.Id;
                            $ctrl.agencySearchExtId = acc.ExtId;
                            $ctrl.agencyAccType = acc.AccountType;
                            $ctrl.forms.paymentOptForm.txtAgency.$validate();
                            break;
                        case 'txt-dis':
                            // $ctrl.txtDiscretionary.dropdown('toggle');
                            $ctrl.purgeDis();
                            $ctrl.disSearchValue = acc.Name;
                            $ctrl.disSearchId = acc.Id;
                            $ctrl.disAccType = acc.AccountType;
                            $ctrl.forms.paymentOptForm.txtDis.$validate();
                            break;
                    }
                    $ctrl.accountType = acc.AccountType;
                    if ($ctrl.enableFund) {
                        $ctrl.chargeType = 'fund';
                    }
                    else if ($ctrl.enableGs) {
                        $ctrl.chargeType = 'gs';
                    }
                    else if ($ctrl.enableIns) {
                        $ctrl.chargeType = 'ins';
                    }
                    $ctrl.getAccountById();
                }
                else if (txtId === 'txt-agency-beneficiary') {
                    $ctrl.txtAgencyBeneficiary.dropdown('toggle');
                    $ctrl.beneficiarySearchId = acc.Id;
                    $ctrl.beneficiarySearchValue = acc.Name;
                    $ctrl.agtBeneficiaryId = acc.Id;
                    $ctrl.agtBeneficiary = acc.Name;
                    $ctrl.agtBeneficiaryAccType = acc.AccountType;
                    $ctrl.agtBeneficiaryExtId = acc.ExtId;
                    $ctrl.forms.paymentOptForm.txtAgtBeneficiary.$validate();
                }
                else if (txtId === 'txt-dis-beneficiary') {
                    $ctrl.txtDiscretionaryBeneficiary.dropdown('toggle');
                    $ctrl.beneficiarySearchId = acc.Id;
                    $ctrl.beneficiarySearchValue = acc.Name;
                    $ctrl.disBeneficiaryId = acc.Id;
                    $ctrl.disBeneficiary = acc.Name;
                    $ctrl.disBeneficiaryAccType = acc.AccountType;
                    $ctrl.disBeneficiaryExtId = acc.ExtId;
                    $ctrl.forms.paymentOptForm.txtDisBeneficiary.$validate();
                }
            };

            $ctrl.getAccClass = util.getAccClass;
            $ctrl.getAccSymbol = util.getAccSymbol;
            $ctrl.getAccTitle = util.getAccTitle;

            $ctrl.filterAccount = function (text) {

                return function (item) {
                    if ((_.toLower(item.Name)).indexOf((_.toLower(text))) >= 0 ||
                      (item.ExtId && item.ExtId.indexOf(text)) >= 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                };
            };
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('penaltyWaiverController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', 'formPattern', 'util',
            'PNRService', 'AccountService', 'AmenityService'];

        function controller($rootScope, $scope, $state, formPattern, util,
                            PNRService, AccountService, AmenityService) {

            $scope.formPattern = formPattern;
            $scope.confirmModal = $('#penalty-waiver-confirm-modal');
            $scope.successModal = $('#penalty-waiver-success-modal');
            $scope.messageModal = $('#message-modal');

            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '{!JSENCODE($Label.Sip_Fee_Waiver_Comment)}' + ' ' + $scope.data.jetStreamComments,
                remark: $rootScope.currentUser.isInternalUser ? '{!JSENCODE($Label.Sip_Fee_Waiver_Remark)}' + ' ' + $scope.data.jetStreamComments : '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: 'SIP_Penalty_Waiver__c'
            };

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;
                if ($scope.data.widgetFeature === 'apply-waiver') {
                    $scope.data.charge.chargeAmount = '';
                }
                else if ($scope.data.widgetFeature === 'confirm-waiver') {
                    $scope.data.charge.chargeAmount = $scope.data.PNR ? $scope.data.PNR.SalesReservationDetail.SumWaiverFee : 0;
                }
            });

            /***********
             * apply waiver start
             ***********/
            $scope.formatDate = function (date) {

                var dateOut = new Date(date);
                return dateOut;
            };
            $scope.formatDate2 = function (date) {

                var year = date.substring(0, 4);
                var month = date.substring(4).substring(0, 2);
                var day = date.substring(6);
                var dateOut = new Date(year + '/' + month + '/' + day);
                return dateOut;
            };
            $scope.selectableTicket = function (ticket) {

                if (_.toLower(ticket.IsSelectable) === 'true' || ticket.IsSelectable === true) {
                    return true;
                }
                else {
                    return false;
                }
            };
            $scope.notSelectableTicket = function (ticket) {

                if (_.toLower(ticket.IsSelectable) === 'true' || ticket.IsSelectable === true) {
                    return false;
                }
                else {
                    return true;
                }
            };
            $scope.toggleTicket = function (ticket, performCostCalculation) {

                if (ticket) {

                    if (ticket.IsSelectable) {
                        ticket.IsSelected = ticket.IsSelected ? false : true;
                    }

                    if (ticket.IsSelected) {
                        $scope.data.selectedPrimaryTicketCount++;
                        $scope.data.selectedTicketCount++;
                        $scope.data.selectedTicketNumber.push(ticket.TicketNumber);
                        if (ticket.InfantInd === 'false') {
                            $scope.data.selectedTicketWithoutInfantIndCount++;
                        }
                    }
                    else {
                        $scope.data.selectedPrimaryTicketCount--;
                        $scope.data.selectedTicketCount--;
                        $scope.data.selectedTicketNumber.splice($scope.data.selectedTicketNumber.indexOf(ticket.TicketNumber), 1);
                        if (ticket.InfantInd === 'false') {
                            $scope.data.selectedTicketWithoutInfantIndCount--;
                        }
                    }

                    _(ticket.ConjunctiveTickets).forEach(function (conjunctiveTicket) {

                        conjunctiveTicket.IsSelected = ticket.IsSelected;
                        if (conjunctiveTicket.IsSelected) {
                            $scope.data.selectedTicketCount++;
                            $scope.data.selectedTicketNumber.push(conjunctiveTicket.TicketNumber);
                        }
                        else {
                            $scope.data.selectedTicketCount--;
                            $scope.data.selectedTicketNumber.splice($scope.data.selectedTicketNumber.indexOf(conjunctiveTicket.TicketNumber), 1);
                        }
                    });

                    if (performCostCalculation) {
                        $rootScope.mainSpinner = true;
                        PNRService.applyWaiver($scope.data.PNR, $scope.data.fundAccountId, $scope.data.feeWaiverType).then(function (value) { //Hamed PW added fundAccountId, feeWaiverType

                            $rootScope.mainSpinner = false;
                            $scope.data.PNR = value;
                            $rootScope.$broadcast('fundCheck', {});
                        }, function (err) {

                            console.debug(err);
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                    }
                }
            };
            $scope.applyWaiver = function () {
                //Hamed PW
                $scope.data.fundAccountId = $scope.data.preSelectedAccount.accountId;
                $scope.data.feeWaiverType = $scope.data.feeWaiverSelection;
                //End Hamed PW

                if ($scope.data.selectedPrimaryTicketCount > 0 && ($scope.data.feeWaiverType === 'PW' || ($scope.data.selectedTicketWithoutInfantIndCount === $scope.data.NEWPNR.SalesReservationDetail.Travelers.length))) {

                    var waiverTickets = $scope.data.selectedTicketNumber.join();
                    $scope.data.jetStreamComments = waiverTickets;
                    $rootScope.mainSpinner = true;
                    //Hamed PW changing the signature of call, adding fundAccountId, feeWaiverType
                    PNRService.applyWaiver(
                      $scope.data.PNR, $scope.data.fundAccountId, $scope.data.feeWaiverType
                    ).then(function (value) {

                        $rootScope.mainSpinner = false;
                        $scope.data.PNR = value;
                        $state.go($state.current.parent + '-penalty-waiver', { feature: 'confirm-waiver' });

                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                          });
                    });
                } else {
                    $scope.newPNRPassengerCount = $scope.data.NEWPNR.SalesReservationDetail.Travelers.length;
                    var alertText = ($scope.newPNRPassengerCount > 1) ? '{!JSENCODE($Label.PW_Old_New_Ticket_Count_1)}' + ' ' + $scope.newPNRPassengerCount + ' ' + '{!JSENCODE($Label.PW_Old_New_Ticket_Count_2)}' + ' ' + $scope.newPNRPassengerCount + ' ' + '{!JSENCODE($Label.PW_Old_New_Ticket_Count_3)}' : '{!JSENCODE($Label.PW_Old_New_Ticket_Count_1)}' + ' ' + $scope.newPNRPassengerCount + ' ' + '{!JSENCODE($Label.PW_Old_New_Ticket_Count_4)}' + ' ' + $scope.newPNRPassengerCount + ' ' + '{!JSENCODE($Label.PW_Old_New_Ticket_Count_5)}';
                    //text: '{!JSENCODE($Label.PW_Old_New_Ticket_Count_1)}' + $scope.newPNRPassengerCount + '{!JSENCODE($Label.PW_Old_New_Ticket_Count_2)}' +  $scope.newPNRPassengerCount + '{!JSENCODE($Label.PW_Old_New_Ticket_Count_3)}'
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: alertText
                      });

                }
            };
            /***********
             * apply waiver end
             ***********/

            /***********
             * confirm waiver start
             ***********/
            $scope.back = function () {

                $state.go($state.current.parent + '-penalty-waiver', { feature: 'apply-waiver' });
            };
            $scope.confirmWaiver = function () {

                if ($rootScope.IsImpersonation) {
                    return;
                }

                $scope.confirmModal.modal();
            };

            $scope.comfirmApplyWaiverMessage = false;
            $scope.confirmApplyWaiver = function () {

                if ($scope.data.selectedPrimaryTicketCount > 0) {

                    var accountType = $scope.data.charge.accountType;
                    var remark = $scope.data.charge.remark;
                    var comment = $scope.data.charge.comment;
                    //var comment = $scope.data.jetStreamComments;
                    var payerId = $scope.data.charge.accSearchId;
                    var beneficiaryId = $scope.data.charge.beneficiarySearchId;
                    var callerId = '';
                    if ($scope.data.callerAccount) {
                        callerId = $scope.data.callerAccount.accountId;
                    }

                    $rootScope.mainSpinner = true; // 1. recheck fund availability
                    AccountService.getAccountById(
                      payerId,
                      $rootScope.currentUser.id
                    ).then(function (value) {

                        var fund = value.Fund;
                        $rootScope.mainSpinner = false;
                        if ($scope.data.selectedPrimaryTicketCount > 0 &&
                          fund >= $scope.data.PNR.SalesReservationDetail.SumWaiverFee) {

                            //Hamed PW

                            var newAgencyPNRConfirmWaiver = '';
                            var newPNRConfirmWaiver = '';
                            if ($scope.data.NEWPNR && $scope.data.NEWPNR.SalesReservationDetail)  //revisit logic...
                            {
                                $scope.data.newAgencyPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.AssociatedPNRs[0].RecordLocator;
                                $scope.data.newPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.PNR.RecordLocator;
                                newAgencyPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.AssociatedPNRs[0].RecordLocator;
                                newPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.PNR.RecordLocator;
                            }

                            //End Hamed PW
                            // 2018-06-25. REQ-0492. Suraphol.
                            var callerFirstName = '';
                            var callerLastName = '';
                            if ($scope.data.callerAccount) {
                                callerFirstName = $scope.data.callerAccount.callerFirstName;
                                callerLastName = $scope.data.callerAccount.callerLastName;
                            }
                            $rootScope.mainSpinner = true; // 2. send request to confirm waiver
                            //kevin fix 2021.1.14
                            PNRService.preDeductAccountBalance4WaiverFavor(
                              payerId,
                              $rootScope.currentUser.id,
                              $scope.data.PNR
                            ).then(function(){
                                if (value.success){
                                    PNRService.confirmWaiverFavor(  //Hamed PW - added new PNR parameters
                                      $scope.data.PNR,
                                      $rootScope.currentUser.id,
                                      payerId,
                                      beneficiaryId,
                                      callerId,
                                      callerFirstName,
                                      callerLastName,
                                      comment,
                                      remark, newAgencyPNRConfirmWaiver, newPNRConfirmWaiver
                                    ).then(function (value) {

                                        $rootScope.mainSpinner = false;
                                        if (value.errors && value.errors.length > 0) {
                                            $scope.comfirmApplyWaiverMessage = true;
                                            $rootScope.$broadcast('showMessage',
                                              {
                                                  type: 'alert',
                                                  text: value.errors[0]
                                              });
                                        }
                                        else {
                                            $scope.data.transactionEntity = value;
                                            $scope.confirmModal.modal('hide');
                                            $scope.successModal.modal();

                                            $scope.canDismiss = true;
                                            if ($rootScope.currentUser.isInternalUser) {
                                                $scope.canDismiss = false;
                                            }

                                            var waiverCode = $scope.data.transactionEntity.ticketInfos[0].waiverFavorId;

                                            //Hamed PW adding new PNR details to sendRemarks
                                            //20180611 tbd
                                            var waiverProductCode;
                                            if ($scope.data.PNR.SalesReservationDetail.TicketInfo !== null) {
                                                for (var i = 0; i < $scope.data.PNR.SalesReservationDetail.TicketInfo.length; i++) {
                                                    if ($scope.data.PNR.SalesReservationDetail.TicketInfo[i].IsSelected) {
                                                        waiverProductCode = $scope.data.PNR.SalesReservationDetail.TicketInfo[i].waiverFavorInfo.waiverFavorInfoDetail.WaiverFavorTypeCode;
                                                        break;
                                                    }
                                                }
                                            }
                                            // var waiverProductCode = $scope.data.PNR.SalesReservationDetail.TicketInfo[0].waiverFavorInfo.waiverFavorInfoDetail.WaiverFavorTypeCode;
                                            $scope.data.remarkMessage = '';
                                            AmenityService.sendRemarksPW(
                                              $scope.data.PNR,
                                              $rootScope.currentUser.id,
                                              waiverCode,
                                              //'x90',
                                              waiverProductCode,
                                              remark, $scope.data.newAgencyPNRConfirmWaiver, $scope.data.newPNRConfirmWaiver
                                            ).then(function (value) {

                                                if (value.success) {
                                                    if (value.messages.length > 0) {
                                                        $scope.data.remarkMessage = value.messages[0];
                                                    }
                                                }
                                                else {
                                                    $scope.data.remarkMessage = '{!JSENCODE($Label.Sip_Alert_Fail_To_Send_Remarks)}';
                                                }
                                                $scope.canDismiss = true;
                                            }, function (err) {

                                                $scope.data.remarkMessage = '{!JSENCODE($Label.Sip_Alert_Fail_To_Send_Remarks)}';
                                                $scope.canDismiss = true;
                                            });
                                        }
                                    }, function (err) {

                                        $rootScope.mainSpinner = false;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: err
                                          });
                                    });
                                }else {
                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: value.messages[0]
                                      });
                                }
                            })

                        }
                        else {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.SIP_Alert_Amenity_Fund_Insufficient)}'
                              });
                        }
                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                }
            };
            $scope.messageModal.on('hidden.bs.modal', function (e) {

                if ($scope.comfirmApplyWaiverMessage) {
                    $scope.comfirmApplyWaiverMessage = false;

                    $rootScope.$broadcast('refreshSelectedAccount', {});
                }
            });

            $scope.validateText1 = function ($event) {

                var pattern = '^[a-zA-Z0-9 \b]*$';
                var pRegex = new RegExp(pattern);

                var key = String.fromCharCode(!$event.charCode ? $event.which : $event.charCode);
                if (!pRegex.test(key)) {
                    $event.preventDefault();
                    return false;
                }
            };
            /***********
             * confirm waiver end
             ***********/

            /***********
             * clipboard start
             ***********/
            $scope.initCopyToClipboard = function (el) {

                var id = 'wc-' + el.ticketNumber + el.waiverFavorId;
                var element = document.getElementById(id);

                if (document.body.createTextRange) { // ie

                    $('.copied').removeClass('copied');
                    $(element).addClass("copied");
                    window.clipboardData.setData('Text', element.innerHTML);
                }
                else if (window.getSelection) { // moz, opera, webkit

                    var selection = window.getSelection();
                    var range = document.createRange();
                    range.selectNodeContents(element);
                    selection.removeAllRanges();
                    selection.addRange(range);
                    document.execCommand("Copy");
                }
                document.body.onclick = function (e) {

                    if ($(e.target.previousElementSibling).attr("id") === id) {
                        return;
                    }
                    $(element).removeClass("copied");
                };
            };
            /***********
             * clipboard end
             ***********/

            /***********
             * email start
             ***********/
            $scope.popup = {
                sendMeEmail: false,
                sendOtherEmail: false,
                otherEmailAddr: '',
                isInvalidEmail: false
            };
            $scope.dismissWaiver = function () {

                if ($scope.popup.sendMeEmail) {

                    var referenceNumber = $scope.data.transactionEntity.referenceNumber;
                    var otherEmail = '';

                    $rootScope.mainSpinner = true;
                    PNRService.sendConfirmationEmail(
                      referenceNumber,
                      otherEmail,
                      $scope.popup.sendMeEmail,
                      $scope.popup.sendOtherEmail,
                      $scope.data.PNR
                    ).then(function () {

                        $rootScope.mainSpinner = false;
                        $scope.successModal.modal('hide');
                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $scope.successModal.modal('hide');
                    });
                }
                else {
                    $scope.successModal.modal('hide');
                }
            };
            /***********
             * email end
             ***********/

            $scope.successModal.on('hidden.bs.modal', function (e) {
                // $state.go($state.current.parent + '-home', {feature: 'init'});
                //20180613 reload to clear old value
                $state.go($state.current.parent + '-home', {
                    feature: 'init'
                }, {
                    reload: true
                });
            });
            $scope.goHome = function () {

                $rootScope.$broadcast('goHome', { needConfirm: true });
            };
        }

    }) ();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('seatAssignmentController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', '$window', '$document',
            'PNRService', 'AccountService', 'AmenityService', 'util'];

        function controller($rootScope, $scope, $state, $window, $document,
                            PNRService, AccountService, AmenityService, util) {

            // 2021-04-20. Story 485552. Suraphol
            $rootScope.btnStatus = false;

            $scope.exitSeatDesc = '{!JSENCODE($Label.Sip_Info_Seat_Assignment_Exit_Row_Selected_Desc_02_01)}' + '{!JSENCODE($Label.Sip_Info_Seat_Assignment_Exit_Row_Selected_Desc_02_02)}';

            //20190516 rwern REQ-0592 ManageSeatDirect
            $scope.errorTooltip = 0;
            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: $scope.data.jetStreamComments,
                remark: $rootScope.currentUser.isInternalUser ? '{!JSENCODE($Label.Sip_Eplus_Remark)}' : '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: 'SIP_Economy_Plus__c'
            };

            $scope.data.pascharge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: '{!$Label.Premier_Access_c}'
            };

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;

                switch ($scope.data.widgetFeature) {
                    case 'apply-eplus':
                        $scope.data.charge.chargeAmount = '';
                        AccountService.isInAmexFamily($rootScope.currentUser.accId).then(function (value) {

                            $scope.isAmexUser = value;
                        }, function (err) {

                            console.debug(err);
                        });
                        break;
                    case 'confirm-eplus':
                        $scope.data.charge.chargeAmount = $scope.data.cart ? $scope.data.cart.total : 0;
                        AccountService.isInAmexFamily($rootScope.currentUser.accId).then(function (value) {

                            $scope.isAmexUser = value;
                        }, function (err) {

                            console.debug(err);
                        });
                        break;
                    //18-11-2021 Apply Suyash Start -  Premier access - 7095
                    case 'confirm-premier-access':
                        $scope.data.pascharge.chargeAmount = $scope.data.cart ? $scope.data.cart.total : 0;
                        //$scope.data.charge.amenityType = 'Premier_Access__c';                 
                        $scope.data.charge.remark = '';//Need to populate if needed
                        //$scope.data.charge.comment = $scope.data.jetStreamComments;
                        AccountService.isInAmexFamily($rootScope.currentUser.accId).then(function (value) {

                            $scope.isAmexUser = value;
                        }, function (err) {

                            console.debug(err);
                        });
                        break;
                }
            });

            /***********
             * cart start
             ***********/
            $scope.changeSelectedSeat = function (segmentIndex, legIndex, travelerIndex, isToApplyPage) {
                $scope.data.cart.showCart = false;

                var isReloaded = false;
                if ($scope.data.selection.selectedSegmentIndex !== segmentIndex) {
                    $scope.data.selection.selectedSegmentIndex = segmentIndex;
                    $scope.data.selection.currentAirSegment = $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[$scope.data.selection.selectedSegmentIndex];

                    $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.previousSelectedFlightSegment = null;
                    $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.selectedFlightSegment = $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[$scope.data.selection.selectedSegmentIndex];

                    if (!isToApplyPage) {
                        isReloaded = true;
                        $scope.getSeatMap(legIndex, travelerIndex);
                    }
                }
                else {
                    $scope.data.selection.currentSegmentSeatMap = $scope.data.selection.segmentSeatMaps[$scope.data.selection.selectedLegIndex];
                    $scope.data.selection.selectedTravelerIndex = travelerIndex;
                }

                $scope.showCart = false;

                if (isToApplyPage) {
                    $state.go($state.current.parent + '-seat-assignment', {
                        feature: 'apply-eplus'
                    }).then(function () {
                        if (!isReloaded) {
                            $scope.getSeatMap(legIndex, travelerIndex);
                        }
                    });
                }
            };

            $document.on('scroll', function () {

                var eplus = $('#apply-eplus');
                var cart = $('#eplus-cart');

                if (eplus !== undefined && cart !== undefined &&
                  eplus.length > 0 && cart.length > 0) {
                    var y = $(eplus).position().top;
                    var top = 0;


                    // 2019-10-9 kevin add 70 in logic for subheader height
                    if (($window.scrollY || (document.documentElement.scrollTop - 70)) > y) {
                        top = ($window.scrollY || document.documentElement.scrollTop) - y - 70;
                    }

                    if (($window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) > 768) {
                        top = top - 60;
                    }

                    if (top < 0) {
                        top = 0;
                    }

                    $(cart).css('top', top + 'px');
                    if (top > 0) {
                        $(cart).css('z-index', '2');
                        $(cart).addClass('mdl-shadow--4dp');
                    }
                    else {
                        $(cart).css('z-index', '1');
                        $(cart).removeClass('mdl-shadow--4dp');
                    }
                }
                //05-11-2021 Apply Suyash Start -  Premier access - 7095
                var applyPremerAccess = $('#apply-premieraccess');
                var premierAccessCart = $('#premier-access-cart');

                if (applyPremerAccess !== undefined && premierAccessCart !== undefined &&
                applyPremerAccess.length > 0 && premierAccessCart.length > 0) {
                    var y = $(applyPremerAccess).position().top;
                    var top = 0;


                    // 2019-10-9 kevin add 70 in logic for subheader height
                    if (($window.scrollY || (document.documentElement.scrollTop - 70)) > y) {
                        top = ($window.scrollY || document.documentElement.scrollTop) - y - 70;
                    }

                    if (($window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) > 768) {
                        top = top - 60;
                    }

                    if (top < 0) {
                        top = 0;
                    }

                    $(premierAccessCart).css('top', top + 'px');
                    if (top > 0) {
                        $(premierAccessCart).css('z-index', '2');
                        $(premierAccessCart).addClass('mdl-shadow--4dp');
                    }
                    else {
                        $(premierAccessCart).css('z-index', '1');
                        $(premierAccessCart).removeClass('mdl-shadow--4dp');
                    }
                }

                //05-11-2021  Suyash Start -  Premier access - 7095
            });
            /***********
             * cart start
             ***********/

            /*********** Apply EPlus Start ***********/

            /***********
             * segment start
             ***********/
            $scope.$watch('data.selection.selectedLegIndex', function (newValue, oldValue, scope) {

                $scope.checkAvailability();
            }, true);
            $scope.$watch('data.selection.selectedTravelerIndex', function (newValue, oldValue, scope) {

                $scope.checkAvailability();
            }, true);
            $scope.checkAvailability = function () {

                // default as false
                if ($scope.data.selection) {
                        // TFS - 473690 - 03-02-2021 - Fix for privilege banner showing when it should not - John Sanders
                        $scope.data.selection.privilegeText = '';

                    $scope.data.selection.selectable = false;
                    $scope.data.selection.restricted = false;

                    if ($scope.data.selection.selectedSegmentIndex > -1 &&
                      $scope.data.selection.selectedLegIndex > -1 &&
                      $scope.data.selection.selectedTravelerIndex > -1 &&
                      $scope.data.selection.segmentSeatMaps &&
                      $scope.data.selection.currentSegmentSeatMap) {

                        // 1. Check selected leg accessibility
                        if (!$scope.data.selection.currentSegmentSeatMap.IsSeatMapDisabled) {

                            // 20170217 Ryan; Upper cabin validation
                            // When <Booking Class Cabin> not equal to "Y" and # of cabins>1, user shouldn't be able to interact with the map.
                            // Passengers may or may not have a seat. Irrespective of the seats, you still make it non-interactable.
                            // DF-00670
                            if ($scope.data.selection.currentAirSegment.BookingClassCabin !== 'Y' &&
                              $scope.data.selection.currentSegmentSeatMap.Cabins.length > 1) {

                                $scope.data.selection.currentSegmentSeatMap.IsSeatMapDisabled = true;
                                $scope.data.selection.currentSegmentSeatMap.SeatMapDisabledType = 4;
                                return;
                            }
                            else {
                                $scope.data.selection.currentSegmentSeatMap.IsSeatMapDisabled = false;
                                $scope.data.selection.currentSegmentSeatMap.SeatMapDisabledType = -1;
                            }

                            // 2. Check passenger restriction, check in status, etc
                            for (var i = 0; i < $scope.data.selection.segmentSeatMaps.length; i++) {

                                for (var j = 0; j < $scope.data.selection.segmentSeatMaps[i].Travelers.length; j++) {

                                    var traveler = $scope.data.selection.segmentSeatMaps[i].Travelers[j];
                                    var sTraveler = $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusTraveler[j];

                                    if (i === $scope.data.selection.selectedLegIndex) {

                                        // is checkin
                                        _.forEach(sTraveler.TravelerSegments, function (s) {

                                            if (s.SegmentNumber === $scope.data.selection.currentAirSegment.SegmentNumber) {

                                                traveler.IsCheckedIn = !s.AllowToSelectSeatSegmentLevel;
                                                return false;
                                            }
                                        });

                                        // is ssmf
                                        _.forEach($scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusTraveler, function (et, etIndex) {

                                            if (etIndex !== j) {

                                                if (et.PNRNameNumber === sTraveler.PNRNameNumber) {
                                                    traveler.IsSSMF = true;
                                                    return false;
                                                }
                                            }
                                        });

                                        // is restricted / not select on previous leg
                                        if (i === 0) {
                                            traveler.IsRestricted = false;
                                        }
                                        else {
                                            var prevSegmentTraveler = $scope.data.selection.segmentSeatMaps[i - 1].Travelers[j];
                                            traveler.IsRestricted = !(prevSegmentTraveler.SelectedSeat &&
                                              prevSegmentTraveler.SelectedSeat.SeatNumber &&
                                              prevSegmentTraveler.SelectedSeat.SeatNumber.length > 0);
                                        }
                                    }
                                }
                            }

                            // 2.2 Current selected passenger status / message
                            var currTraveler = $scope.data.selection.currentSegmentSeatMap.Travelers[$scope.data.selection.selectedTravelerIndex];
                            $scope.data.selection.restricted = currTraveler.IsRestricted;
                            $scope.data.selection.seatExpired = currTraveler.SelectedSeat && currTraveler.SelectedSeat.IsSeatExpired;
                            $scope.data.selection.isCheckedIn = currTraveler.IsCheckedIn;
                            $scope.data.selection.isSSMF = currTraveler.IsSSMF;

                            // 2.3 Current selected passenger privilege info
                            var segmentSeatMap = $scope.data.selection.segmentSeatMaps[$scope.data.selection.selectedLegIndex];
                            var isBundle = $scope.getIsBundle(segmentSeatMap);
                            //var companionCount = $scope.getCompanionCount(segmentSeatMap);

                            // TFS - 473690 - 03-02-2021 - Commented out code to Fix privilege banner showing when it should not - John Sanders
                            // $scope.data.selection.privilegeText = '';
                            //20170612 Passenger must have tier level in entailment
                            if (currTraveler.tierlevelSeatMap && currTraveler.hasPrivilege) {
                                $scope.data.selection.privilegeText = currTraveler.tierlevelSeatMap;
                            }
                            if (currTraveler.IsEPlusSubscriber) {
                                if ($scope.data.selection.privilegeText) {
                                    $scope.data.selection.privilegeText += ' | ';
                                }
                                // $scope.data.selection.privilegeText += '{!JSENCODE($Label.Sip_EP_EPlusSubscriber)}';
                                //20170613 subscription with region info
                                $scope.data.selection.privilegeText += currTraveler.subscriptionSeatMap;
                            }
                            if (isBundle) {
                                if ($scope.data.selection.privilegeText) {
                                    $scope.data.selection.privilegeText += ' | ';
                                }
                                $scope.data.selection.privilegeText += '{!JSENCODE($Label.Sip_EP_IsBundle)}';
                            }
                            if (currTraveler.IsOTP) {
                                if ($scope.data.selection.privilegeText) {
                                    $scope.data.selection.privilegeText += ' | ';
                                }
                                $scope.data.selection.privilegeText += '{!JSENCODE($Label.Sip_EP_IsOTP)}';
                            }

                                // 2020-11-01. Story 472403. Suraphol.
                                if (currTraveler.hasFareRelatedEntitlements) {
                                    if ($scope.data.selection.privilegeText) {
                                        $scope.data.selection.privilegeText += ' | ';
                                    }
                                    $scope.data.selection.privilegeText += '{!JSENCODE($Label.Sip_EP_Has_Fare_Related_Entitlements)}';
                                }

                            if (currTraveler.CompanionCount > 0) {
                                if ($scope.data.selection.privilegeText) {
                                    $scope.data.selection.privilegeText += ' | ';
                                }
                                var companionText = '{!JSENCODE($Label.Sip_EP_CompanionCount)}';
                                companionText = companionText.replace('{0}', currTraveler.CompanionCount);
                                $scope.data.selection.privilegeText += companionText;
                            }

                            $scope.data.selection.selectable = !$scope.data.selection.restricted && !$scope.data.selection.isCheckedIn && !$scope.data.selection.isSSMF;
                        }

                        // 3. Check accessibility
                        //var isBundle = $scope.getIsBundle($scope.data.selection.currentSegmentSeatMap);
                        var companionCount = $scope.getCompanionCount($scope.data.selection.currentSegmentSeatMap);

                        // 3.1 Check each seat accessibility
                        var traveler = $scope.data.selection.currentSegmentSeatMap.Travelers[$scope.data.selection.selectedTravelerIndex];
                        //var nameIndex = traveler.TravelerNameIndex;
                        var id = traveler.ID;

                        $scope.data.selection.isOTPInaccessible = false;
                        _.forEach($scope.data.selection.currentSegmentSeatMap.Cabins, function (cabin) {

                            if (!cabin.IsUpperCabin) {
                                _.forEach(cabin.HorizontalPlaneGroups, function (group) {

                                    _.forEach(group.HorizontalPlaneRows, function (row) {

                                        _.forEach(row.Seats, function (seat) {

                                            seat.IsAccessible = true;
                                            seat.SeatPhraseology = '';
                                            if (seat.IsAvailable) {

                                                if (seat.IsAccessible) {
                                                    _.forEach(seat.BlankFareList, function (b) {

                                                        if (b.Name === id) {
                                                            seat.IsAccessible = seat.IsAccessible && b.Amount !== -1;
                                                            if (!seat.IsAccessible) {

                                                                var type = _.lowerCase(b.Type);

                                                                if (type.indexOf('elf') !== -1) {
                                                                    seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_ELF_Seat)}';
                                                                }
                                                                else if (type.indexOf('ssr') !== -1) {
                                                                    seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_SSR_Seat)}';
                                                                }
                                                                else {
                                                                    seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_Perm_Block_Seat)}';
                                                                }
                                                            }
                                                            else {
                                                                seat.SeatPhraseology = '';
                                                            }
                                                        }
                                                    });
                                                }

                                                // Ryan 20170302
                                                // fallback to check service fund for seat accessibility
                                                if (seat.IsAccessible) {

                                                    _.forEach(seat.ServiceFundList, function (s) {

                                                        if (s.Name === id) {
                                                            seat.IsAccessible = seat.IsAccessible && s.Amount !== -1;
                                                            if (!seat.IsAccessible) {

                                                                var type = _.lowerCase(s.Type);

                                                                if (type.indexOf('elf') !== -1) {
                                                                    seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_ELF_Seat)}';
                                                                }
                                                                else if (type.indexOf('ssr') !== -1) {
                                                                    seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_SSR_Seat)}';
                                                                }
                                                                else {
                                                                    seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_Perm_Block_Seat)}';
                                                                }
                                                            }
                                                            else {
                                                                seat.SeatPhraseology = '';
                                                            }
                                                        }
                                                    });
                                                }

                                                // if (seat.IsAccessible) {
                                                //   _.forEach(seat.ServiceFundList, function (sf) {
                                                //
                                                //     if (sf.Name == id) {
                                                //       seat.IsAccessible = seat.IsAccessible && sf.Amount !== -1; // -1: ssr
                                                //       if (!seat.IsAccessible) {
                                                //         seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_SSR_Seat)}';
                                                //       }
                                                //       else {
                                                //         seat.SeatPhraseology = '';
                                                //       }
                                                //     }
                                                //   });
                                                // }
                                                    // 2020-09-09. Story 472403. Suraphol.
//console.log('#################################################################');
//console.log('=========== checking OTP: seat');
//console.log(seat);
//console.log('=========== checking OTP: companionCount');
//console.log(companionCount);
//console.log('=========== checking OTP: traveler');
//console.log(traveler);

                                                    if (seat.IsAccessible && traveler.IsOTP && traveler.hasOTPPurchasedOutsideJetstream && companionCount === 0) {
                                                    var travelerOTPAmount = traveler.CSLSelectedSeat.OTPSeatPrice;
//console.log('=========== checking OTP: travelerOTPAmount');
//console.log(travelerOTPAmount);
                                                    var seatOTPAmount = null;
                                                    _.forEach(seat.USDList, function (price) {
//console.log('######## checking OTP: price.Name and id');
//console.log(price.Name);
//console.log(id);


                                                        if (price.Name === id) {
//console.log('######## >>>>>>>>>>>> checking OTP: price.Name === id is true, setting seatOTPAmount ');
//console.log(seat.Identifier);
                                                            seatOTPAmount = price.Amount;
//console.log('######## >>>>>>>>>>>> checking OTP: new seatOTPAmount ');
//console.log(seatOTPAmount);
                                                        }
                                                    });

//console.log('=========== checking OTP: seatOTPAmount');
//console.log(seatOTPAmount);

                                                    if (travelerOTPAmount) {
                                                        if (seatOTPAmount) {
                                                            // OTP, only accessible if seatOTOAmount <= travelerOTPAmount
                                                            seat.IsAccessible = (seatOTPAmount ? seatOTPAmount : 0) <= travelerOTPAmount;
//console.log('>>>> checking OTP: after setting seat.IsAccessible');
//console.log(seat.IsAccessible);
                                                            if (!seat.IsAccessible) {
                                                                $scope.data.selection.isOTPInaccessible = true;
                                                            }
                                                        }
                                                    }
                                                }

                                                // if (!(traveler.IsBundle || traveler.IsEPlusSubscriber || traveler.hasPrivilege ||
                                                //   (traveler.IsOTP && companionCount > 0))) {
                                                //
                                                //   var seatOTPAmount = null;
                                                //   _.forEach(seat.USDList, function (price) {
                                                //
                                                //     if (price.Name == id) {
                                                //       seatOTPAmount = price.Amount;
                                                //     }
                                                //   });
                                                //
                                                //   if (travelerOTPAmount) {
                                                //     if (seatOTPAmount) {
                                                //       // OTP, only accessible if seatOTOAmount <= travelerOTPAmount
                                                //       seat.IsAccessible = (seatOTPAmount ? seatOTPAmount : 0) <= travelerOTPAmount;
                                                //       if (!seat.IsAccessible) {
                                                //         $scope.data.selection.isOTPInaccessible = true;
                                                //       }
                                                //     }
                                                //   }
                                                //   else {
                                                //
                                                //     _.forEach(seat.ELFFareList, function (elf) {
                                                //
                                                //       if (elf.Name == id) {
                                                //         seat.IsAccessible = seat.IsAccessible && elf.Amount !== -1; // -1: elf;
                                                //         if (!seat.IsAccessible) {
                                                //           seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_ELF_Seat)}';
                                                //         }
                                                //         else {
                                                //           seat.SeatPhraseology = '';
                                                //         }
                                                //       }
                                                //     });
                                                //
                                                //     _.forEach(seat.ServiceFundList, function (sf) {
                                                //
                                                //       if (sf.Name == id) {
                                                //         seat.IsAccessible = seat.IsAccessible && sf.Amount !== -1; // -1: ssr
                                                //         if (!seat.IsAccessible) {
                                                //           seat.SeatPhraseology = '{!JSENCODE($Label.Sip_Info_SSR_Seat)}';
                                                //         }
                                                //         else {
                                                //           seat.SeatPhraseology = '';
                                                //         }
                                                //       }
                                                //     });
                                                //   }
                                                // }
                                            }
                                        });
                                    });
                                });
                            }
                        });

                        // check enable reset
                        $scope.data.selection.isAllowReset = false;
                        _.forEach($scope.data.selection.currentSegmentSeatMap.Travelers, function (t) {

                            if (t.SelectedSeat) {
                                if (!t.CSLSelectedSeat) {
                                    $scope.data.selection.isAllowReset = true;
                                    return false;
                                }
                                else if (t.SelectedSeat.SeatNumber !== t.CSLSelectedSeat.SeatNumber) {
                                    $scope.data.selection.isAllowReset = true;
                                    return false;
                                }
                            }
                        });
                    }
                }
            };
            $scope.selectTraveler = function (index) {

                if (!$scope.data.selection.currentSegmentSeatMap.IsSeatMapDisabled) {
                    $scope.data.selection.selectedTravelerIndex = index;
                }
            };
            $scope.selectLeg = function (index) {

                $scope.data.selection.currentSegmentSeatMap = $scope.data.selection.segmentSeatMaps[index];
                $scope.data.selection.selectedLegIndex = index;
                $scope.data.selection.selectedTravelerIndex = 0;
                $scope.syncSeatMapSegment(index);
            };
            $scope.selectSegment = function (index, isDisabled, callback) {
                // TFS - 480416 - 03/04/2021 - Commented out code/Fix for Confirm Button - John Sanders
                // $scope.secondSelectSeat = '';
                // $scope.lastLegSeatsNum = '';
                $scope.selectedSeatArray = [];

                if (isDisabled) {
                    return;
                }

                if ($scope.data.selection.selectedSegmentIndex !== -1) {
                    $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.previousSelectedFlightSegment = $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[$scope.data.selection.selectedSegmentIndex];
                }
                else {
                    $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.previousSelectedFlightSegment = null;
                }

                $scope.data.selection.selectedSegmentIndex = ($scope.data.selection.selectedSegmentIndex === index ? -1 : index);

                if ($scope.data.selection.selectedSegmentIndex !== -1) {
                    $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.selectedFlightSegment = $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[$scope.data.selection.selectedSegmentIndex];

                    $scope.data.selection.currentAirSegment = $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.EPlusSegment[$scope.data.selection.selectedSegmentIndex];
                }
                else {
                    $scope.data.PNR.PNRDetail.EPlusTravelerAndSegment.selectedFlightSegment = null;
                    $scope.data.selection.currentAirSegment = null;
                }

                $scope.data.selection.selectedLegIndex = -1;
                $scope.data.selection.selectedTravelerIndex = -1;

                if ($scope.data.selection.segmentSeatMaps) {

                    var prevTravelers = [];
                    _.forEach($scope.data.selection.segmentSeatMaps, function (ssm) {

                        _.forEach(ssm.Travelers, function (t) {

                            prevTravelers.push(t);
                        });
                    });

                    $rootScope.mainSpinner = true;
                    PNRService.saveSelectedSeatsInfo($scope.data.PNR, prevTravelers, $rootScope.currentUser.id).then(function () {

                        $rootScope.mainSpinner = false;
                        $scope.getSeatMap(0, 0);

                        if (callback) {
                            callback();
                        }
                    }, function (err) {

                        $rootScope.mainSpinner = false;
                        console.log(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                          });
                    });
                }
                else {
                    $scope.getSeatMap(0, 0);
                }
            };
            $scope.getSeatMap = function (targetLegIndex, targetTravelerIndex) {

                $scope.data.selection.segmentSeatMaps = [];
                $scope.data.selection.currentSegmentSeatMap = null;

                if ($scope.data.selection.selectedSegmentIndex !== -1) {

                    $rootScope.mainSpinner = true;

                    PNRService.generateSeatMapViewModelForEPlus($scope.data.PNR, 0, $rootScope.currentUser.id).then(function (value) {

                        $rootScope.mainSpinner = false;

                        if (value && value.seatMaps && value.seatMaps.length > 0) {

                            $rootScope.mainSpinner = true;

                            $scope.data.selection.segmentSeatMaps = value.seatMaps;
                            if ($scope.data.selection.segmentSeatMaps.length > 0) {
                                $scope.data.selection.currentSegmentSeatMap = $scope.data.selection.segmentSeatMaps[targetLegIndex];
                            }
                            else {
                                $scope.data.selection.currentSegmentSeatMap = null;
                            }

                            var memory = {
                                'segmentIndex': $scope.data.selection.selectedSegmentIndex,
                                'seatMaps': $scope.data.selection.segmentSeatMaps
                            };

                            var isNewRetrieve = true;
                            _.forEach($scope.data.seatMapMemories, function (m, mIndex) {

                                if (m.segmentIndex === memory.segmentIndex) {
                                    $scope.data.seatMapMemories[mIndex] = memory;
                                    isNewRetrieve = false;
                                    return false;
                                }
                            });

                            if (isNewRetrieve) {
                                $scope.data.seatMapMemories.push(memory);
                            }

                            $scope.syncSeatMapSegment(targetLegIndex);
                            $scope.data.selection.selectedLegIndex = targetLegIndex;
                            $scope.data.selection.selectedTravelerIndex = targetTravelerIndex;
                            $scope.syncCart(targetLegIndex);
                            $scope.handleConfirmButton();
                            $rootScope.mainSpinner = false;
                        }
                        else {
                            $scope.data.selection.selectedSegmentIndex = -1;
                            $scope.data.selection.selectedLegIndex = -1;
                            $scope.data.selection.selectedTravelerIndex = -1;
                            $scope.syncCart(targetLegIndex);
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_No_Seat_Map_Response)}'
                              });
                        }
                    }, function (err) {
                        $scope.data.selection.selectedSegmentIndex = -1;
                        $scope.data.selection.selectedLegIndex = -1;
                        $scope.data.selection.selectedTravelerIndex = -1;
                        $scope.syncCart(targetLegIndex);
                        console.log(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_No_Seat_Map_Response)}'
                          });
                    });
                }
            };

            $scope.syncCart = function (legIndex) {

                if (legIndex === undefined) return;
                // sync cart with segment seat map response

                // 1) Remove current segment item from cart; will repopulate again later
                // 03_23_2021 - Fix for multiple legs with preselected seats not adding to cart fully/Commented out code - John Sanders
                _.remove($scope.data.cart.items, function (n) {
                    return (n.SegmentIndex === $scope.data.selection.selectedSegmentIndex);
                });
                _.remove($scope.data.cart.dummyItems, function (n) {
                    return (n.SegmentIndex === $scope.data.selection.selectedSegmentIndex);
                });
                // _.remove($scope.data.cart.items, function (n) {
                //     return (n.SegmentIndex === $scope.data.selection.selectedSegmentIndex && n.LegIndex === legIndex);
                // });
                // _.remove($scope.data.cart.dummyItems, function (n) {
                //     return (n.SegmentIndex === $scope.data.selection.selectedSegmentIndex && n.LegIndex === legIndex);
                // });
                $scope.data.cart.total = _.sumBy($scope.data.cart.items, 'CurrentSeatAmount');

                if (legIndex === $scope.data.selection.selectedLegIndex) {

                    // 2) Go through travelers of each segment's seat map and repopulate cart item
                    _.forEach($scope.data.selection.segmentSeatMaps, function (ssm, lIndex) {

                        var items = [];
                        var showItemInCart = false;
                        var dummyItems = [];
                        var showItemInDummyCart = false;

                        _.forEach(ssm.Travelers, function (t, tIndex) {

                            var stopIndex = ssm.StopIndex;
                            var departureDate = ssm.DepartureDateInPNR;
                            var departureTime = ssm.DepartureTimeInPNR;
                            var flightNumber = ssm.FlightNumberInPNR;

                            var memory = null;
                            _.forEach($scope.data.seatMapMemories, function (m) {

                                if (m.segmentIndex === $scope.data.selection.selectedSegmentIndex) {
                                    memory = m;
                                    return false;
                                }
                            });
                            var cartItem = {
                                'FlightNumber': flightNumber,
                                'CarrierCode': $scope.data.selection.currentAirSegment.FirstMarketedFlightSegment.MarketingCarrierCode,// 2021-10-12. Story 7093 - Updated Spelling Mistake. Suyash C -  Premier access - 7095.
                                'SegmentIndex': $scope.data.selection.selectedSegmentIndex,
                                'SegmentNumber': $scope.data.selection.currentAirSegment.SegmentNumber,
                                'LegIndex': lIndex,
                                'StopIndex': stopIndex,
                                'TravelerIndex': tIndex,
                                'GivenName': t.GivenName,
                                'Surname': t.Surname,
                                'TravelerNameIndex': t.TravelerNameIndex,
                                'Description': 'Economy Seat Assignment',
                                'Origin': ssm.Origin, //20170825 changed to Origin of seat map
                                'Destination': ssm.Destination, //20170825 changed to destination of seat map
                                'DepartureDate': departureDate,
                                'DepartureTime': departureTime,
                                'CurrentSeatNumber': t.SelectedSeat && t.SelectedSeat.SeatNumber ? t.SelectedSeat.SeatNumber : '',
                                'CurrentSeatAmount': t.SelectedSeat && t.SelectedSeat.SeatPrice ? t.SelectedSeat.SeatPrice : 0,
                                'CurrentSeatCost': t.SelectedSeat && t.SelectedSeat.SeatPrice ? t.SelectedSeat.SeatPrice : 0,
                                'CSLSeatNumber': t.CSLSelectedSeat && t.CSLSelectedSeat.SeatNumber ? t.CSLSelectedSeat.SeatNumber : '',
                                'CSLSeatCost': t.CSLSelectedSeat && t.CSLSelectedSeat.SeatPrice ? t.CSLSelectedSeat.SeatPrice : 0,
                                'CSLSeatAmount': t.CSLSelectedSeat && t.CSLSelectedSeat.SeatPrice ? t.CSLSelectedSeat.SeatPrice : 0,

                                    // 2020-09-09. Story 466263. Suraphol.
                                    'CurrentSeatRFISC': t.SelectedSeat && t.SelectedSeat.RFISC ? t.SelectedSeat.RFISC : '',
                                    'CurrentSeatRFISCCost': t.SelectedSeat && t.SelectedSeat.RFISCCost ? t.SelectedSeat.RFISCCost : '',
                                    'CurrentSeatRFISCCostCurrency': t.SelectedSeat && t.SelectedSeat.RFISCCostCurrency ? t.SelectedSeat.RFISCCostCurrency : '',
                                    'CSLSeatRFISC': t.CSLSelectedSeat && t.CSLSelectedSeat.RFISC ? t.CSLSelectedSeat.RFISC : '',
                                    'CSLSeatRFISCCost': t.CSLSelectedSeat && t.CSLSelectedSeat.RFISCCost ? t.CSLSelectedSeat.RFISCCost : '',
                                    'CSLSeatRFISCCostCurrency': t.CSLSelectedSeat && t.CSLSelectedSeat.RFISCCostCurrency ? t.CSLSelectedSeat.RFISCCostCurrency : '',

                                'IsInternational': $scope.data.selection.currentAirSegment.IsInternational,
                                // 'DepartureDateGMT': $scope.data.selection.currentAirSegment.DepartureDateGMT,
                                // 'DepartureTimeGMT': $scope.data.selection.currentAirSegment.DepartureTimeGMT,
                                //20171010 use departure date & time from flight leg in COG
                                'DepartureDateGMT': ssm.DepartureDateGMTInPNR === undefined ? $scope.data.selection.currentAirSegment.DepartureDateGMT : ssm.DepartureDateGMTInPNR,
                                'DepartureTimeGMT': ssm.DepartureTimeGMTInPNR === undefined ? $scope.data.selection.currentAirSegment.DepartureTimeGMT : ssm.DepartureTimeGMTInPNR,
                                'BookingClass': $scope.data.selection.currentAirSegment.BookingClass,
                                'CSLSeatCharacteristicCode': '',
                                'DepartureAirport': $scope.data.selection.currentAirSegment.DepartureAirport,
                                'ArrivalAirport': $scope.data.selection.currentAirSegment.ArrivalAirport,
                                'IsCoGSegment': memory !== null ? (memory.seatMaps.length > 1 ? true : false) : false
                            };

                            if (t.SelectedSeat && t.SelectedSeat.Characteristics) {
                                _.forEach(t.SelectedSeat.Characteristics, function (item) {
                                    if (item.Code && item.Code === 'DisplaySeatType') {
                                        cartItem.CurrentSeatType = item.Value;
                                        cartItem.CurrentSeatCharacteristicCode = item.Code;
                                    }
                                });
                            }
                            if (t.SelectedSeat && t.SelectedSeat.Characteristics) {
                                _.forEach(t.SelectedSeat.Characteristics, function (item) {
                                    //Shan Feb 17 Need to know eliteseat and then determine Favor Code for seat Assignment
                                    if (item.Code && item.Code === 'IsEliteZoneSeat') {
                                        cartItem.CurrentSeatIsEliteZoneSeat = true;
                                    }
                                });
                            }
                            if (t.SelectedSeat && t.SelectedSeat.Characteristics) {
                                _.forEach(t.SelectedSeat.Characteristics, function (item) {
                                    //Shan Feb 17 Need to know preferred seat and then determine Favor Code for seat Assignment
                                    if (item.Code && item.Code === 'IsPreferredSeat') {
                                        cartItem.CurrentSeatIsPreferredSeat = true;
                                    }
                                });
                            }

                            if (t.CSLSelectedSeat && t.CSLSelectedSeat.Characteristics) {
                                _.forEach(t.CSLSelectedSeat.Characteristics, function (item) {
                                    if (item.Code && item.Code === 'DisplaySeatType') {
                                        cartItem.CSLSeatType = item.Value;
                                        cartItem.CSLSeatCharacteristicCode = item.Code;
                                    }
                                    //Shan Feb 17 Need to know elite or preferred seat and then determine Favor Code for seat Assignment
                                    else if (item.Code && item.Code === 'IsEliteZoneSeat' && item.value && item.value ===
                                      'True') {
                                        cartItem.CSLSeatIsEliteZoneSeat = true;
                                    } else if (item.Code && item.Code === 'IsPreferredSeat' && item.value && item.value ===
                                      'True') {
                                        cartItem.CSLIsPreferredSeat = true;
                                    }
                                });
                            }

                                /***********
                                EMD Updates START - John Sanders
                                ***********/
                                // 2021-02-15 - Phase 1 EMD Updates - John Sanders

                                // dummyItems.push(cartItem);

                                if (cartItem.CurrentSeatNumber !== cartItem.CSLSeatNumber) {
                                    // 03_23_2021 - Fix for multiple legs with preselected seats not adding to cart fully/Commented out code - John Sanders
                                    // if (legIndex === lIndex) {
                                        dummyItems.push(cartItem);
                                        showItemInDummyCart = true;
                                    // }
                                } else if (cartItem.CurrentSeatNumber && !t.IsEPlusSubscriber && !t.IsBundle && !t.IsOTP && !t.hasPrivilege
                                    && !t.hasFareRelatedEntitlements && t.SelectedSeat.IsEPlus) {
                                    var emdArray = $scope.getExistingSeatEMDValues(t.SelectedSeat.SeatNumber, lIndex);
                                    if (emdArray) {
                                        cartItem.CurrentSeatRFISC = emdArray[0];
                                        cartItem.CurrentSeatRFISCCostCurrency = emdArray[1];
                                        cartItem.CurrentSeatRFISCCost = emdArray[2];
                                    }
                                    // 03_23_2021 - Fix for multiple legs with preselected seats not adding to cart fully/Commented out code - John Sanders
                                    // if (legIndex === lIndex) {
                                        dummyItems.push(cartItem);
                                        showItemInDummyCart = true;
                                    // }
                                }

                                // if (cartItem.CurrentSeatNumber !== cartItem.CSLSeatNumber) {
                                //     showItemInDummyCart = true;
                                // }

                                if (cartItem.CurrentSeatNumber !== cartItem.CSLSeatNumber) {
                                    // 03_23_2021 - Fix for multiple legs with preselected seats not adding to cart fully/Commented out code - John Sanders
                                    // if (legIndex === lIndex) {
                                        items.push(cartItem);
                                        showItemInCart = true;
                                    // }
                                } else if (cartItem.CurrentSeatNumber && !t.IsEPlusSubscriber && !t.IsBundle && !t.IsOTP && !t.hasPrivilege
                                    && !t.hasFareRelatedEntitlements && t.SelectedSeat.IsEPlus) {
                                    // 03_23_2021 - Fix for multiple legs with preselected seats not adding to cart fully/Commented out code - John Sanders
                                    // if (legIndex === lIndex) {
                                        items.push(cartItem);
                                        showItemInCart = true;
                                    // }
                                }

                                // if(cartItem.CurrentSeatNumber !== cartItem.CSLSeatNumber) {
                                //     if (legIndex === lIndex) {
                                //         items.push(cartItem);
                                //         showItemInCart = true;
                                //     }
                                // }
                        });

                        if (showItemInCart && items.length > 0) {
                            $scope.data.cart.items = $scope.data.cart.items.concat(items);
                        }

                    if (showItemInDummyCart && dummyItems.length > 0) {
                        $scope.data.cart.dummyItems = $scope.data.cart.dummyItems.concat(dummyItems);
                    }
                  });
                }

                $scope.processPricing($scope.data.selection.selectedSegmentIndex, legIndex);

                $scope.data.cart.items = _.orderBy($scope.data.cart.items, ['SegmentIndex', 'LegIndex', 'TravelerIndex'], ['asc', 'asc', 'asc']);
            };
            $scope.getIsBundle = function (segmentSeatMap) {

                var isBundle = false;

                if (segmentSeatMap) {
                    _.forEach(segmentSeatMap.Travelers, function (t) {

                        isBundle = isBundle || (t.IsBundle ? true : false);
                    });
                }

                return isBundle;
            };
            $scope.getCompanionCount = function (segmentSeatMap) {

                var companionCount = 0;
                var currentEPlusSeatCount = 0;

                if (segmentSeatMap) {
                    _.forEach(segmentSeatMap.Travelers, function (t) {

                        companionCount = companionCount + (t.CompanionCount ? t.CompanionCount : 0);

                            // 2021-02-15 - Phase 1 EMD Updates/Commented out existing code - John Sanders

                            // only for non privilege traveler where pre-selected seat is eplus
                            // if (!t.IsEPlusSubscriber && !t.IsBundle && !t.IsOTP && !t.hasPrivilege &&
                            //     t.CSLSelectedSeat !== null &&
                            //     t.CSLSelectedSeat.IsEPlus) {
                            //     currentEPlusSeatCount++;
                            // }
                        });
                        // Number of final companions (applied) = MAX(companionCount,currentEPlusSeatCount)
                        // companionCount = (companionCount > currentEPlusSeatCount) ? companionCount : currentEPlusSeatCount;
                    }

                return companionCount;
            };
            $scope.processPricing = function (segmentIndex, legIndex) {

                // 0. get item in cart for the selected leg
                var items = [];
                _.forEach($scope.data.cart.items, function (item) {

                    if (item.SegmentIndex === segmentIndex && item.LegIndex === legIndex) {
                        item.CurrentSeatAmount = item.CurrentSeatCost;
                        item.IsChanged = (item.CurrentSeatNumber !== item.CSLSeatNumber) ? 1 : 0;
                        items.push(item);
                    }
                });

                var segmentSeatMap = $scope.data.selection.segmentSeatMaps[legIndex];
                // 1. Get is bundle
                var isBundle = $scope.getIsBundle(segmentSeatMap);
                // 2. Get companion count
                var companionCount = $scope.getCompanionCount(segmentSeatMap);

                // 3. Within a leg's item, calculated the chargeable amount of each item
                // 3.1 If it's bundle / aka absolute entitlement; all free (notes: it's either non or all travelers is bundle)
                if (isBundle) {
                    _.forEach(items, function (item) {
                        item.CurrentSeatAmount = 0;
                    });
                }
                else {
                    // 3.2 Based on privilege
                    // 3.2.1 IsEPlusSubscriber : free
                    // 3.2.2 IsOPT : no additional charge
                    _.forEach(items, function (item) {

                        var traveler = segmentSeatMap.Travelers[item.TravelerIndex];
                        if (traveler.IsEPlusSubscriber) {
                            item.CurrentSeatAmount = 0;
                        }
                        else if (traveler.hasPrivilege) {
                            item.CurrentSeatAmount = 0;
                        }
                        else if (traveler.IsOTP) {
                            item.CurrentSeatAmount = 0;
                        }
                            // 2020-09-09. Story 472403. Suraphol.
                            else if (traveler.hasFareRelatedEntitlements) {
                                item.CurrentSeatAmount = 0;
                            }
                    });

                    // 3.2.3 If Companion count available; charge highest amount to 0
                    if (companionCount > 0) {

                        // 3.2.2.1 Sort order Amount
                        items = _.orderBy(items, ['CurrentSeatAmount', 'IsChanged'], ['desc', 'asc']);
                        _.forEach(items, function (item) {

                            if (item.CurrentSeatAmount === 0) return false;
                            item.CurrentSeatAmount = 0;
                            companionCount--;
                            if (companionCount <= 0) return false;
                        });
                    }
                }

                $scope.data.cart.total = _.sumBy($scope.data.cart.items, 'CurrentSeatAmount');
            };
                /***********
                EMD Updates END - John Sanders
                ***********/
            $scope.syncSeatMapSegment = function (legIndex) {

                    // TFS - 480416 - 03/04/2021 - John Sanders
                    // Fix for Confirm Button/Below Logic commented out, refactored and moved to handleConfirmButton function below
                if (legIndex === undefined) return;

                if ($scope.data.selection.segmentSeatMaps) {
                        // var seatsArr = [];
                        // var availableSeatArr = [];
                        // var userNum = [];
                        // var x = $scope.data.selection.segmentSeatMaps;
                        // for (var key in $scope.data.selection.segmentSeatMaps) {
                        //     seatsArr.push(x[key]);
                        // }
                        // for (var i = 0; i < seatsArr.length; i++) {
                        //     if (seatsArr[i].AvailableSeatsFinal !== undefined) {
                        //         availableSeatArr.push(seatsArr[i].AvailableSeatsFinal);
                        //     }
                        // }
                    _.forEach($scope.data.selection.segmentSeatMaps, function (ssm, lIndex) {

                        if (legIndex === lIndex) {

                            var selectedSeats = [];
                            _.forEach(ssm.Travelers, function (t) {

                                if (t.SelectedSeat &&
                                  t.SelectedSeat.SeatNumber &&
                                  t.SelectedSeat.SeatNumber.length > 0) {
                                    selectedSeats.push(t.SelectedSeat.SeatNumber);
                                }
                                    // userNum.push(key);
                            });

                                // for (var i = 0; i < availableSeatArr.length; i++) {
                                //     if (availableSeatArr.length > 1) {
                                //         if (availableSeatArr[i] > 0 && selectedSeats.length > 0) {
                                //             if (legIndex === i) {
                                //                 if (availableSeatArr[i + 1] && availableSeatArr[i + 1] !== undefined) {
                                //                     if (legIndex === 0) {
                                //                         var firstSelectSeat = selectedSeats.length;
                                //                         $scope.firstSelectSeat = firstSelectSeat;
                                //                     } else if (legIndex === 1) {
                                //                         if (availableSeatArr[1] && availableSeatArr[1] > userNum.length - 1) {
                                //                             var secondSelectSeat = selectedSeats.length;
                                //                             $scope.secondSelectSeat = secondSelectSeat;
                                //                         } else {
                                //                             if (selectedSeats.length === availableSeatArr[1]) {
                                //                                 $scope.btnStatus = true;
                                //                                 $scope.secondSelectSeat = true;
                                //                             } else {
                                //                                 $scope.btnStatus = false;
                                //                             }
                                //                         }
                                //                     }
                                //                     $scope.btnStatus = false;
                                //                 } else {
                                //                     if (availableSeatArr[i] && availableSeatArr[i] > userNum.length - 1) {
                                //                         if (selectedSeats.length && selectedSeats.length > 0) {
                                //                             console.log("xxx");
                                //                             if (i === 1) {
                                //                                 var secondSeat = selectedSeats.length;
                                //                                 $scope.secondSelectSeat = secondSeat;
                                //                                 var lastLegSeatsNum = selectedSeats.length;
                                //                                 $scope.lastLegSeatsNum = lastLegSeatsNum;
                                //                             } else {
                                //                                 var lastLegSeatsNum = selectedSeats.length;
                                //                                 $scope.lastLegSeatsNum = lastLegSeatsNum;
                                //                             }
                                //                             $scope.btnStatus = true;
                                //                         }
                                //                     } else {
                                //                         if (selectedSeats.length === availableSeatArr[i]) {
                                //                             $scope.btnStatus = true;
                                //                             $scope.lastLegSeatsNum = true;
                                //                             $scope.firstSelectSeat = true;
                                //                         } else {
                                //                             $scope.btnStatus = false;
                                //                         }
                                //                     }
                                //                 }
                                //             } else {
                                //                 $scope.btnStatus = true;
                                //             }
                                //         } else if (availableSeatArr[0] === 0) {
                                //             $scope.btnStatus = false;
                                //         } else if (availableSeatArr[i] === 0 && availableSeatArr[0] !== 0) {
                                //             if (availableSeatArr[i + 1] && availableSeatArr[i + 1] > 0) {
                                //                 $scope.btnStatus = false;
                                //             } else {
                                //                 $scope.btnStatus = true;
                                //                 $scope.lastLegSeatsNum = true;
                                //                 $scope.firstSelectSeat = true;
                                //             }
                                //         } else if (availableSeatArr[i] > 0 && selectedSeats.length === 0) {
                                //             $scope.btnStatus = false;
                                //             if (legIndex === 0) {
                                //                 var firstSelectSeat = selectedSeats.length;
                                //                 $scope.firstSelectSeat = firstSelectSeat;
                                //             } else if (legIndex === 1) {
                                //                 if (availableSeatArr[1] && availableSeatArr[1] > userNum.length - 1) {
                                //                     var secondSelectSeat = selectedSeats.length;
                                //                     $scope.secondSelectSeat = secondSelectSeat;
                                //                 } else {
                                //                     if (selectedSeats.length === availableSeatArr[1]) {
                                //                         $scope.btnStatus = true;
                                //                         $scope.secondSelectSeat = true;
                                //                     } else {
                                //                         $scope.btnStatus = false;
                                //                     }
                                //                 }
                                //             }
                                //         }
                                //     } else {
                                //         if (availableSeatArr[i] > 0 && selectedSeats.length > 0) {
                                //             $scope.btnStatus = true;
                                //             $scope.lastLegSeatsNum = true;
                                //             $scope.firstSelectSeat = true;
                                //             $scope.secondSelectSeat = true;
                                //         } else {
                                //             $scope.btnStatus = false;
                                //         }
                                //     }
                                // }
                            _.forEach(ssm.Cabins, function (cabin) {

                                _.forEach(cabin.HorizontalPlaneGroups, function (group) {

                                    _.forEach(group.HorizontalPlaneRows, function (row) {

                                        _.forEach(row.Seats, function (seat) {

                                            if (selectedSeats.indexOf(seat.Identifier) > -1) {

                                                _.forEach(ssm.Travelers, function (t, tIndex) {

                                                    if (t.SelectedSeat &&
                                                      t.SelectedSeat.SeatNumber &&
                                                      t.SelectedSeat.SeatNumber.length > 0) {

                                                        if (seat.Identifier === t.SelectedSeat.SeatNumber) {

                                                            var targetIndex = tIndex + 1;
                                                            var targetClass = 'current' + targetIndex;

                                                            t.SelectedSeat.Characteristics = seat.Characteristics;

                                                            if (seat.SeatCssClass.indexOf('current') === -1) {
                                                                seat.ExistingClass = seat.SeatCssClass;
                                                            }

                                                            if (seat.IsAvailable) {
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('available', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current1', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current2', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current3', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current4', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current5', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current6', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current7', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current8', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current9', targetClass);
                                                            }
                                                            else {
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('occupied', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current1', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current2', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current3', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current4', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current5', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current6', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current7', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current8', targetClass);
                                                                seat.SeatCssClass = seat.SeatCssClass.replace('current9', targetClass);
                                                                if (t.SelectedSeat && t.CSLSelectedSeat) {
                                                                    t.SelectedSeat.IsSeatExpired = t.SelectedSeat.SeatNumber !== t.CSLSelectedSeat.SeatNumber;
                                                                }
                                                            }
                                                        }
                                                    }
                                                });
                                            }
                                            else {

                                                if (seat.ExistingClass && seat.ExistingClass !== '' &&
                                                  (seat.SeatCssClass !== seat.ExistingClass)) {
                                                    seat.SeatCssClass = seat.ExistingClass;
                                                }
                                            }
                                        });
                                    });
                                });
                            });
                        }
                    });
                }
            };
                // TFS - 480416 - 03/04/2021 - John Sanders
                // Fix for Confirm Button/Logic moved from above syncSeatMapSegment function and refactored.
                $scope.handleConfirmButton = function () {
                    // 2021-04-20. Story 485552. Suraphol
                    // this definition is for change link to appear
                    $scope.selectedSeatArray = [];
                    $rootScope.confirmButtonEnabled = false;
                    var availableSeatArr = [];
                    // userNum holds the number of travelers for the currently selected segment
                    var userNum = $scope.data.selection.currentSegmentSeatMap.Travelers.length;
                    var firstZeroIndex = 0;
                    if ($scope.data.selection.segmentSeatMaps) {
                        // iterate over segmentSeatMaps (legs)
                        for (var i = 0; i < $scope.data.selection.segmentSeatMaps.length; i++) {
                            if ($scope.data.selection.segmentSeatMaps[i].AvailableSeatsFinal !== undefined) {
                                // availableSeatArr length represents the number of legs in a segment
                                availableSeatArr.push($scope.data.selection.segmentSeatMaps[i].AvailableSeatsFinal);
                            }

                            if (firstZeroIndex === 0 && $scope.data.selection.segmentSeatMaps[i].AvailableSeatsFinal === 0) {
                                firstZeroIndex = i;
                            }
                        }
                        // adjust availableSeatArr to only have length up to the first index with zero available seats
                        //var firstZeroIndex = $scope.data.selection.segmentSeatMaps.findIndex( ssm => ssm.AvailableSeatsFinal === 0 );
                        if (firstZeroIndex > 0) {
                            availableSeatArr.length = firstZeroIndex;
                        }

                        // iterate over each traveler for currently selected segment
                        for (var i = 0; i < userNum; i++) {
                            var selectedSeats = [];
                            // iterate over each seat map (leg) in the currently selected segment
                            _.forEach($scope.data.selection.segmentSeatMaps, function (ssm, lIndex) {
                                // if this traveler has a selected seat for this seat map add to selectedSeats array
                                if (ssm.Travelers[i].SelectedSeat && ssm.Travelers[i].SelectedSeat.SeatNumber) {
                                    selectedSeats[lIndex] = ssm.Travelers[i].SelectedSeat.SeatNumber;
                                }
                            });
                            // each nested array in selectedSeatArray represents a passenger and their seat selections for each leg of that segment
                            // if the current traveler has selected seats in any leg of the current segment add selectedSeats array to selectedSeatArray
                            if (selectedSeats.length > 0) {
                                $scope.selectedSeatArray[i] = selectedSeats;
                            }
                        }

                        // if selectedSeatArray has zero length, provide value other than true or false to segmentStatusArray
                        if ($scope.selectedSeatArray.length === 0) {
                            $rootScope.segmentStatusArray[$scope.data.selection.selectedSegmentIndex] = 0;
                        } else {
                            // if current segment has more than one seat map (leg)
                            if ($scope.data.selection.segmentSeatMaps.length > 1) {
                                // iterate over selectedSeatArray
                                _.forEach($scope.selectedSeatArray, function (ssa) {
                                    if(ssa) {
                                        // adjust this ssa for empty array indexes
                                        var adjustedSelectedSeatArray = ssa.filter(function(x){ return x != undefined}).length;
                                        // compare selected seats for a passanger to the number of legs with available seats
                                        if (adjustedSelectedSeatArray > 0 && adjustedSelectedSeatArray !== availableSeatArr.length) {
                                            // if the length of selected seats for the current traveler is not equal to number of legs with available seats
                                            // set false for that segment to segmentStatusArray and stop iteration
                                            $rootScope.segmentStatusArray[$scope.data.selection.selectedSegmentIndex] = false;
                                            return false;
                                        } else {
                                            // if the length of selected seats for the current traveler is equal to number of legs with available seats
                                            // set true for that segment to segmentStatusArray
                                            $rootScope.segmentStatusArray[$scope.data.selection.selectedSegmentIndex] = true;
                                        }
                                    }
                                });
                            } else {
                                // if current segment has only one seat map (leg) set true for that segment to segmentStatusArray
                                $rootScope.segmentStatusArray[$scope.data.selection.selectedSegmentIndex] = true;
                            }
                        }
                    }

                    // iterate over segmentStatusArray
                    _.forEach($rootScope.segmentStatusArray, function (segmentStatus) {
                        if (segmentStatus === 0) {
                            // if segmentStatus is 0 should have no affect on the confirm button
                            return;
                        } else if (segmentStatus === true) {
                            // if segmentStatus is true, confirm button is enabled
                            // 2021-04-20. Story 485552. Suraphol
                            $rootScope.confirmButtonEnabled = true;
                            $rootScope.btnStatus = true;
                        } else if (segmentStatus === false) {
                            // if segmentStatus is false, confirm button is not enabled and stop iteration
                            // 2021-04-20. Story 485552. Suraphol
                            $rootScope.confirmButtonEnabled = false;
                            $rootScope.btnStatus = false;
// John's code              return false;
//suraphol
 console.log('##### handleConfirmButton(), point 3 return');
                            return;
                        }
                    });
                };
            $scope.resetCurrentSegmentSeatMap = function () {

                if ($scope.data.selection.selectedSegmentIndex > -1 &&
                  $scope.data.selection.selectedLegIndex > -1 &&
                  $scope.data.selection.selectedTravelerIndex > -1 &&
                  $scope.data.selection.segmentSeatMaps &&
                  $scope.data.selection.currentSegmentSeatMap &&
                  $scope.data.selection.isAllowReset) {

                    $rootScope.mainSpinner = true;

                    // restore traveler selected seat
                    _.forEach($scope.data.selection.currentSegmentSeatMap.Travelers, function (traveler) {

                        traveler.SelectedSeat = _.cloneDeep(traveler.CSLSelectedSeat);
                    });

                    // sync seat map with default seat selection
                    $scope.syncSeatMapSegment($scope.data.selection.selectedLegIndex);
                    $scope.syncCart($scope.data.selection.selectedLegIndex);

                    $scope.data.selection.isAllowReset = false;
                    $rootScope.mainSpinner = false;
                    // TFS - 480416 - 03/04/2021 - Comment out code/Fix for Confirm Button - John Sanders
                    // $scope.btnStatus = false;
                    $scope.selectedSeatArray = [];
                    $scope.handleConfirmButton();
                }
            };
            $scope.formatDate = function (date) {

                var dateOut = new Date(date);
                return dateOut;
            };

            /* 2021-11-03 Suyash Cart Calculation Start -  Premier access - 7095*/
            // $scope.options = [];
            $scope.headerName = [];

            $scope.toggleAll = function(header) {
                var checked = $scope.headerName[header];
                angular.forEach($scope.data.tableDataList, function(value, key) {
                    if(value.header == header){
                        value.checked = checked;
                    }
                });
                $scope.updateCartFinalAmount(); 
            }

            $scope.updateCartFinalAmount = function () {
                var total = 0;
                angular.forEach($scope.data.tableDataList, function(value, key) {
                    if(value.checked && value.Amount != undefined){ 
                        total = parseInt(total) + parseInt(value.Amount);
                    }
                });
                $scope.data.cart.total = total;
                if($scope.data.cart.total > 0){
                    $rootScope.confirmButtonEnabled = true;
                }else{
                    $rootScope.confirmButtonEnabled = false;
                }
            }

            $scope.updateCartTotal = function (index) {
                if (!$scope.data.tableDataList[index].checked) {
                    $scope.headerName[$scope.data.tableDataList[index].header] = false;
                } 
                $scope.updateCartFinalAmount(); 
                $scope.checkCheckboxSelection(index);
            }

            $scope.checkCheckboxSelection = function (index) {
                var header = $scope.data.tableDataList[index].header;
                var selectAll = true;
                angular.forEach($scope.data.tableDataList, function(value, key) {
                    if(value.header == header && (value.checked == false || value.checked == undefined)){
                        selectAll = false;
                    }
                });
                if(selectAll){
                    $scope.headerName[header] = true;
                    $scope.toggleAll(header);
                }   

                $scope.updateCartFinalAmount(); 
            }

            /* 2021-11-03 Suyash Cart Calculation End -  Premier access - 7095*/

            /* 2021-12-22 Suyash Email Notification Start -  Premier access - 7095*/
            $scope.premierAccessEmail = {
                sendMeEmail: false,
                sendOtherEmail: false,
                otherEmailAddr: '',
                isInvalidEmail: false
            };

            $scope.dismissPremierAccess = function () {

                if ($scope.premierAccessEmail.sendMeEmail) {

                    var referenceNumber = $scope.data.transactionEntity.referenceNumber;
                    var otherEmail = '';

                    $rootScope.mainSpinner = true;
                    PNRService.submitPremierAccessEmail(
                      referenceNumber,
                      $rootScope.currentUser.email,
                      $scope.premierAccessEmail.sendMeEmail,
                      $scope.premierAccessEmail.sendOtherEmail
                    ).then(function () {

                        $rootScope.mainSpinner = false;
                        $scope.premierAccessSuccessModal.modal('hide');
                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $scope.premierAccessSuccessModal.modal('hide');
                    });
                }
                else {
                    $scope.premierAccessSuccessModal.modal('hide');
                }
            };
            angular.element('#premier-access-success-modal').on('hidden.bs.modal', function (e) {
                $state.go($state.current.parent + '-home', { feature: 'init' });
            });
            $scope.goHome = function () {

                $rootScope.$broadcast('goHome', { needConfirm: true });
            };

            /* 2021-12-22 Suyash Email Notification End -  Premier access - 7095*/

            /* 2021-11-09 Suyash Confirm Premier Access Selection Start -  Premier access - 7095*/

            $scope.applyPremerAccess = function () {
                if($scope.data.cart.total > 0){

                    if ($scope.data.selection.selectedSegmentIndex !== -1) {
                        //$scope.selectSegment($scope.data.selection.selectedSegmentIndex, $scope.data.selection.currentAirSegment.GreySeatAssignmentButton, function () {

                            $state.go($state.current.parent + '-premier-access', { feature: 'confirm-premier-access' });
                        //});
                    }
                    else {
                        $state.go($state.current.parent + '-premier-access', { feature: 'confirm-premier-access' });
                    }
                }
            };

            $scope.goBackPremierAccess = function () {
                $state.go($state.current.parent + '-premier-access', { feature: 'apply-premieraccess' });
            };
            /* 2021-11-09 Suyash Confirm Premier Access Selection End -  Premier access - 7095*/

            $scope.applyEplus = function () {

                $scope.data.cart.showCart = false;
                if ($scope.data.cart.items.length > 0) {

                    if ($scope.data.selection.selectedSegmentIndex !== -1) {
                        $scope.selectSegment($scope.data.selection.selectedSegmentIndex, $scope.data.selection.currentAirSegment.GreySeatAssignmentButton, function () {

                            $state.go($state.current.parent + '-seat-assignment', { feature: 'confirm-eplus' });
                        });
                    }
                    else {
                        $state.go($state.current.parent + '-seat-assignment', { feature: 'confirm-eplus' });
                    }
                }
            };
            /***********
             * segment end
             ***********/

            /*********** Apply EPlus End ***********/
            /*********** Confirm EPlus Start ***********/

            $scope.goBack = function () {

                $state.go($state.current.parent + '-seat-assignment', { feature: 'apply-eplus' });
            };

            $scope.confirmEPlusCheckModal = $('#eplus-confirm-modal');
            $scope.proceedEPlus = false;

            $scope.confirmEPlusCheck = function () {

                $scope.proceedEPlus = false;
                $scope.confirmEPlusCheckModal.modal();
            };
            $scope.confirmEPlus = function () {

                $scope.proceedEPlus = true;
                $scope.confirmEPlusCheckModal.modal('hide');
            };
            // 2021-11-23 Suyash Start - Premier access - 7095
            $scope.confirmPremierAccessCheckModal = $('#premieraccess-confirm-modal');
            $scope.premierAccessSuccessModal = $('#premier-access-success-modal');
            $scope.proceedPremierAccess = false;

            $scope.confirmPremierAccessCheck = function () {
                $scope.proceedPremierAccess = false;
                $scope.confirmPremierAccessCheckModal.modal();
            };

            $scope.confirmPremierAccess = function () {
                if($scope.data.pascharge.chargeAmount > 0){
                    $scope.data.remarkMessage = '';
                    var accountType = $scope.data.pascharge.accountType;
                    var remark = $scope.data.pascharge.remark;
                    var comment = $scope.data.pascharge.comment;
                    var payerId = $scope.data.pascharge.accSearchId;
                    var beneficiaryId = $scope.data.pascharge.beneficiarySearchId;
                    var callerId = '';
                    if ($scope.data.callerAccount) {
                        callerId = $scope.data.callerAccount.accountId;
                    }
                    $rootScope.mainSpinner = true; // 1. recheck fund availability
                    AccountService.getAccountById(
                      payerId,
                      $rootScope.currentUser.id
                    ).then(function (value) {
                        var fund = value.Fund;
                        if($scope.data.pascharge.chargeAmount > 0 && fund > $scope.data.pascharge.chargeAmount){
                            var callerFirstName = '';
                            var callerLastName = '';
                            if ($scope.data.callerAccount) {
                                callerFirstName = $scope.data.callerAccount.callerFirstName;
                                callerLastName = $scope.data.callerAccount.callerLastName;
                            }
                            var newAgencyPNRConfirmWaiver = '';
                            var newPNRConfirmWaiver = '';
                            if ($scope.data.NEWPNR && $scope.data.NEWPNR.SalesReservationDetail)  //revisit logic...
                            {
                                $scope.data.newAgencyPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.AssociatedPNRs[0].RecordLocator;
                                $scope.data.newPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.PNR.RecordLocator;
                                newAgencyPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.AssociatedPNRs[0].RecordLocator;
                                newPNRConfirmWaiver = $scope.data.NEWPNR.SalesReservationDetail.PNR.RecordLocator;
                            }
                            $rootScope.mainSpinner = true; // 2. send request to confirm premier access

                            $scope.createPremierAccessFulfilmentRequestPayload();

                            PNRService.preDeductAccountBalance4PremierAccess(
                              payerId,
                              $rootScope.currentUser.id,
                              $scope.data.pascharge.chargeAmount,
                            ).then(function(value3){
                                if(value3.success){
                                    var airLinePNR = '';
                                    var agencyPNR = '';

                                    if($scope.data.PNR.PNRDetail.PNR.RecordLocator.length == 5 || $scope.data.PNR.PNRDetail.PNR.RecordLocator.length == 6){
                                        airLinePNR = $scope.data.PNR.PNRDetail.PNR.RecordLocator;
                                    }
                                    if($scope.data.PNR.PNRDetail.AssociatedPNRs[0].RecordLocator.length == 5 || $scope.data.PNR.PNRDetail.AssociatedPNRs[0].RecordLocator.length == 6){
                                        agencyPNR = $scope.data.PNR.PNRDetail.AssociatedPNRs[0].RecordLocator;
                                    }

                                    PNRService.confirmPremierAccessPayment(
                                        $scope.data.premierAccessFulfilmentOffer,
                                        $rootScope.currentUser.id,
                                        payerId,
                                        beneficiaryId,
                                        callerId,
                                        callerFirstName,
                                        callerLastName,
                                        comment,
                                        remark, 
                                        airLinePNR,
                                        agencyPNR
                                    ).then(function (value) {
                                        $rootScope.mainSpinner = false;
                                        if (value.errors && value.errors.length > 0) {
                                            //$scope.comfirmApplyWaiverMessage = true;
                                            $rootScope.$broadcast('showMessage',
                                              {
                                                  type: 'alert',
                                                  text: value.errors[0]
                                              });
                                        }
                                        else{

                                            $scope.data.transactionEntity = value;
                                            $scope.confirmPremierAccessCheckModal.modal('hide');
                                            $scope.premierAccessSuccessModal.modal();
                                            PNRService.makePremierAccessPayment(
                                                $scope.data.premierAccessFulfilmentOffer,
                                                $rootScope.currentUser.id,
                                                payerId,
                                                '{!$Label.Sip_Premier_Access}',
                                                value.referenceNumber
                                            ).then(function (paymentResponse) {
                                                $scope.canDismiss = true;
                                            });
                                        }

                                    }, function (err) {
                                        $rootScope.mainSpinner = false;
                                        $rootScope.$broadcast('showMessage',
                                        {
                                            type: 'alert',
                                            text: err
                                        });
                                    });
                                }
                                else {
                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: value.messages[0]
                                      });
                                }
                            });

                        }else {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.SIP_Alert_Amenity_Fund_Insufficient)}'
                              });
                        }
                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                }
            };

            $scope.createPremierAccessFulfilmentRequestPayload = function () {
                console.log($scope.data.tableDataList);
                console.log($scope.data.FulfilmentOffer);
                $scope.data.premierAccessFulfilmentOffer = {};
                $scope.data.premierAccessFulfilmentOffer.Requester = [];
                $scope.data.premierAccessFulfilmentOffer.Products= [];
                $scope.data.premierAccessFulfilmentOffer.Products[0] = {};
                var offers = [];
                $scope.data.premierAccessFulfilmentOffer.Products[0].Offers = {};
               
                $scope.data.premierAccessFulfilmentOffer.FlightSegments = [];
                $scope.data.premierAccessFulfilmentOffer.Travelers = [];

                $scope.data.premierAccessFulfilmentOffer.Products[0].Parameters = $scope.data.FulfilmentOffer.Products[0].Parameters ? $scope.data.FulfilmentOffer.Products[0].Parameters : [];
                $scope.data.premierAccessFulfilmentOffer.Products[0].ProductCode = $scope.data.FulfilmentOffer.Products[0].ProductCode ? $scope.data.FulfilmentOffer.Products[0].ProductCode : [];
                $scope.data.premierAccessFulfilmentOffer.Products[0].ProductId = $scope.data.FulfilmentOffer.Products[0].ProductId ? $scope.data.FulfilmentOffer.Products[0].ProductId : [];

                var fulfilmentOffers = $scope.data.FulfilmentOffer.Products[0].Offers != undefined ? $scope.data.FulfilmentOffer.Products[0].Offers : [];
                var fulfilmentTravellers = $scope.data.FulfilmentOffer.Travelers != undefined ? $scope.data.FulfilmentOffer.Travelers : [];
                var fulfilmentFlightSegments = $scope.data.FulfilmentOffer.FlightSegments != undefined ? $scope.data.FulfilmentOffer.FlightSegments : [];
                var flightSegmentIndexArray = [];
                var travellersIndexArray = [];

                
                $scope.data.premierAccessFulfilmentOffer.Requester = $scope.data.FulfilmentOffer.Requester != undefined ? $scope.data.FulfilmentOffer.Requester : {};
                $scope.data.premierAccessFulfilmentOffer.ReservationReferences = $scope.data.FulfilmentOffer.ReservationReferences != undefined ? $scope.data.FulfilmentOffer.ReservationReferences : {};

                //Bug Fix 33557 : Suyash
                angular.forEach($scope.data.tableDataList, function(value, key) {
                    if(value.atAirport == 'Y' || value.isEntitled == 'Y' || value.isPaid == 'Y' || value.subproductIsNotAvailable == 'Y'){
                        value.checked = false;
                    }
                });
                angular.forEach($scope.data.tableDataList, function(value, key) {
                    if(value.checked){
                        var subProductId = value.ID;
                        angular.forEach(fulfilmentOffers, function(fulfilmentValue, fulfilmentkey) {
                            if(fulfilmentValue.subproductId != undefined && subProductId == fulfilmentValue.subproductId){
                                offers.push(fulfilmentValue);
                                if(fulfilmentValue.Association != undefined){
                                    if(!$scope.checkArraryValueAlreadyExists(flightSegmentIndexArray, fulfilmentValue.Association.SegmentRefIDs[0])){
                                        flightSegmentIndexArray.push(fulfilmentValue.Association.SegmentRefIDs[0]);
                                    }
                                    if(!$scope.checkArraryValueAlreadyExists(travellersIndexArray, fulfilmentValue.Association.TravelerRefIDs[0])){
                                        travellersIndexArray.push(fulfilmentValue.Association.TravelerRefIDs[0]);
                                    }
                                }
                            }
                        });
                    }
                });
                $scope.data.premierAccessFulfilmentOffer.Products[0].Offers = offers;

                angular.forEach(fulfilmentFlightSegments, function(value, key) {
                    angular.forEach(flightSegmentIndexArray, function(selectedSegmentValue, selectedSegmentKey) {
                        if(selectedSegmentValue == value.ID){
                            $scope.data.premierAccessFulfilmentOffer.FlightSegments.push(value);
                        }
                    });
                });

                angular.forEach(fulfilmentTravellers, function(value, key) {
                    angular.forEach(travellersIndexArray, function(selectedTravellerValue, selectedTravellerKey) {
                        if(selectedTravellerValue == value.TravelerID){
                            $scope.data.premierAccessFulfilmentOffer.Travelers.push(value);
                        }
                    });
                });
                console.log($scope.data.premierAccessFulfilmentOffer);

            };

            $scope.checkArraryValueAlreadyExists = function(arr, val) {
                return arr.some(arrVal => val === arrVal);
            }

            // 2021-11-23 Suyash End - Premier access - 7095
            $scope.reprocessPricing = function (segmentIndex, legIndex) {

                // 0.1 get item in succeed seat for the selected leg
                var items = [];
                    $scope.succeedSeatTotal = 0;
                _.forEach($scope.data.eplusResult.SucceedSeats, function (s) {

                    if (s.SegmentIndex === segmentIndex && s.LegIndex === legIndex) {

                        _.forEach($scope.data.cart.items, function (i) {

                            // 0.2 restore origin price; below will calculate again
                            if (i.SegmentIndex === s.SegmentIndex &&
                              i.LegIndex === s.LegIndex &&
                              i.TravelerIndex === s.TravelerIndex) {

                                s.Cost = i.CurrentSeatCost;
                                return false;
                            }
                        });

                        s.IsChanged = (s.CurrentSeat !== s.SelectedSeat) ? 1 : 0;
                        items.push(s);
                    }
                });

                var memory = null;
                _.forEach($scope.data.seatMapMemories, function (m) {

                    if (m.segmentIndex === segmentIndex) {
                        memory = m;
                        return false;
                    }
                });
                var isBundle = false;
                var companionCount = 0;
                if (memory) {
                    var segmentSeatMap = memory.seatMaps[legIndex];
                    if (segmentSeatMap) {
                        // 1. Get is bundle
                        isBundle = $scope.getIsBundle(segmentSeatMap);
                        // 2. Get companion count
                        companionCount = $scope.getCompanionCount(segmentSeatMap);
                    }
                }

                // 3. Within a leg's item, calculated the chargeable amount of each item
                // 3.1 If it's bundle / aka absolute entitlement; all free (notes: it's either non or all travelers is bundle)
                if (isBundle) {
                    _.forEach(items, function (item) {
                        item.Cost = 0;
                    });
                }
                else {
                    // 3.2 Based on privilege
                    // 3.2.1 IsEPlusSubscriber : free
                    // 3.2.2 IsOPT : no additional charge
                    _.forEach(items, function (item) {

                        var traveler = segmentSeatMap.Travelers[item.TravelerIndex];
                        if (traveler.IsEPlusSubscriber) {
                            item.Cost = 0;
                        }
                        else if (traveler.hasPrivilege) {
                            item.Cost = 0;
                        }
                        else if (traveler.IsOTP) {
                            item.Cost = 0;
                        }
                    });

                    // 3.2.3 If Companion count available; charge highest amount to 0
                    if (companionCount > 0) {

                        // 3.2.2.1 Sort order Amount
                        items = _.orderBy(items, ['Cost', 'IsChanged'], ['desc', 'asc']);
                        _.forEach(items, function (item) {

                            if (item.Cost === 0) return false;
                            item.Cost = 0;
                            companionCount--;
                            if (companionCount <= 0) return false;
                        });
                    }
                }

                    // TFS - 473869 - 02/16/2021 - John Sanders
                    _.forEach($scope.data.eplusResult.SucceedSeats, function (succeedSeatAmount) {
                        var tempAmount = parseInt(succeedSeatAmount.Cost)
                        $scope.succeedSeatTotal = $scope.succeedSeatTotal + tempAmount;
                    })
                    // TFS - 473869 - 02/16/2021 - John Sanders
                    // $scope.data.eplusResult.TotalCost = _.sumBy($scope.data.eplusResult.SucceedSeats, 'Cost');
                    $scope.data.eplusResult.TotalCost = $scope.succeedSeatTotal;
            };
            $scope.confirmEPlusCheckModal.on('hidden.bs.modal', function (e) {

                if ($scope.proceedEPlus) {

                    // 0. Validate fund balance
                    var remark = $scope.data.charge.remark;
                    var comment = $scope.data.charge.comment;
                    var payerId = $scope.data.charge.accSearchId;
                    var beneficiaryId = $scope.data.charge.beneficiarySearchId;
                    var callerId = '';
                    if ($scope.data.callerAccount) {
                        callerId = $scope.data.callerAccount.accountId;
                    }


//console.log('=========== call submitEPlus, $scope.data.selectedWF is: ============');
//console.log($scope.data.selectedWF);

//console.log('=========== $scope.data.charge.remark: ============');
//console.log($scope.data.charge.remark);

                    var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                    // 3 type, jet Stream 1, meeting 2
                    var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                    $rootScope.mainSpinner = true;
                    AccountService.getAccountById(
                      payerId,
                      $rootScope.currentUser.id
                    ).then(function (value1) {

                        $rootScope.mainSpinner = false;
                        var fund = value1.Fund;
                        if (fund !== null && fund !== undefined && fund >= $scope.data.cart.total) {

                            // 1. Submit seat assignment
                            $rootScope.mainSpinner = true;
                            AmenityService.preDeductAccountBalance(
                              payerId,
                              $scope.data.cart.total,
                              $rootScope.currentUser.id,
                              agreementsIds,
                              deduct
                            ).then(function (value2) {

                                $rootScope.mainSpinner = false;
                                if (util.isSuccessService(value2)) {

//console.log('=========== call submitEPlus, remark is: ============');
//console.log(remark);

                                    $rootScope.mainSpinner = true;
                                    PNRService.submitEPlus(
                                      $scope.data.PNR,
                                      $scope.data.cart.items,
                                      $scope.data.cart.dummyItems,
                                      value2.pendingAmountObjId
                                    ).then(function (value3) {

                                        $rootScope.mainSpinner = false;
                                        $scope.data.eplusResult = value3;

                                        if ($scope.data.eplusResult.ErrorMessages &&
                                          $scope.data.eplusResult.ErrorMessages.length > 0) {
                                            $rootScope.$broadcast('showMessage',
                                              {
                                                  type: 'alert',
                                                  text: $scope.data.eplusResult.ErrorMessages[0]
                                              });
                                        }
                                        else {
                                            // 2.1 If got failed seat assignment then need to recalculate fund
                                                // TFS - 473869 - 02/16/2021 - John Sanders
                                                if ($scope.data.eplusResult.FailedSeats.length > 0 || $scope.data.eplusResult.TryAgainSeats.length > 0) {

                                                // 2.1.1 group segmentIndex, legIndex
                                                // pricing are calculation in bundle (segmentIndex, legIndex)
                                                if ($scope.data.eplusResult.SucceedSeats.length > 0) {
                                                    var arr = _.orderBy($scope.data.eplusResult.SucceedSeats,
                                                      ['SegmentIndex', 'LegIndex'], ['asc', 'asc']);

                                                    // below is just to find unique combination
                                                    var temp = [];
                                                    _.forEach(arr, function (s) {

                                                        temp.push(s.SegmentIndex + '_' + s.LegIndex);
                                                    });
                                                    var temp = _.uniq(temp);
                                                    _.forEach(temp, function (t) {

                                                        var segmentIndex = _.split(t, '_')[0];
                                                        var legIndex = _.split(t, '_')[1];
                                                        $scope.reprocessPricing(segmentIndex, legIndex);
                                                    });
                                                }
                                                else {
                                                    $scope.data.eplusResult.TotalCost = 0;
                                                }
                                            }
                                            else {
                                                $scope.data.eplusResult.TotalCost = $scope.data.cart.total;
                                            }

                                            if ($scope.data.eplusResult.SucceedSeats.length > 0) {
                                                // 2018-06-25. REQ-0492. Suraphol.
                                                var callerFirstName = '';
                                                var callerLastName = '';
                                                if ($scope.data.callerAccount) {
                                                    callerFirstName = $scope.data.callerAccount.callerFirstName;
                                                    callerLastName = $scope.data.callerAccount.callerLastName;
                                                }

//console.log('=========== call submitEPlusFund, remark is: ============');
//console.log(remark);
                                                // 2.2 Submit fund
                                                $rootScope.mainSpinner = true;
                                                PNRService.submitEPlusFund(
                                                  $scope.data.eplusResult,
                                                  $scope.data.PNR,
                                                  payerId,
                                                  beneficiaryId,
                                                  callerId,
                                                  callerFirstName,
                                                  callerLastName,
                                                  comment,
                                                  remark
                                                ).then(function (value4) {

                                                    $rootScope.mainSpinner = false;
                                                    $scope.data.transactionResult = value4;
                                                    $scope.data.transactionResult.canDismiss = true;

                                                    if ($scope.data.transactionResult.errors &&
                                                      $scope.data.transactionResult.errors.length > 0) {
                                                        $rootScope.$broadcast('showMessage',
                                                          {
                                                              type: 'alert',
                                                              text: $scope.data.transactionResult.errors[0]
                                                          });
                                                    }
                                                    else {
                                                        // DF-00783
                                                        // purge cart
                                                        $scope.data.cart.items = [];
                                                        $scope.data.cart.dummyItems = [];

                                                        $scope.data.transactionResult.remark = remark;
                                                        if ($rootScope.currentUser.isInternalUser) {
                                                            $scope.data.transactionResult.canDismiss = false;
                                                        }

//console.log('=========== call submitEPlusRemarks, remark is: ============');
//console.log(remark);
                                                        var waiverCode = $scope.data.transactionResult.ticketInfos[0].waiverFavorId;

                                                        $scope.data.transactionResult.remarkMessage = '';
                                                        PNRService.submitEPlusRemarks(
                                                          $scope.data.PNR,
                                                          $rootScope.currentUser.id,
                                                          remark,
                                                          $scope.data.transactionResult.referenceNumber
                                                        ).then(function (value5) {

                                                            if (value5.success) {
                                                                if (value5.messages.length > 0) {
                                                                    $scope.data.transactionResult.remarkMessage = value5.messages[0];
                                                                }
                                                            }
                                                            else {
                                                                $scope.data.transactionResult.remarkMessage = '{!JSENCODE($Label.Sip_Alert_Fail_To_Send_Remarks)}';
                                                            }
                                                            $scope.data.transactionResult.canDismiss = true;
                                                        }, function (err) {

                                                            $scope.data.transactionResult.remarkMessage = '{!JSENCODE($Label.Sip_Alert_Fail_To_Send_Remarks)}';
                                                            $scope.data.transactionResult.canDismiss = true;
                                                        });

                                                            // call issueEMD service, if the request is constructed, then use referenceNumber to lookup
//var issueEMDRequest = $scope.data.transactionResult.issuesEMDRequestJSON;
//console.log('=========== issueEMDRequest (will remove, not used) ============');
//console.log(issueEMDRequest);

                                                                var baReferenceNumber = $scope.data.transactionResult.referenceNumber;

//console.log('=========== baReferenceNumber');
//console.log(baReferenceNumber);


                                                                PNRService.sendIssueEMD(baReferenceNumber);


                                                        $state.go($state.current.parent + '-seat-assignment', { feature: 'complete-eplus' });
                                                        }  // else of 'if ($scope.data.transactionResult.errors'
                                                    },  // function (value4)
                                                    function (err) {

                                                    $rootScope.mainSpinner = false;
                                                    console.debug(err);
                                                    $rootScope.$broadcast('showMessage',
                                                      {
                                                          type: 'alert',
                                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                                      });
                                            }
                                                    );   // then function (value4)
                                                } // if SucceedSeats.length > 0
                                            else {
                                                $scope.data.transactionResult = {};
                                                $scope.data.transactionResult.canDismiss = true;
                                                $scope.data.transactionResult.referenceNumber = '-';
                                                $scope.data.transactionResult.seatAssignResult = $scope.data.eplusResult;

                                                // DF-00783
                                                // purge cart
                                                $scope.data.cart.items = [];
                                                $scope.data.cart.dummyItems = [];

                                                $state.go($state.current.parent + '-seat-assignment', { feature: 'complete-eplus' });
                                            }
                                            } // else of 'if ($scope.data.eplusResult.ErrorMessages'
                                        },  // function (value3)
                                        function (err) {

                                        $rootScope.mainSpinner = false;
                                        console.debug(err);
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                          });
                                        }  // function (err)
                                        );  // then function (value3)
                                    }   // if (isSuccessService(value2))
                                });  // then function (value2)
                            }  // if (fund)
                        else {
                            $rootScope.$broadcast('refreshSelectedAccount', {});
                        }
                    }, function (err) {

                        $rootScope.mainSpinner = false;
                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                }
            });
            $scope.validateText1 = function ($event) {

                var pattern = '^[a-zA-Z0-9 \b]*$';
                var pRegex = new RegExp(pattern);

                var key = String.fromCharCode(!$event.charCode ? $event.which : $event.charCode);
                if (!pRegex.test(key)) {
                    $event.preventDefault();
                    return false;
                }
            };
            /*********** Confirm EPlus End ***********/

            $scope.email = {
                sendMe: false,
                sendOther: false,
                sendOtherEmail: ''
            };
            $scope.sendEmail = function () {

                if ($scope.email.sendMe) {

                    $rootScope.mainSpinner = true;
                    PNRService.submitEPlusEmail(
                      $scope.data.transactionResult.referenceNumberList,
                      $scope.data.PNR,
                      $scope.email.sendOtherEmail,
                      $scope.email.sendMe,
                      $scope.email.sendOther
                    ).then(function (value) {

                        $rootScope.mainSpinner = false;
                        if (value) {
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Email_Failed)}'
                              });
                        }
                        else {
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'success',
                                  text: '{!JSENCODE($Label.Sip_Info_Email_Sent)}'
                              });
                        }
                    }, function (err) {

                        console.debug(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Failed)}'
                          });
                    });
                }
            };
                // 2021-02-15 - Duplicate function to get EMD Values in SeatAssignmentController - John Sanders
                $scope.getExistingSeatEMDValues = function (seatIdentifier, legIndex) {
                    var rfisc;
                    var rfiscCostCurrency;
                    var rfiscCost;
                    // Get seat's service fund for the selected passenger

                    // 03_24_2021 - Commented out code/Fix for retrieve EMD values for segment with COG - John Sanders
                    _.forEach($scope.data.selection.segmentSeatMaps[legIndex].Cabins, function (cabin) {
                        if (!cabin.IsUpperCabin) {
                            _.forEach(cabin.VerticalPlaneRows, function (seatRow) {
                                _.forEach(seatRow.Seats, function (seat) {
                                    if (seat.Identifier === seatIdentifier) {
                                        if (seat.EMD) {
                                            rfisc = seat.EMD.RFISC;
                                            rfiscCostCurrency = seat.EMD.RFISCCostCurrency;
                                            rfiscCost = seat.EMD.RFISCCost;
                                        }
                                    }
                                });
                            });
                        }
                    });
                    // _.forEach($scope.data.selection.currentSegmentSeatMap.Cabins, function (cabin) {
                    //     if (!cabin.IsUpperCabin) {
                    //         _.forEach(cabin.VerticalPlaneRows, function (seatRow) {
                    //             _.forEach(seatRow.Seats, function (seat) {
                    //                 if (seat.Identifier === seatIdentifier) {
                    //                     if (seat.EMD) {
                    //                         rfisc = seat.EMD.RFISC;
                    //                         rfiscCostCurrency = seat.EMD.RFISCCostCurrency;
                    //                         rfiscCost = seat.EMD.RFISCCost;
                    //                     }
                    //                 }
                    //             });
                    //         });
                    //     }
                    // });
                    return [rfisc, rfiscCostCurrency, rfiscCost];
                };
        }
    })();
    (function () {
        "use strict";

        angular.module('bankingModule')
          .component('seatMapComp', {
              templateUrl: 'Sip_SeatMapCompTemplate' + '?lang={!language}',
              controller: controller,
              bindings: {
                  travelers: '=',
                  selection: '=',
                  cart: '=',
                  synccart: '&',
                  syncseatmapsegment: '&',
                  handleconfirmbutton: '&'
              }
          });

        controller.$inject = ['$rootScope'];

        function controller($rootScope) {

            var $ctrl = this;
            $ctrl.getTravelerUSD = function (seatIdentifier) {

                var usd = null;
                var traveler = $ctrl.selection.currentSegmentSeatMap.Travelers[$ctrl.selection.selectedTravelerIndex];
                //var nameIndex = traveler.TravelerNameIndex;
                var id = traveler.ID;

                // Get seat's service fund for the selected passenger
                _.forEach($ctrl.selection.currentSegmentSeatMap.Cabins, function (cabin) {

                    if (!cabin.IsUpperCabin) {
                        _.forEach(cabin.HorizontalPlaneGroups, function (group) {

                            _.forEach(group.HorizontalPlaneRows, function (row) {

                                _.forEach(row.Seats, function (seat) {

                                    if (seat.Identifier === seatIdentifier) {

                                        _.forEach(seat.USDList, function (u) {

                                            if (u.Name === id) {

                                                usd = u;
                                            }
                                        });
                                    }
                                });
                            });
                        });
                    }
                });

                return usd;
            };
            $ctrl.getTravelerServiceFund = function (seatIdentifier) {

                var serviceFund = null;
                var traveler = $ctrl.selection.currentSegmentSeatMap.Travelers[$ctrl.selection.selectedTravelerIndex];
                //var nameIndex = traveler.TravelerNameIndex;
                var id = traveler.ID;

                // Get seat's service fund for the selected passenger
                _.forEach($ctrl.selection.currentSegmentSeatMap.Cabins, function (cabin) {

                    if (!cabin.IsUpperCabin) {
                        _.forEach(cabin.HorizontalPlaneGroups, function (group) {

                            _.forEach(group.HorizontalPlaneRows, function (row) {

                                _.forEach(row.Seats, function (seat) {

                                    if (seat.Identifier === seatIdentifier) {

                                        _.forEach(seat.ServiceFundList, function (sFund) {

                                            if (sFund.Name === id) {

                                                serviceFund = sFund;
                                            }
                                        });
                                    }
                                });
                            });
                        });
                    }
                });

                return serviceFund;
            };

                // 2020-09-09. Story 466263. Suraphol.
                $ctrl.getEMDValues = function (seatIdentifier) {
                              var rfisc;
                              var rfiscCostCurrency;
                              var rfiscCost;
                              // Get seat's service fund for the selected passenger
                              _.forEach($ctrl.selection.currentSegmentSeatMap.Cabins, function (cabin) {
                                  if (!cabin.IsUpperCabin) {
                                      _.forEach(cabin.VerticalPlaneRows, function (seatRow) {
                                          _.forEach(seatRow.Seats, function (seat) {
                                              if (seat.Identifier === seatIdentifier) {
                                        if (seat.EMD) {
                                          rfisc = seat.EMD.RFISC;
                                          rfiscCostCurrency = seat.EMD.RFISCCostCurrency;
                                          rfiscCost = seat.EMD.RFISCCost;
                                        }
                                              }
                                          });
                                      });
                        }
                              });

                              return [rfisc, rfiscCostCurrency, rfiscCost];
                };

            $ctrl.selectSeat = function (seat) {

                if ($ctrl.selection.selectable &&
                  seat.IsAvailable &&
                  seat.IsAccessible) {

                    var seatIdentifier = seat.Identifier;

                    // if the seat selected by another traveler; reset another traveler seat
                    _.forEach($ctrl.cart.items, function (item) {

                        if (item.SegmentIndex === $ctrl.selection.selectedSegmentIndex &&
                          item.LegIndex === $ctrl.selection.selectedLegIndex &&
                          item.TravelerIndex !== $ctrl.selection.selectedTravelerIndex &&
                          item.CurrentSeatNumber === seatIdentifier) {

//console.log('=====================');
//console.log('=====================');
//console.log('=====================');
                            var anotherT = $ctrl.selection.currentSegmentSeatMap.Travelers[item.TravelerIndex];

//console.log(anotherT);

                            anotherT.SelectedSeat.SeatNumber = anotherT.CSLSelectedSeat.SeatNumber;
                            anotherT.SelectedSeat.SeatPrice = anotherT.CSLSelectedSeat.SeatPrice;

                                // 2020-09-09. Story 466263. Suraphol.
                                anotherT.SelectedSeat.RFISC = anotherT.CSLSelectedSeat.RFISC;
                                anotherT.SelectedSeat.RFISCCost = anotherT.CSLSelectedSeat.RFISCCost;
                                anotherT.SelectedSeat.RFISCCostCurrency = anotherT.CSLSelectedSeat.RFISCCostCurrency;

                            return false;
                        }
                    });

                    var serviceFund = $ctrl.getTravelerServiceFund(seatIdentifier);
                    var usd = $ctrl.getTravelerUSD(seatIdentifier);
                    var traveler = $ctrl.selection.currentSegmentSeatMap.Travelers[$ctrl.selection.selectedTravelerIndex];
                    traveler.SelectedSeat.SeatNumber = seatIdentifier;

                    traveler.SelectedSeat.DepartureAirport = $ctrl.selection.currentSegmentSeatMap.OriginInPNR;
                    traveler.SelectedSeat.ArrivalAirport = $ctrl.selection.currentSegmentSeatMap.DestinationInPNR;
                    traveler.SelectedSeat.FlightNumber = $ctrl.selection.currentSegmentSeatMap.FlightNumber;
                    traveler.SelectedSeat.FlightNumberInPNR = $ctrl.selection.currentSegmentSeatMap.FlightNumberInPNR;
                    traveler.SelectedSeat.FlightTimeInPNR = $ctrl.selection.currentSegmentSeatMap.DepartureDateInPNR;
                    traveler.SelectedSeat.FlightDateInPNR = $ctrl.selection.currentSegmentSeatMap.DepartureTimeInPNR;

                        // 2020-09-09. Story 472403. Suraphol.
                        if (traveler.IsOTP && traveler.hasOTPPurchasedOutsideJetstream) {
                        traveler.SelectedSeat.SeatPrice = usd && usd.Amount ? usd.Amount : 0;
                    }
                    else {
                        traveler.SelectedSeat.SeatPrice = serviceFund && serviceFund.Amount ? serviceFund.Amount : 0;
                    }

                        // 2020-09-09. Story 466263. Suraphol.
                        var emdArray = $ctrl.getEMDValues(seatIdentifier);
                        if (emdArray) {
                            traveler.SelectedSeat.RFISC = emdArray[0];
                            traveler.SelectedSeat.RFISCCostCurrency = emdArray[1];
                            traveler.SelectedSeat.RFISCCost = emdArray[2];
                        }

//console.log('ctrl.selectSeat, traveler=' + traveler);

                    $ctrl.syncseatmapsegment({
                        legIndex: $ctrl.selection.selectedLegIndex
                    });
                    $ctrl.synccart({
                        legIndex: $ctrl.selection.selectedLegIndex
                    });
                    // TFS - 480416 - 03/04/2021 - Fix for Confirm Button
                    $ctrl.handleconfirmbutton();
                    $ctrl.nextTraveler();

                    $ctrl.selection.isAllowReset = true;

                    var isExitRow = false;
                    _.forEach(seat.Characteristics, function (c) {

                        if (_.lowerCase(c.Code) === 'is exit' && _.lowerCase(c.Value) === 'true') {
                            isExitRow = true;
                            return false;
                        }
                    });

                    if (isExitRow) {
                        $('#exit-seat-modal').modal();
                    }
                }
            };
            $ctrl.nextTraveler = function () {

                $ctrl.selection.selectedTravelerIndex++;

                if ($ctrl.selection.selectedTravelerIndex >= $ctrl.selection.currentSegmentSeatMap.Travelers.length) {
                    $ctrl.selection.selectedTravelerIndex = 0;
                }

                if (!$ctrl.isTravelerAvailable()) {
                    $ctrl.nextTraveler();
                }
            };
            $ctrl.isTravelerAvailable = function () {

                var isAvailable = true;

                var traveler = $ctrl.travelers[$ctrl.selection.selectedTravelerIndex];
                _.forEach(traveler.TravelerSegments, function (s) {

                    if (s.SegmentNumber === $ctrl.selection.selectedLegIndex + 1) {

                        var traveler = $ctrl.selection.currentSegmentSeatMap.Travelers[$ctrl.selection.selectedTravelerIndex];
                        var isRestricted = traveler.IsRestricted;
                        var isSSMF = traveler.IsSSMF;
                        var isCheckedIn = traveler.IsCheckedIn;
                        var isSelectedUCSeat = traveler.SelectedSeat &&
                          traveler.SelectedSeat.SeatCabinKey &&
                          traveler.SelectedSeat.SeatCabinKey !== 'Y' &&
                          traveler.SelectedSeat.SeatCabinKey !== 'C';

                        isAvailable = !isRestricted && !isSSMF && !isCheckedIn && !isSelectedUCSeat;
                        return false;
                    }
                });

                return isAvailable;
            };
        }
    })();
    (function () {
        "use strict";

        angular.module('bankingModule')
          .component('segmentComp', {
              templateUrl: 'Sip_SegmentCompTemplate' + '?lang={!language}',
              controller: controller,
              bindings: {
                  segments: '=',
                  passengerCount: '=',
                  isShowHeader: '='
              }
          });

        controller.$inject = ['$rootScope'];

        function controller($rootScope) {

            var $ctrl = this;

            $ctrl.formatDate = function (input) {

                var output = new Date(input);
                return output;
            };
        }
    })();


    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('statusNominationController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', 'util',
            'ProductService', 'StatusNominationService', 'AmenityService'];

        function controller($rootScope, $scope, $state, util,
                            ProductService, StatusNominationService, AmenityService) {

            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: false,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: '',
                // 20181026 rwern REQ-0354
                beneficiaryOrReason: '',
                reason: ''
            };

            if ($scope.data.statusNomData && $scope.data.statusNomData.NewCode) {
                switch ($scope.data.statusNomData.NewCode) {
                    case 'GS':
                        $scope.data.charge.amenityType = 'SIP_Global_Service_Status_Nominations__c';
                        break;
                    case '1K':
                        $scope.data.charge.amenityType = 'SIP_1K_Status_Nominations__c';
                        break;
                    case '1P':
                        $scope.data.charge.amenityType = 'SIP_Platinum_Status_Nominations__c';
                        break;
                    case '1G':
                        $scope.data.charge.amenityType = 'SIP_Gold_Status_Nominations__c';
                        break;
                    case '1S':
                        $scope.data.charge.amenityType = 'SIP_Silver_Status_Nominations__c';
                        break;
                }
            }

            $scope.productList = {
                globalService: ProductService.getProductByCode($scope.data.products, 'GS'),
                oneK: ProductService.getProductByCode($scope.data.products, '1K'),
                platinum: ProductService.getProductByCode($scope.data.products, '1P'),
                gold: ProductService.getProductByCode($scope.data.products, '1G'),
                silver: ProductService.getProductByCode($scope.data.products, '1S')
            };
            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;
                if ($scope.data.widgetFeature === 'apply-status-nomination') {
                    $scope.data.charge.chargeAmount = '';
                }
                else if ($scope.data.widgetFeature === 'confirm-status-nomination') {
                    if ($scope.data.statusNomData) {
                        $scope.data.charge.enableFund = $scope.data.statusNomData.NewCode !== 'GS';
                        $scope.data.charge.enableGS = $scope.data.statusNomData.NewCode === 'GS';
                        $scope.data.charge.chargeAmount = $scope.data.statusNomData.TotalCost;
                    }
                }
            });
            //Shivani Changed method.. TOLERANCE
            $scope.isAvailableOption = function (targetOption) {

                if ($scope.data.statusNomData) {
                    //Shivani - TOLERANCE
                    var isAvailable = false;
                    switch (targetOption) {
                        case 'GS':
                            isAvailable = $scope.data.statusNomData.CurrentPremierCode != 'GS';
                            break;
                        case '1K':
                            isAvailable = $scope.data.statusNomData.CurrentPremierCode != 'GS' &&
                              $scope.data.statusNomData.CurrentPremierCode != '1K';
                            break;
                        case 'PL':
                            isAvailable = $scope.data.statusNomData.CurrentPremierCode != 'GS' &&
                              $scope.data.statusNomData.CurrentPremierCode != '1K' &&
                              $scope.data.statusNomData.CurrentPremierCode != 'PL';
                            break;
                        case 'GL':
                            isAvailable = $scope.data.statusNomData.CurrentPremierCode != 'GS' &&
                              $scope.data.statusNomData.CurrentPremierCode != '1K' &&
                              $scope.data.statusNomData.CurrentPremierCode != 'PL' &&
                              $scope.data.statusNomData.CurrentPremierCode != 'GL';
                            break;
                        case 'SL':
                            isAvailable = $scope.data.statusNomData.CurrentPremierCode != 'GS' &&
                              $scope.data.statusNomData.CurrentPremierCode != '1K' &&
                              $scope.data.statusNomData.CurrentPremierCode != 'PL' &&
                              $scope.data.statusNomData.CurrentPremierCode != 'GL' &&
                              $scope.data.statusNomData.CurrentPremierCode != 'SL';
                            break;
                        default:
                            isAvailable = true;
                            break;
                    }
                    //Shivani changes for TOLERANCE
                    if ( $scope.data.statusNomData.availableProductsInJan != undefined) {
                        isAvailable =  $scope.data.statusNomData.availableProductsInJan.indexOf(targetOption) != -1;
                    }
                    return isAvailable;
                    //end
                }
                else {
                    return false;
                }
            };
            $scope.selectOption = function (type) {

                $scope.data.statusNomData.NewCode = type.ProductCode;
                $scope.data.statusNomData.NewStatus = type.ProductName;
                $scope.data.statusNomData.TotalCost = type.UnitPrice;

                //Shivani REQ-0823 -- function called on product select
                $scope.data.OriginalCost = type.UnitPrice;
                $scope.data.DiscountTaken = 0;

                if ($scope.data.statusNomData.discountedProduct && $scope.data.statusNomData.discountedProduct.UnitPrice) {
                    $scope.data.statusNomData.TotalCost = type.UnitPrice - $scope.data.statusNomData.discountedProduct.UnitPrice;
                    $scope.data.DiscountTaken = $scope.data.statusNomData.discountedProduct.UnitPrice;
                }
                //end

                if ($scope.data.statusNomData.NewCode == 'GS') {
                    $scope.data.statusNomData.TotalCost = 1;
                }
            };
            $scope.applyStatusNomination = function () {

                $rootScope.mainSpinner = true;
                StatusNominationService.calculateNewExpirationDateByPremierLevelCutOffDate($scope.data.statusNomData.NewCode)
                  .then(function (value) {

                      $rootScope.mainSpinner = false;

                      if (util.isSuccessService(value)) {
                          //abe add new expriation date
                          $scope.data.statusNomData.NewExpiryDate = value.NewExpiryDate;
                          $state.go($state.current.parent + '-status-nomination', { feature: 'confirm-status-nomination' });
                      }
                  }, function (err) {

                      $rootScope.mainSpinner = false;
                      $rootScope.$broadcast('showMessage',
                        {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                  })

            };

            $scope.goBack = function () {

                $state.go($state.current.parent + '-status-nomination', { feature: 'apply-status-nomination' });
            };

            $scope.shouldRefreshBalance = false;
            $scope.msgModal = $('#message-modal');
            $scope.confirmModal = $('#status-nom-confirm-modal');
            $scope.successModal = $('#status-nom-success-modal');
            $scope.purchase = function () {

                $scope.confirmModal.modal();
            };
            $scope.confirmPurchase = function () {

                var comment = $scope.data.charge.comment;
                var payerId = $scope.data.charge.accSearchId;
                var beneficiaryId = $scope.data.charge.beneficiarySearchId;
                // 20181026 rwern REQ-0354
                var beneficiaryOrReason = $scope.data.charge.beneficiaryOrReason;
                var reason = $scope.data.charge.reason;
                // this param is only used in United Meeting
                var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                // 3 type, jet Stream 1, meeting 2
                var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                //console.log('agreementsIds', agreementsIds)
                //console.log('deduct', deduct);

                $rootScope.mainSpinner = true;
                //20170629 handle global service
                AmenityService.preDeductAccountBalanceForNomination(
                  payerId,
                  $scope.data.statusNomData.TotalCost,
                  $scope.data.statusNomData.NewCode,
                  $rootScope.currentUser.id,
                  agreementsIds,
                  deduct).then(function (value) {
                    //20170620 add pendingAmountObjId
                    //Shivani changes delete discounted properties from status nom data
                    if (value.success) {
                        delete $scope.data.statusNomData.discountedProduct;
                        delete $scope.data.statusNomData.mgsProduct;
                        delete $scope.data.statusNomData.minGuarLevel;
                        delete $scope.data.statusNomData.availableProductsInJan;
                        StatusNominationService.purchasePremierLevel(
                          $scope.data.statusNomData,
                          payerId,
                          beneficiaryId,
                          $scope.data.callerAccount.accountId,
                          comment,
                          $rootScope.currentUser.id,
                          $scope.data.statusNomData.TotalCost,
                          value.pendingAmountObjId,
                          beneficiaryOrReason,
                          reason,
                          agreementsIds,
                          deduct).then(function (value) {

                            $rootScope.mainSpinner = false;
                            if (value.success) {
                                $scope.confirmModal.modal('hide');
                                $scope.data.statusNomData.transactionNumber = value.transactionNumber;
                                //20170613 Use existing logic to show expiration date
                                $scope.newSuccessExpriDate = $scope.data.statusNomData.NewExpiryDate;
                                $scope.successModal.modal();
                            } else {
                                $scope.shouldRefreshBalance = true;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                    } else {
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: value.messages[0]
                          });
                    }
                }, function (err) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };
            $scope.msgModal.on('hidden.bs.modal', function (e) {

                if ($scope.shouldRefreshBalance) {
                    $scope.shouldRefreshBalance = false;
                    $rootScope.$broadcast('refreshSelectedAccount', {});
                }
            });
            angular.element('#status-nom-success-modal').on('hidden.bs.modal', function (e) {

                if ($scope.data.statusNomData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.statusNomData.transactionNumber
                    ).then(function () {

                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    }, function (err) {

                        console.debug(err);
                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    })
                }
                else {
                    $state.go($state.current.parent + '-home', { feature: 'init' });
                }
            });
        }
    })();
    (function () {
        'use strict';

        angular.module('portalModule')
          .controller('transactionLogController', controller);

        controller.$inject = ['$scope', '$rootScope', 'TransactionHistoryService', 'AccountService', '$state', 'TravelCertificateService', '$q', '$timeout', 'util', '$window', '$document', 'ts_name', 'ts_field'];

        function controller($scope, $rootScope, TransactionHistoryService, AccountService, $state,
                            TravelCertificateService, $q, $timeout, util, $window, $document, ts_name, ts_field) {

            $scope.listLimitTo = 500;
            $scope.accountList = [];
            $scope.txnRefNo = '';
            $scope.ts_name = ts_name;
            util.resetRootCurPermission();

            if (!$rootScope.defAcc) {
                $rootScope.defAcc = {
                    name: '',
                    id: '',
                    type: '',
                    extId: ''
                };
            }
            if (!$rootScope.txnAcc) {
                $rootScope.txnAcc = {
                    name: '',
                    id: '',
                    extId: ''
                };
            }

            // if (!$rootScope.txnAcc) {
            //   $rootScope.txnAcc = {
            //     name: $rootScope.currentUser.accName,
            //     id: $rootScope.currentUser.accId,
            //     extId: $rootScope.currentUser.accArcNumber
            //   };
            // }

            $scope.txtTxnAcc = '';
            $scope.isInPopup = false;
            $scope.showTxnAccPopup = false;
            $scope.pageSize = 15;
            $scope.debitMsg = '';

            $scope.specialLoad = $rootScope.currentUser.isInternalUser &&
              ($rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ||
                $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c);


            $scope.firstIntialFlag = true;
            $scope.getAccounts = function () {

                /*      if ($scope.specialLoad && $scope.txtTxnAcc == '') {
       return false;
       }*/

                var searchValue = '';
                if ($scope.specialLoad && $scope.txtTxnAcc.length >= 1) {
                    searchValue = $scope.txtTxnAcc;
                }

                $scope.accountList = [];
                $rootScope.mainSpinner = true;

                var type = $state.params.switch === 'summary' ? '{!$Label.Sip_Transaction_History_Summary}': '{!$Label.Sip_Transaction_History_Details}'
                //console.log('type',type)
                TransactionHistoryService.getAccountsForTransactionLog(
                  $rootScope.currentUser.id, '', searchValue, type
                ).then(function (value) {
                    if (value.Accounts.length === 0 && searchValue !== '') {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                          });
                    }
                    $rootScope.mainSpinner = false;
                    $scope.accountList = value.Accounts;


                }, function (err) {

                    console.debug(err);
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };
            $scope.getAccounts();

            $scope.$watch('summaryFilter.fromDate', function (newValue, oldValue, scope) {

                if ($scope.summaryFilter && $scope.summaryFilter.fromDate && $scope.summaryFilter.toDate) {

                    var from = new Date($scope.summaryFilter.fromDate);
                    var to = new Date($scope.summaryFilter.toDate);
                    if (from > to) {
                        $scope.summaryFilter.fromDate = oldValue;
                    }
                }
            }, true);
            $scope.$watch('summaryFilter.toDate', function (newValue, oldValue, scope) {

                if ($scope.summaryFilter && $scope.summaryFilter.fromDate && $scope.summaryFilter.toDate) {

                    var from = new Date($scope.summaryFilter.fromDate);
                    var to = new Date($scope.summaryFilter.toDate);
                    if (from > to) {
                        $scope.summaryFilter.toDate = oldValue;
                    }
                }
            }, true);
            $scope.$watch('debitFilter.fromDate', function (newValue, oldValue, scope) {

                if ($scope.debitFilter && $scope.debitFilter.fromDate && $scope.debitFilter.toDate) {

                    var from = new Date($scope.debitFilter.fromDate);
                    var to = new Date($scope.debitFilter.toDate);
                    if (from > to) {
                        $scope.debitFilter.fromDate = oldValue;
                    }
                }
            }, true);
            $scope.$watch('debitFilter.toDate', function (newValue, oldValue, scope) {

                if ($scope.debitFilter && $scope.debitFilter.fromDate && $scope.debitFilter.toDate) {

                    var from = new Date($scope.debitFilter.fromDate);
                    var to = new Date($scope.debitFilter.toDate);
                    if (from > to) {
                        $scope.debitFilter.toDate = oldValue;
                    }
                }
            }, true);

            Date.prototype.mmddyyyy = function () {

                var d = new Date(this),
                  month = '' + (d.getMonth() + 1),
                  day = '' + d.getDate(),
                  year = d.getFullYear();

                if (month.length < 2) month = '0' + month;
                if (day.length < 2) day = '0' + day;

                return [month, day, year].join('/');
            };

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                if (fromState.name !== 'transaction-log') {
                    $rootScope.defAcc = {
                        name: '',
                        id: '',
                        type: '',
                        extId: ''
                    };
                    $rootScope.txnAcc = {
                        name: '',
                        id: '',
                        extId: ''
                    };
                }
                $scope.switch = toParams.switch;
                $scope.exportType = 'PDF';
                $scope.loadData(true);
            });

            $scope.loadData = function (isRefreshFilter) {
                switch ($scope.switch) {

                    case 'summary':
                        $scope.summaryCSVUrl = '';
                        $scope.summary = null;

                        if (isRefreshFilter) {
                            $scope.resetSummaryFilter();
                        }
                        $scope.getSummary();
                        break;

                    case 'debits':
                        $scope.debitCSVUrl = '';
                        $scope.debits = null;

                        if (isRefreshFilter) {
                            $rootScope.mainSpinner = true;
                            TransactionHistoryService.getDebitFilterConfig(
                              $rootScope.currentUser.id,
                              $rootScope.txnAcc.id
                            ).then(function (value) {

                                $rootScope.mainSpinner = false;
                                $scope.debitsFilterConfig = value;
                                $scope.resetDebitFilter();
                                $scope.getDebit();
                                if ($scope.debitsFilterConfig.allPayerFunds && $scope.debitsFilterConfig.allPayerFunds.length >0 ) {
                                    //17528: Pawan :Changes : Start
                                	$scope.debitFilter.payerFund.payerFundName = $scope.debitsFilterConfig.allPayerFunds[0].payerFundName;
                                    $scope.debitFilter.payerFund.payerFundId = $scope.debitsFilterConfig.allPayerFunds[0].payerFundId;
                                    //17528: Pawan :Changes : End
                                }
                            }, function (err) {

                                $rootScope.mainSpinner = false;
                                console.debug(err);
                            });
                        }
                        else {
                            $scope.getDebit();
                        }
                        break;
                }
            };
            $scope.formatDate = function (date) {

                var result = '';
                if (date) {
                    var dateArray = date.split('/');
                    result = dateArray[2] + '-' + dateArray[0] + '-' + dateArray[1];
                }
                return result;
            };
            $scope.getDefaultDate = function () {

                var today = new Date();
                var start = new Date();
                var end = new Date();

                start.setFullYear(today.getFullYear(), today.getMonth() - 1, today.getDate());
                end.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());

                return {
                    from: start.mmddyyyy(),
                    to: end.mmddyyyy()
                }
            };

            $scope.resetSummaryFilter = function () {

                var defaultDate = $scope.getDefaultDate();
                // $('#input-summary-from-date').flatpickr().setDate(defaultDate.fromDate);
                // $('#input-summary-to-date').flatpickr().setDate(defaultDate.toDate);
                $scope.summaryFilter = {
                    fromDate: defaultDate.from,
                    toDate: defaultDate.to
                };
            };
            $scope.resetDebitFilter = function () {

                var defaultDate = $scope.getDefaultDate();
                $scope.debitFilter = {
                    fromDate: defaultDate.from,
                    toDate: defaultDate.to,
                    amenityType: '{!$Label.Sip_Common_All}',
                    payerFund: {
                        payerFundName: '',//17528: Pawan :Changes 
                        payerFundId: ''
                    },
                    executedBy: {
                        executedByName: '{!$Label.Sip_Common_All}',
                        executedById: ''
                    },
                    cost: '{!$Label.Sip_Common_All}',
                    orderField: 'date',
                    orderBy: 'desc',
                    recordsNumber: $scope.pageSize
                };
            };

            $scope.trackingtxnAccId = '';
            $scope.resetDebitSearch = function () {

                $rootScope.txnAcc.id = $scope.trackingtxnAccId;
                $scope.trackingtxnAccId = '';
                $scope.getDebit();
            };

            function getFilteredAccId (accId){
                var temp = $scope.accountList.filter(function (item) {
                    return item.Id === accId
                })
                //console.log('accId',accId)
                //console.log('$scope.accountList',$scope.accountList)
                //console.log('temp',temp)

                return temp.length > 0 ? temp[0].Id : $scope.accountList[0].Id
            }

            $scope.getSummary = function () {

                var req = {};
                if ($scope.summaryFilter.fromDate && $scope.summaryFilter.fromDate !== '') {
                    req.fromDate = $scope.formatDate($scope.summaryFilter.fromDate);
                }
                if ($scope.summaryFilter.toDate && $scope.summaryFilter.toDate !== '') {
                    req.toDate = $scope.formatDate($scope.summaryFilter.toDate);
                }

                $rootScope.mainSpinner = true;

                var AccIdOrgin = $rootScope.txnAcc.id;

                // todo
                var txnAccId;
                if ($rootScope.txnAcc.id) {
                    txnAccId = $rootScope.txnAcc.id
                } else {
                    txnAccId = $state.params.intialAccId
                }

                //console.log('intialAccId', txnAccId)
                TransactionHistoryService.getSummaryByFilter(
                  req,
                  $rootScope.currentUser.id,
                  txnAccId
                ).then(function (value) {
                    $rootScope.mainSpinner = false;
                    if (value) {
                        if (value.errorMessages) {
                            $rootScope.$broadcast('showMessage', {
                                type: 'alert',
                                text: value.errorMessages
                            });
                        } else {
                            $scope.summary = value;
                            if (!$rootScope.defAcc.name && !$rootScope.defAcc.id && !$rootScope.defAcc.extId && !$rootScope.defAcc.type) {
                                $rootScope.defAcc.name = $scope.summary.accountName;
                                $rootScope.defAcc.id = $scope.summary.accountId;
                                $rootScope.defAcc.extId = $scope.summary.accountExtId;
                                $rootScope.defAcc.type = $scope.summary.accountType;
                            }
                            $scope.accountSymbol = $scope.summary.accountType;
                            $rootScope.txnAcc.name = $scope.summary.accountName;
                            $rootScope.txnAcc.id = $scope.summary.accountId;
                            $rootScope.txnAcc.extId = $scope.summary.accountExtId;

                            var accId;
                            if ($rootScope.txnAcc.id) {
                                accId = $rootScope.txnAcc.id
                            } else {
                                accId = AccIdOrgin
                            }
                            accId =  getFilteredAccId(accId)


                            AccountService.getUserWithMeetingAcctPermissions(
                              $rootScope.currentUser.id,
                              accId
                            ).then(function (res) {
                                var permissions = res[0].userPermissionMap;
                                util.setRootCurPermission(permissions);
                                if (!$rootScope.currentPermission.SIP_Summary_Report__c) {
                                    $state.go('transaction-log', { switch: 'debits', intialAccId: AccIdOrgin });
                                }
                            })


                        }

                    }
                }, function (err) {

                    console.error(err);
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };
            $scope.getDebitByRefNo = function () {

                if ($scope.txnRefNo) {

                    if ($rootScope.txnAcc.id) {
                        $scope.trackingtxnAccId = $rootScope.txnAcc.id;
                    }

                    $scope.resetDebitFilter();
                    $rootScope.mainSpinner = true;
                    TransactionHistoryService.getDebitsByTransactionNumber(
                      $rootScope.currentUser.id,
                      $scope.txnRefNo
                    ).then(function (value) {

                        $rootScope.mainSpinner = false;
                        if (value) {
                            if (value.errorMessages) {
                                $rootScope.$broadcast('showMessage', {
                                    type: 'alert',
                                    text: value.errorMessages
                                });
                            } else {
                                $scope.debits = value;
                                _($scope.debits.transactionHistoryLineItems).forEach(function (debitItemList) {

                                    _(debitItemList).forEach(function (debitItem) {

                                        var dateAdded = new Date(debitItem.dateAdded);
                                        debitItem.formattedDateAdded = dateAdded.mmddyyyy();
                                    });
                                });
                                $scope.accountSymbol = $scope.debits.accountType;
                                $rootScope.txnAcc.name = $scope.debits.accountName;
                                $rootScope.txnAcc.id = $scope.debits.accountId;
                                $rootScope.txnAcc.extId = $scope.debits.accountExtId;

                                $scope.debits.page = $scope.debits.transactionHistoryLineItems[0];
                                $scope.debits.pageCount = $scope.debits.transactionHistoryLineItems.length;
                                $scope.debits.pageIndex = 1;

                                $('#detail-pagination').unbind();
                                $('#detail-pagination').createPage({
                                    pageCount: $scope.debits.pageCount,
                                    current: $scope.debits.pageIndex,
                                    backFn: function (p) {

                                        $scope.debits.pageIndex = p;
                                        $scope.debits.page = $scope.debits.transactionHistoryLineItems[p - 1];
                                        $scope.$apply();
                                    }
                                });
                            }
                        }
                    }, function (err) {

                        console.error(err);
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                }
            };
            $scope.getDebit = function () {
                var req = {
                    payerFund: {
                        payerFundName: $scope.debitFilter.payerFund.payerFundName === '{!$Label.Sip_Common_All}' ? '' :
                          $scope.debitFilter.payerFund.payerFundName,
                        payerFundId: $scope.debitFilter.payerFund.payerFundId
                    },
                    executedBy: {
                        executedByName: $scope.debitFilter.executedBy.executedByName === '{!$Label.Sip_Common_All}' ? '' :
                          $scope.debitFilter.executedBy.executedByName,
                        executedById: $scope.debitFilter.executedBy.executedById
                    },
                    amenityType: $scope.debitFilter.amenityType === '{!$Label.Sip_Common_All}' ? '' : $scope.debitFilter.amenityType,
                    cost: $scope.debitFilter.cost === '{!$Label.Sip_Common_All}' ? '' : $scope.debitFilter.cost,
                    orderField: $scope.debitFilter.orderField,
                    orderBy: $scope.debitFilter.orderBy,
                    recordsNumber: $scope.debitFilter.recordsNumber
                };
                if ($scope.debitFilter.fromDate && $scope.debitFilter.fromDate !== '') {
                    req.fromDate = $scope.formatDate($scope.debitFilter.fromDate);
                }
                if ($scope.debitFilter.toDate && $scope.debitFilter.toDate !== '') {
                    req.toDate = $scope.formatDate($scope.debitFilter.toDate);
                }

                $scope.txnRefNo = '';
                $rootScope.mainSpinner = true;
                // 2018-04-05 Req-0465 Shan add retrievePurpose as para
                var retrievePurpose = 'InitTransaction';


                // AccIdOrgin means selected account's id
                var AccIdOrgin = $rootScope.txnAcc.id;
                //console.log('getDebit--AccIdOrgin', AccIdOrgin)

                var txnAccId;
                if ($rootScope.txnAcc.id) {
                    txnAccId = $rootScope.txnAcc.id
                } else {
                    txnAccId = $state.params.intialAccId
                }
                //console.log('intialAccId', txnAccId)
                TransactionHistoryService.getDebitsByAccId(
                  req,
                  $rootScope.currentUser.id,
                  txnAccId,
                  retrievePurpose
                ).then(function (value) {

                    $rootScope.mainSpinner = false;
                    if (value) {
                        if (value.success) {

                            $scope.debitMsg = '';
                            if (value.errorMessages) {
                                $scope.debitMsg = value.errorMessages[0];
                            }
                            $scope.debits = value;

                            if (!$rootScope.defAcc.name && !$rootScope.defAcc.id && !$rootScope.defAcc.extId && !$rootScope.defAcc.type) {
                                $rootScope.defAcc.name = $scope.debits.accountName;
                                $rootScope.defAcc.id = $scope.debits.accountId;
                                $rootScope.defAcc.extId = $scope.debits.accountExtId;
                                $rootScope.defAcc.type = $scope.debits.accountType;
                            }

                            _($scope.debits.transactionHistoryLineItems).forEach(function (debitItemList) {

                                _(debitItemList).forEach(function (debitItem) {

                                    var dateAdded = new Date(debitItem.dateAdded);
                                    debitItem.formattedDateAdded = dateAdded.mmddyyyy();
                                });
                            });
                            $scope.accountSymbol = $scope.debits.accountType;
                            $rootScope.txnAcc.name = $scope.debits.accountName;
                            $rootScope.txnAcc.id = $scope.debits.accountId;
                            $rootScope.txnAcc.extId = $scope.debits.accountExtId;
                            $scope.debits.page = $scope.debits.transactionHistoryLineItems[0];
                            $scope.debits.pageCount = $scope.debits.transactionHistoryLineItems.length;
                            $scope.debits.pageIndex = 1;

                            $('#detail-pagination').unbind();
                            $('#detail-pagination').createPage({
                                pageCount: $scope.debits.pageCount,
                                current: $scope.debits.pageIndex,
                                backFn: function (p) {

                                    $scope.debits.pageIndex = p;
                                    $scope.debits.page = $scope.debits.transactionHistoryLineItems[p - 1];
                                    $scope.$apply();
                                }
                            });

                            var accId;
                            if ($rootScope.txnAcc.id) {
                                accId = $rootScope.txnAcc.id
                            } else {
                                accId = AccIdOrgin
                            }

                            accId =getFilteredAccId(accId)

                            AccountService.getUserWithMeetingAcctPermissions(
                              $rootScope.currentUser.id,
                              accId
                            ).then(function (res) {
                                var permissions = res[0].userPermissionMap;
                                util.setRootCurPermission(permissions);
                                if (!$rootScope.currentPermission.SIP_Banking_Transactional_Reports__c) {
                                    $state.go('transaction-log', { switch: 'summary', intialAccId: AccIdOrgin });
                                }
                            })

                        }
                        else if (value.errorMessages) {
                            $rootScope.$broadcast('showMessage', {
                                type: 'alert',
                                text: value.errorMessages
                            });
                        }
                    }
                }, function (err) {

                    console.error(err);
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };

            function setRootCurPermission(accId) {
                //console.log('$rootScope', $rootScope)
                AccountService.getUserWithMeetingAcctPermissions($rootScope.currentUser.id, accId)
                  .then(function (res) {
                      var permissions = res[0].userPermissionMap;
                      util.setRootCurPermission(permissions)
                  })
            }

            // $scope.findDefAccType = function () {
            //
            //   if ($scope.defAccId) {
            //     _.forEach($scope.accountList, function (acc) {
            //
            //       if (acc.Id === $scope.defAccId) {
            //         $scope.defAccType = acc.AccountType;
            //         return false;
            //       }
            //     });
            //   }
            // };



            $scope.sortDebit = function (column) {

                if ($scope.debitFilter.orderField === column) {
                    $scope.debitFilter.orderBy = $scope.debitFilter.orderBy === 'asc' ? 'desc' : 'asc';
                } else {
                    $scope.debitFilter.orderField = column;
                    $scope.debitFilter.orderBy = 'asc';
                }
                $scope.getDebit();
            };


            //dynamic table mapping for all waivers
            //Display is the field for table header
            //Key is the value field for matching service response; {key:value} (from getTransactionDetail())

            $scope.allWaiverTableCatag = [
                {
                    Category: ts_name.advancePurchase,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.qualifyingFare,
                        ts_field.requestFare,
                        ts_field.cityPair,
                        ts_field.CostDiff
                    ]
                },
                {
                    Category: ts_name.classConversion,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.marketingFlightNumber,
                        ts_field.originalBookingClass,
                        ts_field.newBookingClass,
                        ts_field.cityPair,
                        ts_field.Quantity,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.extendEticketValidity,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.fareMatch,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.matchedAirline,
                        ts_field.matchedFare,
                        ts_field.fareBasis,
                        ts_field.cityPair,
                        ts_field.Quantity,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.guaranteeAirfareMissedTicketing,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.originalFare,
                        ts_field.oldFareBasis,
                        ts_field.cityPair,
                        ts_field.Quantity,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.nameChange,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.oldName,
                        ts_field.newName,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.ticketValueTransfer,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.oldName,
                        ts_field.newName,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.nameCorrection,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.oldName,
                        ts_field.newName,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.offshoreCtoAgentError,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.descOfError,
                        ts_field.waiverType,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.offshoreCtoFees,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.reason,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.penaltyWaiverAndNameChange,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.oldName,
                        ts_field.newName,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.penaltyWaiverAndTicketValueTransfer,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.oldName,
                        ts_field.newName,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.refundDuplicateTicket,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.suspendedTicket,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.ticketRevalidation,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.timeStay,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.originalReturnDate,
                        ts_field.newReturnDate,
                        ts_field.Cost
                    ]
                },
                {
                    Category: ts_name.upgradeInventoryConversion,
                    Fields: [
                        ts_field.PassengerName,
                        ts_field.TicketNumber,
                        ts_field.WaiverFavorType,
                        ts_field.marketingFlightNumber,
                        ts_field.originalBookingClass,
                        ts_field.newBookingClass,
                        ts_field.cityPair,
                        ts_field.Quantity,
                        ts_field.Cost
                    ]
                },
                {   //For United Club Membership
                    Category: ts_name.unitedClubMembership,
                    Fields: [
                        ts_field.MileagePlusNumber,
                        ts_field.LastName,
                        ts_field.FirstName,
                        ts_field.CurrentTierLevel,
                        ts_field.CurrentExpiryDate,
                        ts_field.NewExpiryDate,
                        ts_field.NewEffectiveDate,
                        ts_field.TotalCost,
                        ts_field.Status,
                        ts_field.TransactionDate,
                        ts_field.TransactionTime,
                        ts_field.PayerFund,
                        ts_field.Beneficiary,
                        ts_field.TransactionComments,
                        ts_field.SubscriptionProductDescription
                    ]
                },
                {   //For Baggage Subscription
                    Category: ts_name.baggageSubscription,
                    Fields: [
                        ts_field.MileagePlusNumber,
                        ts_field.LastName,
                        ts_field.FirstName,
                        ts_field.CurrentTierLevel,
                        ts_field.CurrentExpiryDate,
                        ts_field.NewExpiryDate,
                        ts_field.NewEffectiveDate,
                        ts_field.TotalCost,
                        ts_field.Status,
                        ts_field.TransactionDate,
                        ts_field.TransactionTime,
                        ts_field.PayerFund,
                        ts_field.Beneficiary,
                        ts_field.TransactionComments,
                        ts_field.SubscriptionProductDescription
                    ]
                },
                {   //For Economy Plus Subscription
                    Category: ts_name.economyPlusSubscription,
                    Fields: [
                        ts_field.MileagePlusNumber,
                        ts_field.LastName,
                        ts_field.FirstName,
                        ts_field.CurrentTierLevel,
                        ts_field.CurrentExpiryDate,
                        ts_field.NewExpiryDate,
                        ts_field.NewEffectiveDate,
                        ts_field.TotalCost,
                        ts_field.Status,
                        ts_field.TransactionDate,
                        ts_field.TransactionTime,
                        ts_field.PayerFund,
                        ts_field.Beneficiary,
                        ts_field.TransactionComments,
                        ts_field.SubscriptionProductDescription
                    ]
                },
                {   //For United WIFI Subscription
                    Category: ts_name.unitedWIFISubscription,
                    Fields: [
                        ts_field.MileagePlusNumber,
                        ts_field.LastName,
                        ts_field.FirstName,
                        ts_field.CurrentTierLevel,
                        ts_field.CurrentExpiryDate,
                        ts_field.NewExpiryDate,
                        ts_field.NewEffectiveDate,
                        ts_field.TotalCost,
                        ts_field.Status,
                        ts_field.TransactionDate,
                        ts_field.TransactionTime,
                        ts_field.PayerFund,
                        ts_field.Beneficiary,
                        ts_field.TransactionComments,
                        ts_field.SubscriptionProductDescription
                    ]
                }
            ];
            $scope.detail = {};
            $scope.detailId = '';
            $scope.showDetail = function (transactionId) {
                $scope.showOther = false;
                $scope.detailId = transactionId;
                TransactionHistoryService.getTransactionDetail(
                  transactionId,
                  $rootScope.currentUser.id
                ).then(function (value) {

                    if (value.errorMessages) {

                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: value.errorMessages
                        });
                    } else {
                        $scope.detail = value;

                        //dynamic table header for all waiver
                        _.forEach($scope.allWaiverTableCatag, function (item) {
                            if (item.Category === $scope.detail.LayoutType) {
                                $scope.allWaiverTableLine = item.Fields;
                                return false;
                            }
                        });
                    }
                }, function (err) {

                    console.error(err);
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };

            $scope.showExport = function () {

                $scope.getFamilyReportUrl();
            };
            $scope.executeExport = function (buttonName) {

                if ($scope.exportType) {
                    switch ($scope.exportType) {
                        case 'PDF':
                            window.open($scope.getPDF(buttonName));
                            break;
                        case 'CSV':
                            $scope.getCSV(buttonName);
                            break;
                    }
                    $('#tl-export-modal').modal('hide');
                }
            };
            $scope.familySummaryReportUrl = '';
            $scope.familyDetailReportUrl = '';
            $scope.isAllowFamilyReport = false;
            $scope.getFamilyReportUrl = function () {

                $scope.familySummaryReportUrl = '';
                $scope.familyDetailReportUrl = '';
                $scope.isAllowFamilyReport = false;

                TransactionHistoryService.getFamilyReportUrl(
                  $rootScope.txnAcc.id,
                  $rootScope.currentUser.accId
                ).then(function (value) {

                    if (util.isSuccessService(value)) {
                        $scope.isAllowFamilyReport = value.isSameFamily;
                        $scope.familySummaryReportUrl = value.summaryUrl;
                        $scope.familyDetailReportUrl = value.detailUrl;
                        $('#tl-export-modal').modal();
                    }
                }, function (err) {

                    console.debug(err);
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };
            $scope.executeExportFamily = function () {


                if ($scope.familySummaryReportUrl && $scope.familyDetailReportUrl) {
                    switch ($scope.switch) {
                      /* original
                            case 'summary' :
                                window.open($scope.familySummaryReportUrl);
                                break;
                            case 'debits':
                                window.open($scope.familyDetailReportUrl);
                                break;
                        */
                      //rwern fix - make sure a window exposing the download URL isn't opened
                        case 'summary':
                            $window.location.href = $scope.familySummaryReportUrl + '&csv=1';
                            break;
                        case 'debits':
                            $window.location.href = $scope.familyDetailReportUrl + '&csv=1';
                            break;
                    }
                    $('#tl-export-modal').modal('hide');
                }
            };
            $scope.executeExportMembership = function () {

                var exportType;
                var filter = {};
                switch ($scope.switch) {
                    case 'summary':
                        //                        filter = $scope.summaryFilter;
                        filter = {
                            fromDate: $scope.formatDate($scope.summaryFilter.fromDate),
                            toDate: $scope.formatDate($scope.summaryFilter.toDate)
                        }
                        //20180517 add current user
                        exportType = TransactionHistoryService.getMembershipTransactionSummaryCSVUrl
                        break;
                    case 'debits':
                        //                        filter = $scope.debitFilter.toDate
                        filter = {
                            fromDate: $scope.formatDate($scope.debitFilter.fromDate),
                            toDate: $scope.formatDate($scope.debitFilter.toDate)
                        }
                        //20180517 add current user
                        exportType = TransactionHistoryService.getMembershipTransactionDetailCSVUrl
                        break;


                }

                //20180427 check return status
                exportType(filter, $rootScope.currentUser.id).then(function (data) {
                    if (data.success) {
                        window.open(data.result);
                        $('#tl-export-modal').modal('hide');
                    } else {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: data.messages[0]
                          });
                    }
                })
                //code here

                // if ($scope.familySummaryReportUrl && $scope.familyDetailReportUrl) {
                //     switch ($scope.switch) {
                //         case 'summary' :
                //             window.open($scope.familySummaryReportUrl);
                //             break;
                //         case 'debits':
                //             window.open($scope.familyDetailReportUrl);
                //             break;
                //     }

                // }
            };
            $scope.getPDF = function (buttonName) {
                var REPORT_TYPE;
                if (buttonName === 'membership') {
                    REPORT_TYPE = ['membershipsummary', 'membershipdetails'];
                } else {
                    REPORT_TYPE = ['summary', 'Details'];
                }

                $scope.debitsPDFUrl = '';
                $scope.summaryPDFUrl = '';

                var pdfUrl = '';
                switch ($scope.switch) {
                    case 'summary':
                        if ($scope.summaryFilter.fromDate) {
                            pdfUrl += '&fromDate=' + $scope.formatDate($scope.summaryFilter.fromDate);
                        }
                        if ($scope.summaryFilter.fromDate) {
                            pdfUrl += '&toDate=' + $scope.formatDate($scope.summaryFilter.toDate);
                        }
                        pdfUrl += '&reportType=' + REPORT_TYPE[0];
                        pdfUrl += '&userId=' + $rootScope.currentUser.id;
                        if ($rootScope.txnAcc.id) {
                            pdfUrl += '&accId=' + $rootScope.txnAcc.id;
                        }
                        // pdfUrl = encodeURIComponent(pdfUrl);
                        return "/Sip_TransactionSummaryPDF?" + pdfUrl.substr(1);

                    case 'debits':
                        if ($scope.debitFilter.fromDate) {
                            pdfUrl += '&fromDate=' + $scope.formatDate($scope.debitFilter.fromDate);
                        }
                        if ($scope.debitFilter.toDate) {
                            pdfUrl += '&toDate=' + $scope.formatDate($scope.debitFilter.toDate);
                        }
                        if ($scope.debitFilter.amenityType && $scope.debitFilter.amenityType !== '{!$Label.Sip_Common_All}') {
                            pdfUrl += '&amenityType=' + $scope.debitFilter.amenityType;
                        }
                        if ($scope.debitFilter.payerFund && $scope.debitFilter.payerFund.payerFundId) {
                            pdfUrl += '&payerFundId=' + $scope.debitFilter.payerFund.payerFundId;
                        }
                        if ($scope.debitFilter.executedBy && $scope.debitFilter.executedBy.executedById) {
                            pdfUrl += '&executedById=' + $scope.debitFilter.executedBy.executedById;
                        }
                        if ($scope.debitFilter.cost) {
                            pdfUrl += '&cost=' + $scope.debitFilter.cost;
                        }
                        if ($scope.debitFilter.orderBy) {
                            pdfUrl += '&orderBy=' + $scope.debitFilter.orderBy;
                        }
                        if ($scope.debitFilter.orderField) {
                            pdfUrl += '&orderField=' + $scope.debitFilter.orderField;
                        }
                        pdfUrl += '&reportType=' + REPORT_TYPE[1];
                        pdfUrl += '&userId=' + $rootScope.currentUser.id;
                        if ($rootScope.txnAcc.id) {
                            pdfUrl += '&accId=' + $rootScope.txnAcc.id;
                        }
                        if ($scope.txnRefNo) {
                            pdfUrl += '&tranNumber=' + $scope.txnRefNo;
                        }
                        // pdfUrl = encodeURIComponent(pdfUrl);
                        return "/Sip_TransactionHistoryAttachment?" + pdfUrl.substr(1);

                }
            };
            $scope.getCSV = function (buttonName) {
                if (buttonName === 'membership') {
                    $scope.executeExportMembership();

                    return;
                }


                var req;
                switch ($scope.switch) {
                    case 'summary':
                        req = {};
                        if ($scope.summaryFilter.fromDate && $scope.summaryFilter.fromDate !== '') {
                            req.fromDate = $scope.formatDate($scope.summaryFilter.fromDate);
                        }
                        if ($scope.summaryFilter.toDate && $scope.summaryFilter.toDate !== '') {
                            req.toDate = $scope.formatDate($scope.summaryFilter.toDate);
                        }

                        var summaryUrl = window.open('');
                        TransactionHistoryService.getTransactionSummaryCSVUrl(
                          req,
                          $rootScope.currentUser.id,
                          $rootScope.txnAcc.id
                        ).then(
                          function (value) {

                              if (value) {
                                  if (value.errorMessages) {
                                      $rootScope.$broadcast('showMessage', {
                                          type: 'alert',
                                          text: value.errorMessages
                                      });
                                  } else {
                                      summaryUrl.location = value;
                                  }
                              }
                          },
                          function (err) {

                              console.error(err);
                              $rootScope.mainSpinner = false;
                              $rootScope.$broadcast('showMessage', {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                          });
                        break;

                    case 'debits':
                        req = {
                            payerFund: {
                                payerFundName: $scope.debitFilter.payerFund.payerFundName === '{!$Label.Sip_Common_All}' ? '' :
                                  $scope.debitFilter.payerFund.payerFundName,
                                payerFundId: $scope.debitFilter.payerFund.payerFundId
                            },
                            executedBy: {
                                executedByName: $scope.debitFilter.executedBy.executedByName == '{!$Label.Sip_Common_All}' ? '' :
                                  $scope.debitFilter.executedBy.executedByName,
                                executedById: $scope.debitFilter.executedBy.executedById
                            },
                            amenityType: $scope.debitFilter.amenityType === '{!$Label.Sip_Common_All}' ? '' : $scope.debitFilter.amenityType,
                            cost: $scope.debitFilter.cost === '{!$Label.Sip_Common_All}' ? '' : $scope.debitFilter.cost,
                            orderField: $scope.debitFilter.orderField,
                            orderBy: $scope.debitFilter.orderBy,
                            recordsNumber: $scope.debitFilter.recordsNumber
                        };
                        if ($scope.debitFilter.fromDate && $scope.debitFilter.fromDate !== '') {
                            req.fromDate = $scope.formatDate($scope.debitFilter.fromDate);
                        }
                        if ($scope.debitFilter.toDate && $scope.debitFilter.toDate !== '') {
                            req.toDate = $scope.formatDate($scope.debitFilter.toDate);
                        }

                        var accId = '';
                        var txnRefNo = '';

                        if ($scope.txnRefNo) {
                            txnRefNo = $scope.txnRefNo;
                        }
                        else {
                            accId = $rootScope.txnAcc.id;
                        }

                        var debitUrl = window.open('');
                        TransactionHistoryService.getTransactionDebitCSVUrl(
                          req,
                          $rootScope.currentUser.id,
                          accId,
                          txnRefNo
                        ).then(
                          function (value) {

                              if (value) {
                                  if (value.errorMessages) {
                                      $rootScope.$broadcast('showMessage', {
                                          type: 'alert',
                                          text: value.errorMessages
                                      });
                                  } else {
                                      debitUrl.location = value;
                                  }
                              }
                          },
                          function (err) {

                              console.error(err);
                              $rootScope.$broadcast('showMessage', {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                          });

                        break;
                }
            };

            $scope.sendOtpEmail = function (email) {

                if (email) {
                    $rootScope.mainSpinner = true;
                    TransactionHistoryService.resendOTPEmail(
                      email,
                      $scope.detail.TransactionId,
                      $rootScope.currentUser.id
                    ).then(function (value) {

                        $rootScope.mainSpinner = false;
                        if (util.isSuccessService(value)) {
                            $scope.showOther = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'success',
                                  text: '{!JSENCODE($Label.Sip_Info_Email_Sent)}'
                              });

                            if ($scope.detailId) {
                                $scope.showDetail($scope.detailId);
                            }
                        }
                    }, function (err) {

                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    });
                }
            };
            $scope.sendTcEmail = function (otherEmailAddr) {

                $rootScope.mainSpinner = true;
                TransactionHistoryService.resendTravelCertEmail(
                  $scope.detail.TransactionId,
                  otherEmailAddr || ''
                ).then(function (value1) {

                    if (util.isSuccessService(value1)) {
                        var emailList = value1.vSACertificateEmail, promiseList = [];
                        for (var i = 0, len = emailList.length; i < len; i++) {
                            var promoCode = emailList[i].PromoID || ' ',
                              pin = emailList[i].PIN || ' ',
                              offCode = emailList[i].OfferCode || ' ',
                              credits = emailList[i].Credits || ' ',
                              effDate = emailList[i].EffTravelDate || ' ',
                              expDate = emailList[i].ExpRedmDate || ' ',
                              travelArea = value1.TravelArea || ' ',
                              bookingClass = value1.ServiceClass || ' ',
                              cabin = value1.CabinOfService || ' ',
                              orgName = value1.OrganizationName || '',
                              //20170612 Use new field IndividualName
                              travelName = value1.IndividualName || ' ',
                              //20170628 use ArcNumber
                              arcNum = value1.ArcNumber || ' ',
                              issueBy = value1.IssueByFullName || ' ',
                              authBy = value1.Authorizer || ' ';

                            var myEmailHtml = '<!DOCTYPE html><html><body>' +
                              '<div style="font-size:12px; width:800px; color:#000; text-align:center; margin-bottom:10px;"><a style="margin-right:5%;" href="#en-email-1">English</a><a style="margin-right:5%;" href="#es-email-1"><span>Español</span></a><a style="margin-right:5%;" href="#zh-email-1">中文(简体)</a><a style="margin-right:5%;" href="#ja-email-1">日本語</a><a style="margin-right:5%;" href="#pr-email-1">Português</a></div>' +
                              '<a name="en-email-1"></a><br/><div id="en-email-1" name="en-email-1"><div style="padding:5px; font-size:12px; width:100%; color:#000">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Electronic Certificate</h4>' +
                              '<div style="padding-left:10px; margin-top:10px"> Please note: This certificate is not a ticket</div>' +
                              '<div style="width:800px; margin: 10px 0 10px 3px; border-bottom:1px solid #000;border-top:1px solid #000;padding:10px;">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Certificate details</h4>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Promotion Code</th>' +
                              '<th>PIN</th>' +
                              '<th>Offer Code</th>' +
                              '<th>Credits</th>' +
                              '<th>Effective Travel Date</th>' +
                              '<th>Expiration Travel Date</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + promoCode + '</td>' +
                              '<td>' + pin + '</td>' +
                              '<td>' + offCode + '</td>' +
                              '<td>' + credits + '</td>' +
                              '<td>' + effDate + '</td>' +
                              '<td>' + expDate + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">' +
                              '<b>Travel Area 1: </b>' + travelArea + '</span>' +
                              '</div>' +
                              '<div><b>Travel Area 2: </b>' + travelArea + '</span></div>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Booking Class</th>' +
                              '<th>Cabin of Service</th>' +
                              '<th>Geographic Restrictions</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + bookingClass + '</td>' +
                              '<td>' + cabin + '</td>' +
                              '<td></td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">Note: Travel valid between Area 1and Area 2 unless noted otherwise in Geographic restrictions.</div>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Customer information</h4>' +
                              '<table align="center" style="margin:10px 0 10px 0;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Company / Organization</th>' +
                              '<th>Traveler Name</th>' +
                              '<th>ARC-IATA/UA Corp ID</th>' +
                              '<th>Issued By</th>' +
                              '<th>Authorized By</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + orgName + '</td>' +
                              '<td>' + travelName + '</td>' +
                              '<td>' + arcNum + '</td>' +
                              '<td>' + issueBy + '</td>' +
                              '<td>' + authBy + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '</div>' +
                              '<h4 style="font-weight: bold; margin-top:10px;">Reservation and Ticketing</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. On the united.com homepage, enter origin, destination, travel dates and any other search criteria. Select the “All search options” link</li>' +
                              '<li>2. Enter your promotion code, plus the PIN provided, in the “Promotions and certificates” field. Please do not include any spaces. Select the “Search” button</li>' +
                              '<li>3. In your search results, flights displaying “Special offer” are eligible for your discount. The price shown is the discounted price.</li>' +
                              '<li>4. Choose your seats and book your flights.</li>' +
                              '<li>5. For online certificate status and terms and conditions, go to united.com, select "Promotional programs and certificates" from the Deals and Offers dropdown menu, enter promotion code and PIN in the Offer Code box, and click "Submit".</li>' +
                              '<li>6. Reservations and ticketing must be done online at united.com or by calling United Reservations at 1-800-864-8331. A reservation may be held for 24 hours from the time of booking. If you choose to ticket by calling United Reservations, a Reservation Ticketing Service Fee will apply. Tickets are not permitted through airport ticketing or a travel agent.</li>' +
                              '<li>7. After ticket issuance, itinerary changes are permitted in the same booking class. Ticket reissues do not extend travel validity dates which need to be completed no later than expiration date listed in the certificate details.</li>' +
                              '<li>8. Refunds of wholly unused tickets/related taxes may be requested. Note that refunding makes the ticket null and void.</li>' +
                              '</ul>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold;">Term and conditions</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. This certificate is valid for the number of confirmed roundtrip ticket(s) as defined under credits in the authorization details. If issued for one-way travel, any unused portion will be forfeited.</li>' +
                              '<li>2. Offer valid only on flights operated by United or operated by other airlines and branded “United Express”. Otherwise, it is not valid on flights operated by other airlines, such as United-Marketed code share and Star Alliance flights.</li>' +
                              '<li>3. Itinerary must be a published fare routing.</li>' +
                              '<li>4. All travel must be completed by the expiration date listed under authorization details. Extension of the expiration date is not permitted under any circumstances.</li>' +
                              '<li>5. Open jaws are permitted.</li>' +
                              '<li>6. Stopovers and circle trip combinations are not permitted.</li>' +
                              '<li>7. Open tickets are not permitted.</li>' +
                              '<li>8. United reserves the right to limit the number of seats available for travel in conjunction with this offer.</li>' +
                              '<li>9. Customer is liable for all applicable taxes, fees and surcharges.</li>' +
                              '<li>10. MileagePlus miles will not be awarded.</li>' +
                              '<li>11. Space-available upgrade certificates may be used on day of departure provided all terms of the upgrade are met.  All MileagePlus upgrade types (including Regional and Global Premier Upgrades) are not permitted.  Purchased upgrades are permitted subject to availability.</li>' +
                              '<li>12. This certificate may not be used in conjunction with any other award, discount or offer. Customer will be required to provide positive identification.</li>' +
                              '<li>13. This offer is subject to any government approval and is invalid where prohibited by law.</li>' +
                              '<li>14. This certificate is nontransferable and is void if sold or exchanged for compensation. If this certificate is purchased, it is subject to confiscation and will not be accepted for travel.</li>' +
                              '<li>15. In the event of flight irregularity, alternate travel will be provided in the indicated class of service (subject to availability) only on United flights. United assumes no responsibility for any expenses, or tax liability in conjunction with the use of this offer and associated ticket(s) including, but not limited to expenses for accommodations, food or circumstances beyond the control of United.</li>' +
                              '<li>16. If you choose to ticket by calling United Reservations, please note that there will be a ReservationTicketing Service Fee.Please advise the agent that you will be using an electronic ER1181 authorization (reference: GG Promo EER). Be prepared to provide the agent the promotion code, certificate PIN, class and travel area application listed under the authorization details.</li>' +
                              '<li>17. Not eligible for denied boarding compensation.</li>' +
                              '<li>18. Should you need to reissue, refund or void a ticket after you’ve redeemed your PIN credit(s), you will not receive a redeposit of the redeemed PIN credit(s).</li>' +
                              '<li>19. United reserves the right to change the terms and conditions of this offer without prior notice.</li>' +
                              '<li>20. United’s Contract of Carriage will be applicable to all travel undertaken, hereby.</li>' +
                              '</ul>' +
                              '<div style="margin-top:10px;">Copyright © United Airlines, Inc. All rights reserved.</div>' +
                              '</div>' +

                              '<a name="es-email-1"></a><br/><div name="es-email-1"><div style="padding:5px; font-size:12px; width:100%; color:#000">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">CERTIFICADO ELECTRÓNICO</h4>' +
                              '<div style="padding-left:10px; margin-top:10px"> Tenga en cuenta lo siguiente: Este certificado no es un boleto</div>' +
                              '<div style="width:800px; margin: 10px 0 10px 3px; border-bottom:1px solid #000;border-top:1px solid #000;padding:10px;">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Detalles del certificado</h4>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Código de promoción</th>' +
                              '<th>PIN</th>' +
                              '<th>Código de oferta</th>' +
                              '<th>Créditos</th>' +
                              '<th>Fecha efectiva de viaje</th>' +
                              '<th>Fecha de vencimiento de viaje</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + promoCode + '</td>' +
                              '<td>' + pin + '</td>' +
                              '<td>' + offCode + '</td>' +
                              '<td>' + credits + '</td>' +
                              '<td>' + effDate + '</td>' +
                              '<td>' + expDate + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">' +
                              '<b>Área de viaje 1: </b>' + travelArea + '</span>' +
                              '</div>' +
                              '<div><b>Área de viaje 2: </b>' + travelArea + '</span></div>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Clase de reserva</th>' +
                              '<th>Cabina de servicio</th>' +
                              '<th>Restricciones geográficas</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + bookingClass + '</td>' +
                              '<td>' + cabin + '</td>' +
                              '<td></td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">Nota: Viaje válido entre Área 1 y Área 2, excepto que se indique otra cosa en las restricciones geográficas.</div>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold; text-transform:uppercase"> Información del pasajero</h4>' +
                              '<table align="center" style="margin:10px 0 10px 0;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Compañía/Organización</th>' +
                              '<th>Nombre del viajero</th>' +
                              '<th>Id. corp. de ARC-IATA/UA</th>' +
                              '<th>Emitido por</th>' +
                              '<th>Autorizado por</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + orgName + '</td>' +
                              '<td>' + travelName + '</td>' +
                              '<td>' + arcNum + '</td>' +
                              '<td>' + issueBy + '</td>' +
                              '<td>' + authBy + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '</div>' +
                              '<h4 style="font-weight: bold; margin-top:10px;">Reservación y emisión de boletos</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. En la página principal de united.com, ingrese origen, destino, fechas de viaje y cualquier otro criterio de búsqueda. Seleccione el enlace “Todas las opciones de búsqueda”.</li>' +
                              '<li>2. Ingrese su código de promoción, además del PIN provisto, en el campo “Promociones y certificados”. No incluya espacios. Seleccione el botón “Buscar”.</li>' +
                              '<li>3. En los resultados de la búsqueda, los vuelos que indican “Oferta especial” son elegibles para su descuento. El precio que se muestra es el precio con descuento.</li>' +
                              '<li>4. Seleccione sus asientos y reserve sus vuelos.</li>' +
                              '<li>5. Para ver el estatus del certificado en línea y los términos y condiciones, visite united.com, y seleccione "Programas promocionales y certificados" en el menú desplegable Ofertas y promociones, ingrese el código de promoción y el PIN en la casilla de Código de oferta y haga clic en "Enviar".</li>' +
                              '<li>6. Las reservas y la emisión de boletos deben realizarse en línea en united.com o por teléfono en United Reservations al 1-800-864-8331. Una reservación puede guardarse hasta 24 horas desde el momento de la reserva. Si selecciona emitir los boletos por teléfono con United Reservations, se cobrará una tarifa por servicio de emisión de boleto mediante Reservations. No se permite la emisión de boletos mediante un agente de viajes o en el aeropuerto.</li>' +
                              '<li>7. Después de la emisión del boleto, se permiten los cambios de itinerario en la misma clase de reserva. La reimpresión de boletos no extiende las fechas de validez de viaje que deben completarse antes de la fecha de caducidad indicada en los detalles del certificado.</li>' +
                              '<li>8. Pueden solicitarse reembolsos de boletos que no se usaron en su totalidad/impuestos relacionados. El reembolso anula el boleto.</li>' +
                              '</ul>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold;">Términos y condiciones</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. Este certificado es válido para la cantidad de boletos de viaje de ida y vuelta confirmados, según se define en los créditos en los detalles de la autorización. Si se emite para viaje sencillo, toda parte sin utilizar quedará inutilizada.</li>' +
                              '<li>2. La oferta es válida únicamente en vuelos operados por United u operados por otras aerolíneas bajo la marca “United Express”. De lo contrario, no es válida para usar en vuelos operados por otras aerolíneas, como los vuelos de código compartido comercializados por United y los vuelos de Star Alliance.</li>' +
                              '<li>3. El itinerario debe ser una ruta de tarifa publicada.</li>' +
                              '<li>4. Todos los viajes deben realizarse antes de la fecha de caducidad indicada en los detalles de autorización. No se permite la extensión de la fecha de caducidad bajo ninguna circunstancia.</li>' +
                              '<li>5. Se permiten viajes de circuitos abiertos.</li>' +
                              '<li>6. No se permiten las combinaciones de viajes circulares ni las escalas.</li>' +
                              '<li>7. No se permiten los boletos abiertos.</li>' +
                              '<li>8. United se reserva el derecho de limitar la cantidad de asientos disponibles para el viaje junto con esta oferta.</li>' +
                              '<li>9. El pasajero está sujeto a todos los impuestos, las tarifas y los sobrecargos correspondientes.</li>' +
                              '<li>10. No se otorgarán millas MileagePlus de premio.</li>' +
                              '<li>11. Los certificados de ascenso de clase disponibles según el espacio pueden usarse el día de la partida, siempre que todos los términos del ascenso de clase se cumplan. No está permitido ningún tipo de ascenso de clase de MileagePlus (incluidos los ascensos de clases Regional y Global Premier). Los ascensos de clases adquiridos se permiten en función de la disponibilidad.</li>' +
                              '<li>12. Este certificado no puede usarse junto con ningún otro premio, descuento u oferta. El cliente deberá proporcionar una identificación positiva.</li>' +
                              '<li>13. Esta oferta está sujeta a la aprobación del gobierno y no es válida donde esté prohibida por ley.</li>' +
                              '<li>14. Este certificado es intransferible y se anula si se vende o cambia por compensación. Si este certificado es comprado, está sujeto a confiscación y no se aceptará para viajar.</li>' +
                              '<li>15. En caso de irregularidades en el vuelo, se proporcionará un viaje alternativo en la clase de servicio indicada (sujeto a disponibilidad) solamente en vuelos de United. United no asume responsabilidad por ningún gasto ni responsabilidad impositiva junto con el uso de esta oferta y os boletos asociados, incluidos sin limitación, gastos por alojamiento, comidas o circunstancias más allá del control de United.</li>' +
                              '<li>16. Si selecciona emitir los boletos por teléfono con United Reservations, tenga en cuenta que se cobrará una tarifa por servicio de emisión de boleto mediante Reservations. Informe al agente que usará una autorización electrónica ER1181 (referencia: GG Promo EER). Esté preparado para proporcionarle al agente el código de promoción, el PIN del certificado, la clase y la aplicación de área de viaje indicada debajo de los detalles de la autorización.</li>' +
                              '<li>17. No es elegible para recibir compensación por negación de abordaje.</li>' +
                              '<li>18. En caso de necesitar una nueva emisión, un reembolso o anular un boleto después de haber canjeado el crédito de su PIN, no recibirá un redepósito de los créditos canjeados del PIN.</li>' +
                              '<li>19. United se reserva el derecho de cambiar los términos y condiciones de esta oferta sin aviso previo.</li>' +
                              '<li>20. Por el presente, el Contrato de transporte de United se aplica a todos los viajes realizados.</li>' +
                              '</ul>' +
                              '<div style="margin-top:10px;">Copyright © United Airlines, Inc. Todos los derechos reservados.</div>' +
                              '</div>' +
                              '<a name="zh-email-1"></a><br/><div id="zh-email-1" name="zh-email-1" style="padding:5px; font-size:12px; width:100%; color:#000">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">电子优惠券</h4>' +
                              '<div style="padding-left:10px; margin-top:10px"> 请注意：此优惠券并非机票 </div>' +
                              '<div style="width:800px; margin: 10px 0 10px 3px; border-bottom:1px solid #000;border-top:1px solid #000;padding:10px;">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase"> 优惠券详情</h4>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>促销代码</th>' +
                              '<th>个人识别号(PIN)</th>' +
                              '<th>优惠代码</th>' +
                              '<th>积分</th>' +
                              '<th> 生效旅行日期</th>' +
                              '<th>到期旅行日期</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + promoCode + '</td>' +
                              '<td>' + pin + '</td>' +
                              '<td>' + offCode + '</td>' +
                              '<td>' + credits + '</td>' +
                              '<td>' + effDate + '</td>' +
                              '<td>' + expDate + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">' +
                              '<b>旅行区域 1： </b>' + travelArea + '</span>' +
                              '</div>' +
                              '<div><b>旅行区域 2： </b>' + travelArea + '</span></div>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>预订舱位</th>' +
                              '<th>服务舱位</th>' +
                              '<th>地理限制</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + bookingClass + '</td>' +
                              '<td>' + cabin + '</td>' +
                              '<td></td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">注意：除非地理限制中另有规定，否则旅行有效区域为区域 1 和区域 2 之间。</div>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">乘客信息</h4>' +
                              '<table align="center" style="margin:10px 0 10px 0;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>公司／组织</th>' +
                              '<th>旅客姓名</th>' +
                              '<th>ARC-IATA/UA 企业 ID</th>' +
                              '<th>签发方</th>' +
                              '<th>授权方</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + orgName + '</td>' +
                              '<td>' + travelName + '</td>' +
                              '<td>' + arcNum + '</td>' +
                              '<td>' + issueBy + '</td>' +
                              '<td>' + authBy + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '</div>' +
                              '<h4 style="font-weight: bold; margin-top:10px;">预订和购票</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. 在 united.com 主页，输入出发地、目的地、旅行日期和任何其他搜索条件。选择“所有搜索选项”链接</li>' +
                              '<li>2. 在“促销和优惠券”字段中输入您的促销代码以及个人识别号码 (PIN)。请勿包含任何空格。选择“搜索”按钮</li>' +
                              '<li>3. 在您的搜索结果中，显示“特别优惠”的航班均可享受折扣。显示的价格为折扣价格。</li>' +
                              '<li>4. 选择座位并预订航班。</li>' +
                              '<li>5. 如欲了解在线优惠券状态以及条款和条件，请转到 united.com，从“优惠促销”下拉菜单中选择“促销计划 和优惠券”， 在“优惠代码”栏中输入促销代码和个人识别号码 (PIN)，然后点击“提交”。</li>' +
                              '<li>6. 预订和购票必须在 united.com 上在线完成或致电美联航预订处（电话为 1-800-864-8331）。预订可能延迟 24 小时才会处理。如果您选择致电美联航预订处购票，需支付预订购票服务费。机票不可通过机场票务处或旅行社购买。</li>' +
                              '<li>7. 机票签发后，允许在同一预订舱位中更改行程。机票重新签发不会延长旅行有效期，旅行需要在优惠券详情中所列的到期日期之前完成。</li>' +
                              '<li>8. 完全未使用的机票／相关税费可申请退款。请注意，退款后，机票 会失效。</li>' +
                              '</ul>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold;">条款和条件</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. 此优惠券可用于购买授权详情中积分下方所述数量的已确认往返机票。如果签发的是单程旅行，任何未使用的部分均作废。</li>' +
                              '<li>2. 优惠仅适用于美联航运营的航班或其他航空公司运营的带有“联航快运 (United Express)”品牌的航班。此外，优惠不适用于其他航空公司运营的航班，例如美联航销售的代码共享航班和星空联盟 (Star Alliance) 合作伙伴航班。</li>' +
                              '<li>3. 行程必须为已公布票价的航线。</li>' +
                              '<li>4. 所有旅行必须在授权详情下方所列的到期日期之前完成。在任何情况下，到期日期均不允许延长。</li>' +
                              '<li>5. 允许用于开口行程。</li>' +
                              '<li>6. 不允许用于中转和环程组合行程。</li>' +
                              '<li>7. 不允许用于开口机票。</li>' +
                              '<li>8. 对于使用此优惠的旅行，美联航保留限制其可提供座位数的权利。</li>' +
                              '<li>9. 乘客要承担所有适用税费、费用和手续费。</li>' +
                              '<li>10. 不奖励前程万里 (MileagePlus) 里程。</li>' +
                              '<li>11. 在有可用空间的情况下，升舱优惠券可在出发当天使用，前提是满足所有升舱条款。不适用所有前程万里 (MileagePlus) 升舱类型（包括地区和全球贵宾升舱）。可视机上空位情况允许已购买的升舱。</li>' +
                              '<li>12. 此优惠券不可与任何其他奖励、折扣或优惠同时使用。乘客将需要提供有效身份证明。</li>' +
                              '<li>13. 此项优惠需获得政府批准，在法律禁止的地区无效。</li>' +
                              '<li>14. 此优惠券不可转让，出售或换取补偿后即失效。如果此优惠券是购买所得,则予以没收，且无法用于旅行。</li>' +
                              '<li>15. 如果出现航班异常，将仅提供美联航航班 票面舱位（视可用情况而定的替代旅行。美联航不负责因使用此项优惠以及相关机票而产生的任何费或税务包括但不限于住宿费、餐饮费或者美联航不可控情况下产生的费用。</li>' +
                              '<li>16. 请注意，如果您选择致电美联航预订处购票，需支付预订购票服务费。请告知代理您将使用电子 ER1181 授权（参考号：GG Promo EER）。请准备好向代理提供授权详情下方所列的促销代码、优惠券个人识别号码 (PIN)、舱位和旅行区域申请。</li>' +
                              '<li>17. 无资格享受拒绝登机补偿。</li>' +
                              '<li>18. 如果您在兑换个人识别号码 (PIN) 积分后需要重新签发、退款或取消机票，则无法重新累积已兑换的 PIN 积分。</li>' +
                              '<li>19. 美联航保留更改此项优惠的条款和条件的权利，恕不提前通知。</li>' +
                              '<li>20. 美联航的《承运合同》适用于以此方式承运的所有旅行。</li>' +
                              '</ul>' +
                              '<div style="margin-top:10px;">Copyright © United Airlines, Inc. 保留所有权利。</div>' +
                              '</div>' +
                              '<a name="ja-email-1"></a><br/><div id="ja-email-1" name="ja-email-1"><div style="padding:5px; font-size:12px; width:100%; color:#000">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Eサーティフィケート</h4>' +
                              '<div style="padding-left:10px; margin-top:10px"> ご注意：このサーティフィケートは航空券ではありません </div>' +
                              '<div style="width:800px; margin: 10px 0 10px 3px; border-bottom:1px solid #000;border-top:1px solid #000;padding:10px;">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">サーティフィケートの詳細</h4>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>プロモーションコード</th>' +
                              '<th> PIN番号</th>' +
                              '<th>キャンペーンコード</th>' +
                              '<th>クレジット</th>' +
                              '<th>有効な旅行日</th>' +
                              '<th>ご旅行の有効期限</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + promoCode + '</td>' +
                              '<td>' + pin + '</td>' +
                              '<td>' + offCode + '</td>' +
                              '<td>' + credits + '</td>' +
                              '<td>' + effDate + '</td>' +
                              '<td>' + expDate + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">' +
                              '<b>旅行地域1： </b>' + travelArea + '</span>' +
                              '</div>' +
                              '<div><b>旅行地域2： </b>' + travelArea + '</span></div>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>ご予約クラス</th>' +
                              '<th>客室クラス</th>' +
                              '<th>地理的な制限事項</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + bookingClass + '</td>' +
                              '<td>' + cabin + '</td>' +
                              '<td></td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">注: 地理的な制限事項に特に明記のない限り、エリア1とエリア2間のご旅行が対象です。</div>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">お客様情報</h4>' +
                              '<table align="center" style="margin:10px 0 10px 0;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>会社／組織</th>' +
                              '<th>旅行者名</th>' +
                              '<th>ARC-IATA／UAコーポレートID</th>' +
                              '<th>発行者</th>' +
                              '<th>承認者</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + orgName + '</td>' +
                              '<td>' + travelName + '</td>' +
                              '<td>' + arcNum + '</td>' +
                              '<td>' + issueBy + '</td>' +
                              '<td>' + authBy + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '</div>' +
                              '<h4 style="font-weight: bold; margin-top:10px;">ご予約および発券</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. united.comのホームページで出発地、目的地、旅行日程、その他の検索条件を入力します。「全検索オプション」リンクを選択します</li>' +
                              '<li>2. 「プロモーションおよびサーティフィケート」欄にプロモーションコードおよび付与されたPIN番号を入力します。スペースは含めないでください。「検索」ボタンを選択します</li>' +
                              '<li>3. 検索結果で「特別キャンペーン」と表示されているフライトが割引の対象となります。表示されている金額は割引後の料金です。</li>' +
                              '<li>4. 座席を指定してフライトを予約してください。</li>' +
                              '<li>5. オンラインサーティフィケートの状況および適用条件についてunited.comで「キャンペーン」ドロップダウンメニューから「プロモーションプログラムおよびサーティフィケート」を選択し 「キャンペーンコード」ボックスにプロモーションコードとPIN番号を入力して「送信」をクリックしてください。</li>' +
                              '<li>6. unted.comからオンラインで、またはユナイテッド予約センター (1-800-864-8331) へのお電話で、予約および発券する必要があります。ご予約いただいた内容は、ご予約時から24時間保持されます。ユナイテッド予約センターへのお電話で発券する場合は、ご予約発券サービス手数料がかかります。空港の発券カウンターまたは旅行代理店でご購入の航空券は対象外となります。</li>' +
                              '<li>7. 航空券の発券後は、同じ予約クラスであれば旅程を変更できます。航空券の再発行によりご旅行の有効期限が延長されることはありません。サーティフィケートの詳細に記載された有効期限までにご旅行を完了する必要があります。</li>' +
                              '<li>8. 完全に未使用の航空券／関連する税金の払い戻しを申請できます。払い戻した航空券は無効となりますので ご注意ください。</li>' +
                              '</ul>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold;">ご利用規約</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. このサーティフィケートは、認証の詳細のクレジットに規定された枚数の確定済み往復航空券に有効です。片道用に発行された場合、未使用部分は無効となります。</li>' +
                              '<li>2. このキャンペーンは、ユナイテッド、または「ユナイテッド・エクスプレス」ブランドのその他の航空会社が運航するフライトでのご旅行に限り有効です。他の航空会社が運航するフライト（ユナイテッド航空が販売するコードシェア便やスターアライアンス便など）は対象外となります。</li>' +
                              '<li>3. 公示運賃ルートのご旅程が対象となります。</li>' +
                              '<li>4. 認証の詳細に記載されている有効期限までにご旅行を完了する必要があります。いかなる場合も有効期限は延長できません。</li>' +
                              '<li>5. オープンジョーは対象となります。</li>' +
                              '<li>6. ストップオーバーとサークルトリップの組み合わせは対象外となります。</li>' +
                              '<li>7. オープンチケットは対象外となります。</li>' +
                              '<li>8. ユナイテッド航空はこのキャンペーンをご利用いただける座席数を制限する権利を有します。</li>' +
                              '<li>9. お客様には税金や手数料等のお支払いをお願いいたします。</li>' +
                              '<li>10. マイレージプラスマイルは付与されません。</li>' +
                              '<li>11. 空席に応じてご利用いただけるアップグレードサーティフィケートは、ご出発日にアップグレードの全要件を満たした場合に利用可能となります。マイレージプラスのアップグレード（リージョナル・プレミアアップグレードおよびグローバル・プレミアアップグレードを含む）はすべてご利用いただけません。購入されたアップグレードは空席状況によりご利用いただけます。</li>' +
                              '<li>12. このサーティフィケートはその他の特典、割引、キャンペーンと併用できません。お客様は、身分証明書をご提示いただく必要があります。</li>' +
                              '<li>13. このキャンペーンは政府の承認が必要であり、法律で禁止されている地域では無効となります。</li>' +
                              '<li>14. このサーティフィケートは第三者に譲渡できません。また、売却や対価と引き換えの移譲が行われた場合は無効となります。他者から購入したサーティフィケートは 没収の対象となり、旅行に適用することはできません。</li>' +
                              '<li>15. フライトが予定通りに運航されない場合の代替便は、ユナイテッド便のみとします。 また、空席状況によっては、指定のご利用クラスをご用意 きない場合があります。ユナイテッド航空は、このキャンペーンとその関連 空券の使用により生じる費用や税金の 支払い義務を負いません。 これには宿泊施設、食事、ユナイテッド航空の管理外の状況などによる費用を含すが、これらに限定されません。</li>' +
                              '<li>16. ユナイテッド予約センターへのお電話で発券する場合は、ご予約発券サービス手数料がかかりますのでご注意ください。担当者に、ER1181電子認証（リファレンス番号：GG Promo EER）をお使いになる旨をお知らせください。プロモーションコード、サーティフィケートのPIN番号、適用クラスと旅行地域（認証の詳細に記載されています）を代理店にご提示いただきますので、 これらをご準備ください。</li>' +
                              '<li>17. 搭乗を拒否された場合の補償の対象外となります。</li>' +
                              '<li>18. PINクレジットの利用後に航空券を再発券、払い戻し、または取り消しした場合、使用したPINクレジットは返還されません。</li>' +
                              '<li>19. ユナイテッド航空は、このキャンペーンのご利用規約を予告なく変更する権利を有します。</li>' +
                              '<li>20. 本規定の対象となるすべてのご旅行にユナイテッド航空の運送約款が適用されます。</li>' +
                              '</ul>' +
                              '<div style="margin-top:10px;">Copyright © United Airlines, Inc. 全著作権所有。</div>' +
                              '</div>' +

                              '<a name="pr-email-1"></a><br/><div id="pr-email-1" name="pr-email-1"><div style="padding:5px; font-size:12px; width:100%; color:#000">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">CERTIFICADO ELETRÔNICO</h4>' +
                              '<div style="padding-left:10px; margin-top:10px"> Observação: Este certificado não é uma passagem </div>' +
                              '<div style="width:800px; margin: 10px 0 10px 3px; border-bottom:1px solid #000;border-top:1px solid #000;padding:10px;">' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Informações do certificado</h4>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Código promocional</th>' +
                              '<th>PIN</th>' +
                              '<th>Código da oferta</th>' +
                              '<th>Créditos</th>' +
                              '<th>Data da viagem em vigor</th>' +
                              '<th>Data da viagem expirada</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + promoCode + '</td>' +
                              '<td>' + pin + '</td>' +
                              '<td>' + offCode + '</td>' +
                              '<td>' + credits + '</td>' +
                              '<td>' + effDate + '</td>' +
                              '<td>' + expDate + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">' +
                              '<b>Área de viagem 1: </b>' + travelArea + '</span>' +
                              '</div>' +
                              '<div><b>Área de viagem 2: </b>' + travelArea + '</span></div>' +
                              '<table align="center" style="margin-top:10px;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Classe de reserva</th>' +
                              '<th>Cabine de serviço</th>' +
                              '<th>Restrições geográficas</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + bookingClass + '</td>' +
                              '<td>' + cabin + '</td>' +
                              '<td></td>' +
                              '</tr>' +
                              '</table>' +
                              '<div style="margin-top:10px;">Observação: Viagem válida entre a área 1 e a área 2, a menos que indicado de outro modo nas restrições geográficas.</div>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold; text-transform:uppercase">Informações do cliente</h4>' +
                              '<table align="center" style="margin:10px 0 10px 0;width:100%; text-align:center;">' +
                              '<tr style="text-decoration:underline; font-weight:bold;">' +
                              '<th>Empresa/organização</th>' +
                              '<th>Nome do passageiro</th>' +
                              '<th>ID corporativo UA/ARC-IATA</th>' +
                              '<th>Emitido por</th>' +
                              '<th>Autorizado por</th>' +
                              '</tr>' +
                              '<tr>' +
                              '<td>' + orgName + '</td>' +
                              '<td>' + travelName + '</td>' +
                              '<td>' + arcNum + '</td>' +
                              '<td>' + issueBy + '</td>' +
                              '<td>' + authBy + '</td>' +
                              '</tr>' +
                              '</table>' +
                              '</div>' +
                              '<h4 style="font-weight: bold; margin-top:10px;">Reserva e emissão de passagem</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. Na página inicial da united.com, insira a origem, o destino, as datas da viagem e qualquer outro critério de pesquisa. Selecione o link "Todas as opções de pesquisa"</li>' +
                              '<li>2. Insira o código promocional e o PIN fornecido no campo "Promoções e certificados". Não inclua espaços. Selecione o botão "Pesquisar"</li>' +
                              '<li>3. Em seus resultados de pesquisa, os voos que apresentarem "Oferta especial" serão qualificados para o desconto. O preço exibido é o preço com desconto.</li>' +
                              '<li>4. Selecione seus assentos e reserve seus voos.</li>' +
                              '<li>5. Para consultar o status do certificado on-line e os termos e condições, acesse o site united.com e selecione "Programas promocionais e certificados" no menu suspenso Ofertas, insira o código promocional e o PIN na caixa Código da oferta e clique em "Enviar".</li>' +
                              '<li>6. As reservas e a emissão de passagens devem ser realizadas on-line pelo site united.com ou ligando para a Central de Reservas da United pelo número 1-800-864-8331. A reserva pode ser mantida por até 24 horas. Se você optar por obter uma passagem ligando para a Central de Reservas da United, esteja ciente de que haverá uma taxa pelo serviço de emissão da passagem. Não é permitido emitir passagens por meio de um serviço de emissão de passagens do aeroporto ou agente de viagens.</li>' +
                              '<li>7. Após a emissão da passagem, as mudanças de itinerário só serão permitidas na mesma classe de reserva. As reemissões de passagem não prolongam as datas de validade da viagem, que precisam ser realizadas até a data de expiração listada nas informações do certificado.</li>' +
                              '<li>8. É possível que sejam solicitados os reembolsos de passagens completamente não utilizadas/impostos relacionados. Observe que o reembolso anula e invalida a passagem.</li>' +
                              '</ul>' +
                              '<div style="width:100%; height:20px; border-bottom:1px solid #000; margin-bottom:20px;"></div>' +
                              '<h4 style="font-weight: bold;">Termos e condições</h4>' +
                              '<ul style="margin:10px 5px 0 0;width:800px; list-style-type:none;">' +
                              '<li>1. Este certificado é válido pelo número de passagens de ida e volta confirmadas, conforme definido nos créditos das informações da autorização. Se ele for emitido para um trecho da viagem, qualquer parte não utilizada será perdida.</li>' +
                              '<li>2. Oferta válida somente para voos operados pela United ou por outras companhias aéreas e com a marca "United Express". De outro modo, ela não será válida para voos operados por outras companhias aéreas, como código partilhado comercializado pela United e voos da Star Alliance.</li>' +
                              '<li> 3. O itinerário deve ser uma rota de tarifa publicada.</li>' +
                              '<li>4. Toda a viagem deve ser realizada dentro da data de vencimento listada nas informações da autorização. Não será permitida uma extensão da data de vencimento sob hipótese alguma.</li>' +
                              '<li>5. São permitidas passagens do tipo "aberta" (open jaw).</li>' +
                              '<li>6. Combinações de escala e viagem circular (circle trip) não são permitidas.</li>' +
                              '<li>7. Passagens abertas não são permitidas.</li>' +
                              '<li>8. A United reserva-se o direito de limitar o número de assentos disponíveis para viagens associadas a esta oferta.</li>' +
                              '<li>9. O cliente é responsável por todos os impostos, tarifas e sobretaxas aplicáveis.</li>' +
                              '<li>10. Não serão concedidas milhas MileagePlus.</li>' +
                              '<li>11. Os certificados de upgrade com espaço disponível podem ser usados no dia da partida, desde que todos os termos do upgrade sejam cumpridos. Não é permitido nenhum tipo de upgrade MileagePlus (inclusive Upgrades Regionais e Globais Premier). Upgrades comprados são permitidos segundo a disponibilidade.</li>' +
                              '<li>12. Este certificado não pode ser usado em conjunto com nenhum outro prêmio, desconto ou oferta. O cliente deverá fornecer uma identificação positiva.</li>' +
                              '<li>13. Esta oferta está sujeita a qualquer aprovação do governo e é inválida nos locais onde é proibida por lei.</li>' +
                              '<li>14. Este certificado é intransferível e será anulado em caso de venda ou troca por compensação. Se este certificado for comprado, ele estará sujeito ao confisco e não será aceito para viagens.</li>' +
                              '<li>15. Em caso de irregularidade no voo, uma viagem alternativa será oferecida na classe de serviço indicada (sujeito a disponibilidade) somente e voos da United. A United não assume responsabilidade por qualquer despesa ou obrigação com impostos em conjunto com o uso desta oferta e passagem(ns) associada(s), incluindo, entre outros, despesas d acomodações, alimentação ou circunstâncias fora do controle da United.</li>' +
                              '<li>16. Se você optar por obter uma passagem ligando para a Central de Reservas da United, esteja ciente de que haverá uma taxa de serviço para a emissão da passagem reservada. Informe o agente que você usará uma autorização eletrônica ER1181 (referência: GG Promo EER). Esteja preparadopara fornecer ao agente o código promocional, o PIN do certificado, a classe e o pedido da área da viagem listado nas informações da autorização.</li>' +
                              '<li>17. Não qualificado para compensação de embarque negado.</li>' +
                              '<li>18. Caso você precise reemitir, reembolsar ou anular uma passagem depois de resgatar seus créditos de PIN, você nãoreceberá um novo depósito dos créditos de PIN resgatados.</li>' +
                              '<li>19. A United reserva-se o direito de modificar os termos e condições desta oferta sem aviso prévio.</li>' +
                              '<li>20. O Contrato de Transporte da United será aplicável a todas as viagens realizadas por meio deste.</li>' +
                              '</ul>' +
                              '<div style="margin-top:10px;">Copyright © United Airlines, Inc. Todos os direitos reservados.</div>' +
                              '</div>' +
                              '</body></html>';


                            //20170628 add transaction number
                            promiseList.push(TravelCertificateService.sendTravelCertEmails(myEmailHtml, value1.RecipientEmail, $rootScope.currentUser.id, $scope.detail.TransactionId))
                        }

                        $q.all(promiseList).then(function (value2) {
                            /* REQ-0581 */
                            $rootScope.mainSpinner = false;
                            var failureItem = [];
                            var failureMessage = '';
                            for (var j = 0, len = value2.length; j < len; j++) {
                                if (!value2[j].success) {
                                    failureItem.push(value2);
                                }
                            }
                            if (failureItem.length > 0) {
                                failureMessage = '{!JSENCODE($Label.CSL_ERR_20003_01_10036_B)}';
                                $rootScope.$broadcast('showMessage', {
                                    type: 'alert',
                                    text: failureMessage
                                });
                            } else {
                                $scope.showOther = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'success',
                                      text: '{!JSENCODE($Label.Sip_Info_Email_Sent)}'
                                  });

                                if ($scope.detailId) {
                                    $scope.showDetail($scope.detailId);
                                }
                            }
                            /* /REQ-0581 */
                        }, function () {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                              });
                        });
                    }
                }, function (err) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                      });
                });
            };

            $scope.txtKeyup = function ($event) {

                var txt = $event.target;
                switch ($event.keyCode) {
                    case 13: // enter key trigger search

                        if (txt.id === 'txt-ref-no') {
                            $scope.getDebitByRefNo();
                        }
                        else {
                            if ($scope.specialLoad) {
                                $scope.getAccounts();
                            }
                        }
                        break;
                }
            };
            $scope.searchByExtId = function () {
                if ($scope.specialLoad) {
                    $scope.getAccounts();
                }
            };
            $scope.selectTxnAcc = function (name, id, extId, accountType) {
                $scope.accountSymbol = accountType;
                $scope.txtTxnAcc = '';
                $scope.showFilter = false;
                $rootScope.txnAcc.name = name;
                $rootScope.txnAcc.id = id;
                $rootScope.txnAcc.extId = extId;
                $scope.showTxnAccPopup = false;
                $scope.loadData(true);
            };
            $scope.hideAcc = function () {

                $timeout(function () {

                    if (!$scope.isInPopup && $rootScope.mainSpinner === false) {
                        $scope.showTxnAccPopup = false;
                    }
                }, 500);
            };

            $scope.accFilter = function (item) {

                var result = true;
                if ($rootScope.txnAcc.id && item.Id === $rootScope.txnAcc.id) {
                    result = false;
                }
                else if ($rootScope.defAcc.id && item.Id === $rootScope.defAcc.id) {
                    result = false;
                }
                else if ($scope.txtTxnAcc) {
                    if ((_.toLower(item.Name)).indexOf((_.toLower($scope.txtTxnAcc))) >= 0 ||
                      (item.ExtId && item.ExtId.indexOf($scope.txtTxnAcc)) >= 0) {
                        result = true;
                    }
                    else {
                        result = false;
                    }
                }
                return result;
            };

            $scope.showOtherFunction = function () {
                if (!$rootScope.IsImpersonation) {
                    $scope.showOther = true;
                }
            };

            $scope.viewEmailHistory = function () {

                $('#tl-email-history-modal').modal();
            };
            $scope.getDisplayTimeString = function (value) {

                var result = '';
                if (value) {

                    var part = value.split(':');
                    var ampm = 'AM';
                    var h = part[0];
                    var m = part[1];
                    var s = part[2];

                    if (h > 12) {
                        ampm = 'PM';
                        h = h - 12;
                    }

                    result = h + ':' + m + ' ' + ampm;
                }

                return result;
            };

            $document.on('scroll', function () {

                if ($scope.switch === 'debits') {
                    var scrollPosition = 0;
                    if ($window.scrollY || document.documentElement.scrollTop) {
                        scrollPosition = ($window.scrollY || document.documentElement.scrollTop);
                    }

                    if ($('.debit-table').length > 0) {
                        if (scrollPosition > 0) {
                            if (scrollPosition > $('.debit-table').position().top + 81) {
                                if (!$('.debit-table .table-header').hasClass('static')) {
                                    $('.debit-table .table-header').addClass('static');
                                    $('.debit-table .table-header').css('width', $('.debit-table').width() + 'px');
                                }
                            }
                            else {
                                if ($('.debit-table .table-header').hasClass('static')) {
                                    $('.debit-table .table-header').removeClass('static');
                                    $('.debit-table .table-header').css('width', 'auto');
                                }
                            }
                        }
                    }
                }
            });

            $(window).on('resize', function (e) {

                if ($('.debit-table').length > 0) {
                    if ($('.debit-table .table-header').hasClass('static')) {
                        $('.debit-table .table-header').css('width', $('.debit-table').width() + 'px');
                    }
                }
            });

            $scope.getAccClass = util.getAccClass;
            $scope.getAccSymbol = util.getAccSymbol;
            $scope.getAccTitle = util.getAccTitle;
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('travelCertificateControl', controller);

        controller.$inject = ['$rootScope', '$scope', '$state', '$interval',
            'TravelCertificateService', '$q', 'CMSService', '$timeout', 'AmenityService'];

        function controller($rootScope, $scope, $state, $interval,
                            TravelCertificateService, $q, CMSService, $timeout, AmenityService) {

            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: 'SIP_Travel_Certificates__c'
            };
            //20181210 rwern STY-01262
            $scope.bookingClassList = [];
            $scope.creditNumber = 0;
            $scope.totalCreditNum = 0;
            $scope.infoData = [];
            $scope.budgetKey = '';
            $scope.hasBudgeKey = true;
            $scope.emailErrorMessage = '';
            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;

                if ($scope.data.widgetFeature === 'apply-travel-certificate') {
                    //keep the value when return back
                    $scope.data.charge.chargeAmount = '';
                    if ($scope.data.travelCertificateData) {
                        if ($scope.data.travelCertificateData.infoData.length !== 0) {
                            $scope.infoData = $scope.data.travelCertificateData.infoData;
                            $scope.totalCreditNum = $scope.data.travelCertificateData.totalCreditNum;
                            $scope.nextStep(3);
                        }
                    }

                    if (!$scope.countryList) {
                        //get country list
                        CMSService.getCountryList().then(function (val) {

                            var list = val;
                            for (var i = 0, len = list.length - 1; i < len; i++) {
                                if (list[i].value === 'U.S.A.') {
                                    list.splice(i, 1);
                                }
                            }
                            list.unshift({
                                disabled: false,
                                value: 'USA',
                                label: 'USA'
                            });
                            $scope.countryList = list;

                            if ($scope.recipientForm && $scope.recipientForm.country) {
                                $timeout(function () {
                                    $scope.recipientForm.country.$validate();
                                }, 1000);
                            }
                        });
                    }
                } else if ($scope.data.widgetFeature === 'confirm-travel-certificate') {
                    $scope.data.charge.chargeAmount = $scope.data.travelCertificateData.totalCreditNum * $scope.data.travelCertificateData.costPerCredit;
                }
            });

            $scope.activePanel = 1;
            $scope.activeMiniPanel1 = false;
            $scope.activeMiniPanel2 = false;
            $scope.isModifyEntityBookingClass = false;

            //click next and back between steps
            $scope.nextStep = function (step) {
                switch (step) {
                    case 1:
                        $scope.isModifyEntityBookingClass = false;
                        $scope.activePanel = 1;
                        $scope.activeMiniPanel1 = false;
                        $scope.activeMiniPanel2 = false;
                        break;
                    case 2:
                        if ($scope.isModifyEntityBookingClass && $scope.infoData.length > 0) {
                            angular.element('#travel-certificate-clear-modal').modal();
                        } else {
                            $scope.activePanel = 2;
                        }
                        $scope.activeMiniPanel1 = true;
                        $scope.activeMiniPanel2 = false;
                        break;
                    case 3:
                        $scope.isModifyEntityBookingClass = false;
                        $scope.activePanel = 3;
                        $scope.activeMiniPanel1 = true;
                        $scope.activeMiniPanel2 = true;
                        break;
                }
            };

            $scope.toggleMiniPanel = function (step) {

                switch (step) {
                    case 1:
                        $scope.activeMiniPanel1 = !$scope.activeMiniPanel1;
                        break;
                    case 2:
                        $scope.activeMiniPanel2 = !$scope.activeMiniPanel2;
                        break;
                }
            };

            $scope.showDropDown = function (event) {

                $(event.target).siblings('ul').dropdown('toggle');
            };

            $scope.countrySelect = function (c) {

                $scope.data.travelCertificateData.recipientInfo.country = c;
            };
            //20181210 rwern STY-01262
            $scope.entitySelect = function (item, item2) {
                if (item2) {
                    $scope.bookingClassList = [];
                    $scope.clearBookingClass();
                    for (var i = 0; i < item2.length; i++) {
                        $scope.bookingClassList.push({
                            name: item2[i]
                        });
                    }
                }
                //see if entity changes
                //if (((item.name + ' - ' + item.detail) !== $scope.data.travelCertificateData.entity) && !$scope.isModifyEntityBookingClass) {
                if ((item !== $scope.data.travelCertificateData.entity) && !$scope.isModifyEntityBookingClass) {
                    $scope.isModifyEntityBookingClass = true;
                } else {
                    $scope.isModifyEntityBookingClass = false;
                }
                //$scope.data.travelCertificateData.entity = item.name + ' - ' + item.detail;
                $scope.data.travelCertificateData.entity = item;
                //$scope.data.travelCertificateData.entityName = item.name;
                $scope.data.travelCertificateData.entityName = item.split(' - ')[0];
                if ($scope.data.travelCertificateData.bookingClassName.length > 0) {
                    //is entity and booking class included in budget/ get max number of budgets
                    $scope.budgetKey = $scope.data.travelCertificateData.entityName + $scope.data.travelCertificateData.bookingClassName;
                    if ($scope.data.travelCertificateData.budget.hasOwnProperty($scope.budgetKey)) {
                        $scope.hasBudgeKey = true;
                        $scope.data.travelCertificateData.maxBudgetNum = Number($scope.data.travelCertificateData.budget[$scope.budgetKey].Quantity);
                    } else {
                        $scope.hasBudgeKey = false;
                    }
                }

                //calculate cost per credit
                $scope.data.travelCertificateData.costPerCredit = 0;
                $scope.productCode = $scope.data.travelCertificateData.entityName[0] + $scope.data.travelCertificateData.entityName[$scope.data.travelCertificateData.entityName.length - 1] + $scope.data.travelCertificateData.bookingClassName;
                if ($scope.data.travelCertificateData.costValue.hasOwnProperty($scope.productCode)) {
                    $scope.data.travelCertificateData.costPerCredit = $scope.data.travelCertificateData.costValue[$scope.productCode];
                }
            };

            //select booking class
            $scope.bookingClassSelect = function (item) {

                //see if booking class changes
                //20190212 merged with production
                // if (((item.name + ' - ' + item.detail) !== $scope.data.travelCertificateData.bookingClass) && !$scope.isModifyEntityBookingClass) {
                if ((item.name !== $scope.data.travelCertificateData.bookingClass) && !$scope.isModifyEntityBookingClass) {
                    $scope.isModifyEntityBookingClass = true;
                } else {
                    $scope.isModifyEntityBookingClass = false;
                }
                //20190212 merged with production
                //$scope.data.travelCertificateData.bookingClass = item.name + ' - ' + item.detail;
                $scope.data.travelCertificateData.bookingClass = item.name;
                //$scope.data.travelCertificateData.bookingClassName = item.name;
                $scope.data.travelCertificateData.bookingClassName = item.name.split(' - ')[0];

                //is entity and booking class included in budget/ get max number of budgets
                if ($scope.data.travelCertificateData.entityName.length > 0) {
                    $scope.budgetKey = $scope.data.travelCertificateData.entityName + $scope.data.travelCertificateData.bookingClassName;
                    if ($scope.data.travelCertificateData.budget.hasOwnProperty($scope.budgetKey)) {
                        $scope.hasBudgeKey = true;
                        $scope.data.travelCertificateData.maxBudgetNum = Number($scope.data.travelCertificateData.budget[$scope.budgetKey].Quantity);
                    } else {
                        $scope.hasBudgeKey = false;
                    }
                }

                //calculate cost per credit
                $scope.data.travelCertificateData.costPerCredit = 0;
                $scope.productCode = $scope.data.travelCertificateData.entityName[0] + $scope.data.travelCertificateData.entityName[$scope.data.travelCertificateData.entityName.length - 1] + $scope.data.travelCertificateData.bookingClassName;
                if ($scope.data.travelCertificateData.costValue.hasOwnProperty($scope.productCode)) {
                    $scope.data.travelCertificateData.costPerCredit = $scope.data.travelCertificateData.costValue[$scope.productCode];
                }
            };

            $scope.clearEntity = function () {

                // $scope.data.travelCertificateData.entity = '';
                $scope.data.travelCertificateData.entity = '';
                $scope.data.travelCertificateData.entityName = '';
                $scope.bookingClassList = [];
                $scope.clearBookingClass();
            };

            $scope.clearBookingClass = function () {

                // $scope.data.travelCertificateData.bookingClass = '';
                $scope.data.travelCertificateData.bookingClass = '';
                $scope.data.travelCertificateData.bookingClassName = '';
                $scope.data.travelCertificateData.costPerCredit = 0;
            };

            $scope.clearCountryList = function () {

                $scope.data.travelCertificateData.recipientInfo.country = '';
            };

            $scope.clearReasonCode = function () {

                $scope.data.travelCertificateData.reasonCode = '';
                $scope.data.travelCertificateData.reasonCodeFull = '';
            };

            $scope.clearAuthorizer = function () {

                $scope.data.travelCertificateData.auth = '';
            };

            $scope.clearDivision = function () {

                $scope.data.travelCertificateData.divi = '';
            };

            //if user changes entity/bookingclass clear existing certificates
            $scope.confirmClearInfoData = function () {

                $scope.infoData = [];
                $scope.totalCreditNum = 0;
                $scope.creditNumber = 0;
                $scope.activePanel = 2;
                angular.element('#travel-certificate-clear-modal').modal('hide');
            };

            $scope.addCredit = function () {

                //below maximum budget number
                if ($scope.data.travelCertificateData.maxBudgetNum > ($scope.creditNumber + $scope.totalCreditNum)) {
                    $scope.creditNumber++;
                }
            };

            $scope.minusCredit = function () {

                if ($scope.creditNumber > 0) {
                    $scope.creditNumber--;
                }
            };

            $scope.authSelect = function (auth) {

                $scope.data.travelCertificateData.auth = auth;
            };

            $scope.reasonSelect = function (rea) {

                $scope.data.travelCertificateData.reasonCode = rea.TravelCertReasonCode;
                $scope.data.travelCertificateData.reasonCodeFull = rea.TravelCertReasonCode + "-" + rea.TravelCertReasonCodeDefinition;
            };

            $scope.diviSelect = function (divi) {

                $scope.data.travelCertificateData.divi = divi;
            };

            $scope.addHold = function () {

                $scope.keyHoldInterval = $interval(function () {
                    $scope.addCredit();
                }, 300);
            };

            $scope.minusHold = function () {

                $scope.keyHoldInterval = $interval(function () {
                    $scope.minusCredit();
                }, 300);
            };

            $scope.clearHoldInterval = function () {

                $interval.cancel($scope.keyHoldInterval);
            };

            //add certificates button
            $scope.addCertificateSection = function () {

                $scope.infoData.push({
                    Entity: $scope.data.travelCertificateData.entityName,
                    ServiceClass: $scope.data.travelCertificateData.bookingClassName,
                    Quantity: $scope.creditNumber,
                    CreditCount: $scope.data.travelCertificateData.costPerCredit * $scope.creditNumber
                });

                //called when amount changes calculates total cost
                if ($scope.infoData.length > 0) {
                    $scope.totalCreditNum = 0;
                    for (var i = 0, len = $scope.infoData.length; i < len; i++) {
                        $scope.totalCreditNum += $scope.infoData[i].Quantity;
                    }
                } else {
                    $scope.totalCreditNum = 0;
                }
            };

            //click remove button on each certificate
            $scope.removeSelf = function (index) {

                if ($scope.infoData.length > 0) {
                    $scope.infoData.splice(index, 1);
                    //calculates total credit number
                    $scope.totalCreditNum = 0;
                    for (var i = 0, len = $scope.infoData.length; i < len; i++) {
                        $scope.totalCreditNum += $scope.infoData[i].Quantity;
                    }
                } else {
                    $scope.totalCreditNum = 0
                }
            };

            $scope.confirmContinue = function () {

                $scope.data.travelCertificateData.infoData = $scope.infoData;
                $scope.data.travelCertificateData.totalCreditNum = $scope.totalCreditNum;
                $state.go($state.current.parent + '-travel-certificate', {
                    feature: 'confirm-travel-certificate'
                });
            };

            $scope.goBack = function () {

                $scope.infoData = $scope.data.travelCertificateData.infoData;
                $scope.totalCreditNum = $scope.data.travelCertificateData.totalCreditNum;
                $state.go($state.current.parent + '-travel-certificate', { feature: 'apply-travel-certificate' });
            };

            $scope.purchase = function () {

                angular.element('#travel-certificate-confirm-modal').modal();
            };

            //proceed purchase
            $scope.confirmPurchase = function () {

                //generate certificate value and count
                var creditCountQuantityList = [], creditCountList = [], hash = {};
                for (var i = 0, len = $scope.data.travelCertificateData.infoData.length; i < len; i++) {
                    var eachCreditCount = $scope.data.travelCertificateData.infoData[i].Quantity;
                    console.log('creditCountList.push = ' + eachCreditCount);
                    creditCountList.push(eachCreditCount);
                }
                if (creditCountList.length > 0) {
                    for (var j = 0, len = creditCountList.length; j < len; j++) {
                        var key = creditCountList[j];
                        if (hash[key]) {
                            hash[key]++;
                        } else {
                            hash[key] = 1;
                        }
                    }
                    for (var item in hash) {
                        creditCountQuantityList.push({
                            Quantity: hash[item],
                            CreditCount: item
                        });
                    }
                }
                //last parameters used
                var comment = $scope.data.charge.comment;
                var payerId = $scope.data.charge.accSearchId;
                var beneficiaryId = $scope.data.charge.beneficiarySearchId;

                // this param is only used in United Meeting
                var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                // 3 type, jet Stream 1, meeting 2
                var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                //console.log('agreementsIds', agreementsIds)
                //console.log('deduct', deduct)


                //first parameter used for service
                var params = {
                    FirstName: $scope.data.travelCertificateData.recipientInfo.firstName && $scope.data.travelCertificateData.recipientInfo.lastName ? $scope.data.travelCertificateData.recipientInfo.firstName : "",
                    LastName: $scope.data.travelCertificateData.recipientInfo.firstName && $scope.data.travelCertificateData.recipientInfo.lastName ? $scope.data.travelCertificateData.recipientInfo.lastName : "",
                    RecipientEmailAddress: $scope.data.travelCertificateData.recipientInfo.email,
                    Address: $scope.data.travelCertificateData.recipientInfo.street,
                    CityName: $scope.data.travelCertificateData.recipientInfo.city,
                    StateName: $scope.data.travelCertificateData.recipientInfo.state,
                    ZIPCode: $scope.data.travelCertificateData.recipientInfo.ZIP,
                    CountryName: $scope.data.travelCertificateData.recipientInfo.country,
                    ReasonCode: $scope.data.travelCertificateData.reasonCode,
                    Division: $scope.data.travelCertificateData.divi,
                    EffectiveDateFromUI: $scope.data.travelCertificateData.effDate,
                    Authorizer: $scope.data.travelCertificateData.auth,
                    Comments: comment + '{!JSENCODE($Label.SIP_Travel_Cert_Static_Comment)}',
                    Entity: $scope.data.travelCertificateData.entityName,
                    TravelArea: $scope.data.travelCertificateData.entity.split(' - ')[1],
                    CabinOfService: $scope.data.travelCertificateData.bookingClass.split(' - ')[1],
                    ServiceClass: $scope.data.travelCertificateData.bookingClassName,
                    OrganizationName: $scope.data.travelCertificateData.recipientInfo.organisationName || "",
                    cTravelCertDetails: creditCountQuantityList
                };
                //20170616 Call activate cert after pre deduct
                var totalcost = $scope.data.travelCertificateData.totalCreditNum * $scope.data.travelCertificateData.costPerCredit;

                //complete all promises calling service
                $rootScope.mainSpinner = true;
                AmenityService.preDeductAccountBalance(
                  payerId,
                  totalcost,
                  $rootScope.currentUser.id,
                  agreementsIds,
                  deduct
                ).then(function (value) {

                    $rootScope.mainSpinner = false;
                    if (value.success) {
                        //20170620 add pendingAmountObjId
                        $scope.pendingAmountObjId = value.pendingAmountObjId;
                        //20170616 Call activate cert after pre deduct
                        var promiseList = [];
                        //kevin fix 2021.1.7
                        $scope.pendingPayTravelCertExId = ''
                        $rootScope.mainSpinner = true;

                        console.log('activateTravelCert pendingPayTravelCertExId = null');

                        TravelCertificateService.activateTravelCert(
                          params,
                          $scope.data.travelCertificateData.certAllocationByEmpID,
                          0,
                          payerId,
                          beneficiaryId,
                          comment,
                          $rootScope.currentUser.id,
                          totalcost,
                          //new param
                          $scope.pendingPayTravelCertExId,
                          $scope.data.callerAccount.accountId,
                          deduct,
                          agreementsIds,
                          $scope.data.travelCertificateData.recipientInfo.email
                        ).then(function (resf) {

                            $scope.pendingPayTravelCertExId = resf.travelCertInfoFromUi.pendingPayTravelCertExId;

                            $scope.resf = resf
                            if(creditCountQuantityList.length > 1){
                                for (var times = 1, len = creditCountQuantityList.length; times < len; times++) {

                                    console.log('activateTravelCert pendingPayTravelCertExId = resf.travelCertInfoFromUi.pendingPayTravelCertExId');

                                    promiseList.push(TravelCertificateService.activateTravelCert(
                                      params,
                                      $scope.data.travelCertificateData.certAllocationByEmpID,
                                      times,
                                      payerId,
                                      beneficiaryId,
                                      comment,
                                      $rootScope.currentUser.id,
                                      totalcost,
                                      //new param
                                      $scope.pendingPayTravelCertExId,
                                      $scope.data.callerAccount.accountId,
                                      deduct,
                                      agreementsIds,
                                      $scope.data.travelCertificateData.recipientInfo.email
                                    ))
                                }
                            }

                            // $rootScope.mainSpinner = true;
                            $q.all(promiseList).then(function (value1) {

                                value1.push($scope.resf)

                                $rootScope.mainSpinner = false;
                                angular.element('#travel-certificate-confirm-modal').modal('hide');
                                $scope.allResp = [];
                                $scope.successItems = [];
                                $scope.failureItems = [];
                                //for all the messages/+ credits
                                for (var i = 0; i < value1.length; i++) {
                                    for (var j = 0; j < value1[i].vSACertificate.length; j++) {
                                        $scope.allResp.push(value1[i].vSACertificate[j]);
                                    }
                                    //for success data
                                    if (value1[i].success) {
                                        $scope.successItems.push(value1[i]);
                                    } else {
                                        $scope.failureItems.push(value1[i]);
                                    }
                                }

                                if ($scope.failureItems.length !== value1.length) {
                                    var productCode = $scope.data.travelCertificateData.entityName[0] + $scope.data.travelCertificateData.entityName[$scope.data.travelCertificateData.entityName.length - 1] + $scope.data.travelCertificateData.bookingClassName;

                                    var totalcost = $scope.data.travelCertificateData.totalCreditNum * $scope.data.travelCertificateData.costPerCredit;

                                    $rootScope.mainSpinner = true;
                                    TravelCertificateService.commitTravelCertsTransaction(
                                      $scope.successItems,
                                      productCode,
                                      payerId,
                                      beneficiaryId,
                                      $scope.data.callerAccount.accountId,
                                      comment,
                                      $rootScope.currentUser.id,
                                      totalcost,
                                      $scope.pendingAmountObjId,
                                      agreementsIds,
                                      deduct,
                                      //kevin fix 2021.1.7
                                      $scope.pendingPayTravelCertExId
                                    )
                                      .then(function (value2) {

                                          $rootScope.mainSpinner = false;
                                          if (value2.success) {
                                              $scope.data.travelCertificateData.transactionNumber = value2.transactionNumber;
                                              angular.element('#travel-certificate-success-modal').modal();
                                          } else {
                                              $scope.shouldCheckBalance = true;
                                              $rootScope.$broadcast('showMessage',
                                                {
                                                    type: 'alert',
                                                    text: value.messages[0]
                                                });
                                          }
                                      }, function (e) {

                                          $rootScope.mainSpinner = false;
                                          $rootScope.$broadcast('showMessage',
                                            {
                                                type: 'alert',
                                                text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                            });
                                      });
                                } else {

                                    $rootScope.mainSpinner = false;
                                    //20170616 redefine total cost
                                    var totalcost = $scope.data.travelCertificateData.totalCreditNum * $scope.data.travelCertificateData.costPerCredit;

                                    $rootScope.mainSpinner = true;
                                    AmenityService.addAmount(
                                      payerId,
                                      totalcost,
                                      $rootScope.currentUser.id,
                                      $scope.pendingAmountObjId
                                    ).then(function (value) {

                                        $rootScope.mainSpinner = false;
                                        if (value.success) {
                                            //20170616 show activate cert error msg when add amount finish
                                            var eMessageList = [];
                                            for (var i = 0; i < $scope.failureItems.length; i++) {
                                                eMessageList.push($scope.failureItems[i].messages[0]);
                                            }
                                            $rootScope.$broadcast('showMessage',
                                              {
                                                  type: 'alert',
                                                  text: eMessageList
                                              });
                                        } else {
                                            $rootScope.$broadcast('showMessage',
                                              {
                                                  type: 'alert',
                                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}' + '. ' + value.messages[0]
                                              });
                                        }
                                    }, function (e) {

                                        $rootScope.mainSpinner = false;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                          });
                                    });
                                }
                            }, function (e) {

                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                  });
                            });
                        })
                    } else {

                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: value.messages[0]
                          });
                    }
                }, function (err) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                })
            };

            angular.element('#travel-certificate-success-modal').on('show.bs.modal', function (e) {

                $('.entity-email').html($scope.data.travelCertificateData.entity.split(' - ')[1]);
                $('.booking-class-tc').html($scope.data.travelCertificateData.bookingClassName);
                $('.cabin').html($scope.data.travelCertificateData.bookingClass.split(' - ')[1]);
                $('.org').html($scope.data.travelCertificateData.recipientInfo.organisationName);
                if ($scope.data.travelCertificateData.recipientInfo.lastName) {
                    $('.tc-name').html($scope.data.travelCertificateData.recipientInfo.lastName + " ," + $scope.data.travelCertificateData.recipientInfo.firstName);
                } else {
                    $('.tc-name').html('')
                }
                //20171018 use payer account extid
                $('.arc-num').html($scope.data.charge.accSearchExtId);
                $('.issue-by').html($rootScope.currentUser.name);
                $('.auth-by').html($scope.data.travelCertificateData.auth);
                var emailPromiseList = [];
                for (var i = 0; i < $scope.allResp.length; i++) {
                    $('.promo-code').html($scope.allResp[i].PromoID);
                    $('.pin').html($scope.allResp[i].PIN);
                    $('.offer-code').html($scope.allResp[i].OfferCode);
                    $('.credits-email').html($scope.allResp[i].Credits);
                    $('.ef-date').html($scope.allResp[i].EffTravelDate);
                    $('.ex-date').html($scope.allResp[i].ExpRedmDate);

                    var onePageDiv = $('#send-email-content').prop('outerHTML'),
                      onePage = '<!DOCTYPE html><html><body>' + onePageDiv + '</body></html>';
                    //promise list
                    //20170628 add transaction number
                    emailPromiseList.push(TravelCertificateService.sendTravelCertEmails(onePage, $scope.data.travelCertificateData.recipientInfo.email, $rootScope.currentUser.id, $scope.data.travelCertificateData.transactionNumber));
                }

                //proceed send email service
                //20170616 send travel cert email error handle
                $rootScope.mainSpinner = true;
                $q.all(emailPromiseList).then(function (value) {
                    /* REQ-0581: if error 10036 is found, display on modal # failed and tell user to retry
                         *    otherwise if no 10036, display errors normally */
                    var failureItem = [];
                    for (var i = 0; i < value.length; i++) {
                        if (!value[i].success) {
                            failureItem.push(value);
                        }
                    }
                    if (failureItem.length > 0) {
                        $scope.emailErrorMessage = '{!JSENCODE($Label.CSL_ERR_20003_01_10036_A)}';
                    }
                    $rootScope.mainSpinner = false;
                    /* REQ-0581 END */
                    //show generic error message for other page errors
                }, function (e) {

                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            });

            angular.element('#message-modal').on('hidden.bs.modal', function (e) {

                if ($scope.shouldCheckBalance) {
                    $scope.shouldCheckBalance = false;

                    $rootScope.$broadcast('refreshSelectedAccount', {});
                }
            });

            angular.element('#travel-certificate-success-modal').on('hidden.bs.modal', function () {
                if ($scope.data.travelCertificateData.checkedEmail) {
                    $rootScope.mainSpinner = true;
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.travelCertificateData.transactionNumber
                    ).then(function () {
                        $rootScope.mainSpinner = false;
                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    }, function (err) {
                        $rootScope.mainSpinner = false;
                        console.debug(err);
                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    })
                }
                else {
                    $state.go($state.current.parent + '-home', { feature: 'init' });
                }
            });
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('unitedClubController', controller);

        controller.$inject = ['$rootScope', '$scope', '$state',
            'util', 'UnitedClubService', 'ProductService', 'AmenityService'];

        function controller($rootScope, $scope, $state,
                            util, UnitedClubService, ProductService, AmenityService) {

            $scope.forms = {};
            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                isSubscriptionSelected : false,
                companyOption: !$rootScope.currentUser.isInternalUser ? 1 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ? 1 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  ($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.corp ? 2 : 1) :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ? 1 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: ''
            };
            $scope.currentApp = $rootScope.currentUser.SIP_Current_Portal_App__c

            $scope.prodMembership = ProductService.getProductByCode($scope.data.products, 'Membership');
            $scope.prodOTP = ProductService.getProductByCode($scope.data.products, 'OTP');

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;
                //Updated :: TS7067 Moin :: Updated for Confirm on Baggage Subscription
                if ($scope.data.widgetFeature === 'confirm-membership' ||
                  $scope.data.widgetFeature === 'confirm-otp-membership' ||
                  $scope.data.widgetFeature === 'confirm-otp-email' ||
                  $scope.data.widgetFeature === 'confirm-baggage-subscription' ||
                  $scope.data.widgetFeature === 'confirm-economy-subscriptions' ||
                  $scope.data.widgetFeature === 'confirm-wifi-subscriptions') {

                    if ($scope.data.widgetFeature === 'confirm-membership') {
                        $scope.data.charge.chargeAmount = $scope.data.membershipData ? $scope.data.membershipData.TotalCost : 0;
                        $scope.data.charge.amenityType = 'SIP_United_Club_Membership__c';
                    }else if($scope.data.widgetFeature === 'confirm-baggage-subscription'){
                        $scope.data.charge.chargeAmount = $scope.data.baggageData ? $scope.data.baggageData.TotalCost : 0;
                        $scope.data.charge.amenityType = 'Baggage_Subscription__c';
                    }else if($scope.data.widgetFeature === 'confirm-economy-subscriptions'){
                        $scope.data.charge.chargeAmount = $scope.data.economyPlusData ? $scope.data.economyPlusData.TotalCost : 0;
                        $scope.data.charge.amenityType = 'SIP_Economy_Plus__c';
                    }else if($scope.data.widgetFeature === 'confirm-wifi-subscriptions'){
                        $scope.data.charge.chargeAmount = $scope.data.wifiData ? $scope.data.wifiData.TotalCost : 0;
                        $scope.data.charge.amenityType = 'United_WIFI_Subscription__c';
                    }
                    else if ($scope.data.widgetFeature === 'confirm-otp-membership') {
                        $scope.data.charge.chargeAmount = $scope.data.otpMembershipData ? $scope.data.otpMembershipData.TotalCost : 0;
                        $scope.data.charge.amenityType = 'SIP_United_Club_Passes__c';
                    }
                    else {
                        $scope.data.charge.chargeAmount = $scope.data.otpEmailData ? $scope.data.otpEmailData.TotalCost : 0;
                        $scope.data.charge.amenityType = 'SIP_United_Club_Passes__c';
                    }
                }
                else {
                    $scope.data.charge.chargeAmount = '';
                }
            });

            $scope.goBack = function () {

                var backTo = '';
                //Updated :: TS7067 Moin :: Go back on United SUbcsription page for all United Subscription Sub Tiles
                if ($scope.data.widgetFeature === 'confirm-membership' 
                    || $scope.data.widgetFeature === 'confirm-baggage-subscription'
                    || $scope.data.widgetFeature === 'confirm-economy-subscriptions'
                    || $scope.data.widgetFeature === 'confirm-wifi-subscriptions') {
                    backTo = 'amenity-united-subscriptions';
                }
                else {
                    backTo = 'amenity-united-club-otp';
                }
                $state.go($state.current.parent + '-home', { feature: backTo });
            };

            $scope.shouldCheckBalance = false;
            $scope.msgModal = $('#message-modal');
            $scope.confirmModal = $('#united-club-confirm-modal');
            $scope.successModal = $('#united-club-success-modal');
            $scope.purchase = function () {

                $scope.confirmModal.modal();
            };
            $scope.confirmPurchase = function () {
                var comment = $scope.data.charge.comment;
                var remark = $scope.data.charge.remark;
                var payerId = $scope.data.charge.accSearchId;
                var beneficiaryId = $scope.data.charge.beneficiarySearchId;

                // this param is only used in United Meeting
                var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                // 3 type, jet Stream 1, meeting 2
                var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                //console.log('agreementsIds', agreementsIds)
                //console.log('deduct', deduct)

                // todo meeting
                switch ($scope.data.widgetFeature) {
                    case 'confirm-membership':

                        $rootScope.mainSpinner = true;
                        //20170418 Yang/Shan Change from DataSource To Data

                        AmenityService.preDeductAccountBalance(payerId, $scope.data.membershipData.TotalCost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                            if (value.success) {
                                //20170620 add pendingAmountObjId
                                AmenityService.confirmSubscriptionPayment(
                                  '{!$Label.Sip_Amenity_Club_Membership_Subscriptions}',
                                  $scope.data.membershipData.selectedSubProductId, 
                                  $scope.data.membershipData.FulfillmentOffer,
                                  $rootScope.currentUser.id,
                                  payerId,
                                  beneficiaryId,
                                  $scope.data.callerAccount.accountId,
                                  $scope.data.callerAccount.callerFirstName,
                                  $scope.data.callerAccount.callerLastName,
                                  comment,
                                  remark).then(function (value) {

                                    $rootScope.mainSpinner = false;
                                    if (value.success) {
                                        $scope.confirmModal.modal('hide');
                                        $scope.data.membershipData.transactionNumber = value.referenceNumber;
                                        $scope.data.membershipData.NewExpiryDate = value.NewExpiryDate;
                                        //Invoke fufillment service
                                        if($scope.data.membershipData.transactionNumber){
                                            AmenityService.executeMerchFullfillmentSubs(
                                                $scope.data.membershipData.FulfillmentOffer,
                                                $scope.data.membershipData.selectedSubProductId, 
                                                $scope.data.membershipData.transactionNumber,
                                                $rootScope.currentUser.id,
                                                $scope.data.callerAccount.accountId,
                                                '{!$Label.Sip_Amenity_Club_Membership_Subscriptions}'
                                            ).then(function (value1) {
                                                console.log('fullfillmentservice');
                                            },function (err) {
                                                $rootScope.mainSpinner = false;
                                                $rootScope.$broadcast('showMessage',
                                                {
                                                    type: 'alert',
                                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                                });
                                            });
                                        }
                                        $scope.successModal.modal();
                                    } else {
                                        $scope.shouldCheckBalance = true;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: value.messages[0]
                                          });
                                    }
                                }, function (err) {

                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                            } else {
                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        break;
                    //For Baggage Subscription
                    case 'confirm-baggage-subscription':

                        $rootScope.mainSpinner = true;
                        //20170418 Yang/Shan Change from DataSource To Data

                        AmenityService.preDeductAccountBalance(payerId, $scope.data.baggageData.TotalCost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                            if (value.success) {
                                //20170620 add pendingAmountObjId
                                AmenityService.confirmSubscriptionPayment(
                                  '{!$Label.Sip_Amenity_Baggage_Subscriptions}', 
                                  $scope.data.baggageData.selectedSubProductId, 
                                  $scope.data.baggageData.FulfillmentOffer,
                                  $rootScope.currentUser.id,
                                  payerId,
                                  beneficiaryId,
                                  $scope.data.callerAccount.accountId,
                                  $scope.data.callerAccount.callerFirstName,
                                  $scope.data.callerAccount.callerLastName,
                                  comment,
                                  remark).then(function (value) {

                                    $rootScope.mainSpinner = false;
                                    if (value.success) {
                                        $scope.confirmModal.modal('hide');
                                        $scope.data.baggageData.transactionNumber = value.referenceNumber;
                                        $scope.data.baggageData.NewExpiryDate = value.NewExpiryDate;
                                        //Invoke Fullfillment Service
                                        if($scope.data.baggageData.transactionNumber){
                                            AmenityService.executeMerchFullfillmentSubs(
                                                $scope.data.baggageData.FulfillmentOffer,
                                                $scope.data.baggageData.selectedSubProductId, 
                                                $scope.data.baggageData.transactionNumber,
                                                $rootScope.currentUser.id,
                                                $scope.data.callerAccount.accountId,
                                                '{!$Label.Sip_Amenity_Baggage_Subscriptions}'
                                            ).then(function (value1) {
                                                console.log('fullfillmentservice');
                                            },function (err) {
                                                $rootScope.mainSpinner = false;
                                                $rootScope.$broadcast('showMessage',
                                                {
                                                    type: 'alert',
                                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                                });
                                            });
                                        }
                                        $scope.successModal.modal();
                                    } else {
                                        $scope.shouldCheckBalance = true;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: value.messages[0]
                                          });
                                    }
                                }, function (err) {

                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                            } else {
                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        break;
                    //For Economy Plus
                    case 'confirm-economy-subscriptions':

                        $rootScope.mainSpinner = true;
                        //20170418 Yang/Shan Change from DataSource To Data

                        AmenityService.preDeductAccountBalance(payerId, $scope.data.economyPlusData.TotalCost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                            if (value.success) {
                                //20170620 add pendingAmountObjId
                                AmenityService.confirmSubscriptionPayment(
                                  '{!$Label.Sip_Amenity_Economy_Plus_Subscriptions}',
                                  $scope.data.economyPlusData.selectedSubProductId,
                                  $scope.data.economyPlusData.FulfillmentOffer,
                                  $rootScope.currentUser.id,
                                  payerId,
                                  beneficiaryId,
                                  $scope.data.callerAccount.accountId,
                                  $scope.data.callerAccount.callerFirstName,
                                  $scope.data.callerAccount.callerLastName,
                                  comment,
                                  remark).then(function (value) {

                                    $rootScope.mainSpinner = false;
                                    if (value.success) {
                                        $scope.confirmModal.modal('hide');
                                        $scope.data.economyPlusData.transactionNumber = value.referenceNumber;
                                        $scope.data.economyPlusData.NewExpiryDate = value.NewExpiryDate;
                                        //Invoke Fullfillment Service
                                        if($scope.data.economyPlusData.transactionNumber){
                                            AmenityService.executeMerchFullfillmentSubs(
                                                $scope.data.economyPlusData.FulfillmentOffer,
                                                $scope.data.economyPlusData.selectedSubProductId, 
                                                $scope.data.economyPlusData.transactionNumber,
                                                $rootScope.currentUser.id,
                                                $scope.data.callerAccount.accountId,
                                                '{!$Label.Sip_Amenity_Economy_Plus_Subscriptions}'
                                            ).then(function (value1) {
                                                console.log('fullfillmentservice');
                                            },function (err) {
                                                $rootScope.mainSpinner = false;
                                                $rootScope.$broadcast('showMessage',
                                                {
                                                    type: 'alert',
                                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                                });
                                            });
                                        }
                                        $scope.successModal.modal();
                                    } else {
                                        $scope.shouldCheckBalance = true;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: value.messages[0]
                                          });
                                    }
                                }, function (err) {

                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                            } else {
                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        break;
                    //For United WIFI SUbscription
                    case 'confirm-wifi-subscriptions':

                        $rootScope.mainSpinner = true;
                        //20170418 Yang/Shan Change from DataSource To Data

                        AmenityService.preDeductAccountBalance(payerId, $scope.data.wifiData.TotalCost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                            if (value.success) {
                                //20170620 add pendingAmountObjId
                                AmenityService.confirmSubscriptionPayment(
                                  '{!$Label.Sip_Amenity_United_WIFI_Subscriptions}',
                                  $scope.data.wifiData.selectedSubProductId,
                                  $scope.data.wifiData.FulfillmentOffer,
                                  $rootScope.currentUser.id,
                                  payerId,
                                  beneficiaryId,
                                  $scope.data.callerAccount.accountId,
                                  $scope.data.callerAccount.callerFirstName,
                                  $scope.data.callerAccount.callerLastName,
                                  comment,
                                  remark).then(function (value) {

                                    $rootScope.mainSpinner = false;
                                    if (value.success) {
                                        $scope.confirmModal.modal('hide');
                                        $scope.data.wifiData.transactionNumber = value.referenceNumber;
                                        $scope.data.wifiData.NewExpiryDate = value.NewExpiryDate;
                                        //Invoke Fullfillment Service
                                        if($scope.data.wifiData.transactionNumber){
                                            AmenityService.executeMerchFullfillmentSubs(
                                                $scope.data.wifiData.FulfillmentOffer,
                                                $scope.data.wifiData.selectedSubProductId, 
                                                $scope.data.wifiData.transactionNumber,
                                                $rootScope.currentUser.id,
                                                $scope.data.callerAccount.accountId,
                                                '{!$Label.Sip_Amenity_United_WIFI_Subscriptions}'
                                            ).then(function (value1) {
                                                console.log('fullfillmentservice');
                                            },function (err) {
                                                $rootScope.mainSpinner = false;
                                                $rootScope.$broadcast('showMessage',
                                                {
                                                    type: 'alert',
                                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                                });
                                            });
                                        }
                                        $scope.successModal.modal();
                                    } else {
                                        $scope.shouldCheckBalance = true;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: value.messages[0]
                                          });
                                    }
                                }, function (err) {

                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                            } else {
                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        break;
                  //20170418 Shan Issue Pass For OTP With MP
                    case 'confirm-otp-membership':

                        $rootScope.mainSpinner = true;
                        var requestInfoForOTPMember = {
                            'emailToSent': ''
                        }, valueStructure = {
                            Email: $scope.data.otpMembershipData.Email,
                            FirstName: $scope.data.otpMembershipData.FirstName,
                            LastName: $scope.data.otpMembershipData.LastName,
                            MileagePlusNumber: $scope.data.otpMembershipData.MileagePlusNumber,
                            NewEffectiveDate: $scope.data.otpMembershipData.NewEffectiveDate,
                            NewExpiryDate: $scope.data.otpMembershipData.NewExpiryDate,
                            NumberOfPasses: $scope.data.otpMembershipData.NumberOfPasses,
                            OtpBalance: $scope.data.otpMembershipData.OtpBalance,
                            TotalCost: $scope.data.otpMembershipData.TotalCost,
                            UnitCost: $scope.data.otpMembershipData.UnitCost,
                            messages: $scope.data.otpMembershipData.messages,
                            success: $scope.data.otpMembershipData.success,
                            //20170531
                            EdocIdList: $scope.data.otpMembershipData.EdocIdList
                        };

                        AmenityService.preDeductAccountBalance(payerId, $scope.data.otpMembershipData.TotalCost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                            if (value.success) {
                                //20170620 add pendingAmountObjId
                                UnitedClubService.retrieveIssuePassWithMP(
                                  $scope.data.otpMembershipData.retriveQual,
                                  requestInfoForOTPMember,
                                  valueStructure,
                                  payerId,
                                  beneficiaryId,
                                  $scope.data.callerAccount.accountId,
                                  comment,
                                  $rootScope.currentUser.id,
                                  $scope.data.otpMembershipData.TotalCost,
                                  value.pendingAmountObjId,
                                  agreementsIds,
                                  deduct).then(function (value) {

                                    $rootScope.mainSpinner = false;
                                    if (value.success) {
                                        $scope.confirmModal.modal('hide');
                                        $scope.data.otpMembershipData.transactionNumber = value.transactionNumber;
                                        $scope.successModal.modal();
                                    } else {
                                        $scope.shouldCheckBalance = true;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: value.messages[0]
                                          });
                                    }
                                }, function (err) {

                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                            } else {
                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        break;
                  //20170418 Shan Issue Pass For OTP Without MP
                    case 'confirm-otp-email':

                        $rootScope.mainSpinner = true;

                        AmenityService.preDeductAccountBalance(payerId, $scope.data.otpEmailData.TotalCost, $rootScope.currentUser.id, agreementsIds, deduct).then(function (value) {
                            if (value.success) {
                                //20170620 add pendingAmountObjId
                                UnitedClubService.retrieveIssuePassWithoutMP(
                                  $scope.data.otpEmailData,
                                  payerId,
                                  beneficiaryId,
                                  $scope.data.callerAccount.accountId,
                                  comment,
                                  $rootScope.currentUser.id,
                                  $scope.data.otpEmailData.TotalCost,
                                  value.pendingAmountObjId,
                                  agreementsIds,
                                  deduct).then(function (value) {

                                    $rootScope.mainSpinner = false;
                                    if (value.success) {
                                        $scope.confirmModal.modal('hide');
                                        $scope.data.otpEmailData.transactionNumber = value.transactionNumber;
                                        $scope.successModal.modal();
                                    } else {
                                        $scope.shouldCheckBalance = true;
                                        $rootScope.$broadcast('showMessage',
                                          {
                                              type: 'alert',
                                              text: value.messages[0]
                                          });
                                    }
                                }, function (err) {

                                    $rootScope.mainSpinner = false;
                                    $rootScope.$broadcast('showMessage',
                                      {
                                          type: 'alert',
                                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                      });
                                });
                            } else {
                                $rootScope.mainSpinner = false;
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: value.messages[0]
                                  });
                            }
                        }, function (err) {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                        break;
                }
            };
            $scope.msgModal.on('hidden.bs.modal', function (e) {

                if ($scope.shouldCheckBalance) {
                    $scope.shouldCheckBalance = false;
                }
                $rootScope.$broadcast('refreshSelectedAccount', {});
            });

            //TS 7067 :: Moin :: Update selected dropdown value for Baggage Sub Products
            $scope.selectBaggageSubProducts = function(item,item2){
                if(item){
                    var regexp = /\\$([0-9]+\.[0-9]+)\s+/; 
                    var totalCost = item2.match(regexp);
                    $scope.data.baggageData.TotalCost = totalCost[1];
                    $scope.data.charge.chargeAmount = parseFloat(totalCost[1]);//Converting String to Float
                    $scope.data.baggageData.selectedSubProductId = item;
                    var str = item2.substring(item2.indexOf('$'),item2.length);
                    $scope.data.baggageData.selectedDescription = str;
                    //Update the flag to true whenever subscription is selected for Baggage
                    $scope.data.charge.isSubscriptionSelected = true;
                }
            };

            //TS 7067 :: Moin :: Update selected dropdown value for United Club Sub Products
            $scope.selectUnitedClubSubProducts = function(item,item2){
                if(item){
                    var regexp = /\\$([0-9]+\.[0-9]+)\s+/; 
                    var totalCost = item2.match(regexp);
                    $scope.data.membershipData.TotalCost = totalCost[1];
                    $scope.data.charge.chargeAmount = parseFloat(totalCost[1]);//Converting String to Float
                    $scope.data.membershipData.selectedSubProductId = item;
                    var str = item2.substring(item2.indexOf('$'),item2.length);
                    $scope.data.membershipData.selectedDescription = str;
                    //Update the flag to true whenever subscription is selected for United Club
                    $scope.data.charge.isSubscriptionSelected = true;
                }
            };

            //TS 7067 :: Moin :: Update selected dropdown value for Economy Plus Sub Products
            $scope.selectEconomyPlusSubProducts = function(item,item2){
                if(item){
                    var regexp = /\\$([0-9]+\.[0-9]+)\s+/; 
                    var totalCost = item2.match(regexp);
                    $scope.data.economyPlusData.TotalCost = totalCost[1];
                    $scope.data.charge.chargeAmount = parseFloat(totalCost[1]);//Converting String to Float
                    $scope.data.economyPlusData.selectedSubProductId = item;
                    var str = item2.substring(item2.indexOf('$'),item2.length);
                    $scope.data.economyPlusData.selectedDescription = str;
                    //Update the flag to true whenever subscription is selected for Economy
                    $scope.data.charge.isSubscriptionSelected = true;
                }
            };

            /*$scope.selectEconomyPlusSubProduct = function(item){
                console.log('item::'+item);
                item = item.substring(item.indexOf('$'),item.length);
            };*/

            //TS 7067 :: Moin :: Update selected dropdown value for WIFI Sub Products
            $scope.selectWIFISubProducts = function(item,item2){
                if(item){
                    var regexp = /\\$([0-9]+\.[0-9]+)\s+/; 
                    var totalCost = item2.match(regexp);
                    $scope.data.economyPlusData.TotalCost = totalCost[1];
                    $scope.data.charge.chargeAmount = parseFloat(totalCost[1]);//Converting String to Float
                    $scope.data.wifiData.selectedSubProductId = item;
                    var str = item2.substring(item2.indexOf('$'),item2.length);
                    $scope.data.wifiData.selectedDescription = str;
                    //Update the flag to true whenever subscription is selected for WIFI
                    $scope.data.charge.isSubscriptionSelected = true;
                }
            };

            //TS 7067 :: Moin :: Clear selected sub product for Baggage Subscriptions
            $scope.clearBaggageDescription = function () {
                $scope.data.baggageData.selectedDescription = '';
                $scope.data.baggageData.selectedSubProductId = '';
                //Update the flag to false whenever subscription is de-selected for Baggage
                $scope.data.charge.isSubscriptionSelected = false;
            };

            //TS 7067 :: Moin :: Clear selected sub product for United Club Subscriptions
            $scope.clearUnitedClubDescription = function () {
                $scope.data.membershipData.selectedDescription = '';
                $scope.data.membershipData.selectedSubProductId = '';
                //Update the flag to false whenever subscription is de-selected for United Club
                $scope.data.charge.isSubscriptionSelected = false;
            };            
            
            //TS 7067 :: Moin :: Clear selected sub product for Economy Subscriptions
            $scope.clearEconomyPlusDescription = function () {
                $scope.data.economyPlusData.selectedDescription = '';
                $scope.data.economyPlusData.selectedSubProductId = '';
                //Update the flag to false whenever subscription is de-selected for Economy
                $scope.data.charge.isSubscriptionSelected = false;
            };
            
            //TS 7067 :: Moin :: Clear selected sub product for WIFI Subscriptions
            $scope.clearWIFIDescription = function () {
                $scope.data.wifiData.selectedDescription = '';
                $scope.data.wifiData.selectedSubProductId = '';
                //Update the flag to false whenever subscription is de-selected for WIFI
                $scope.data.charge.isSubscriptionSelected = false;
            };


            angular.element('#united-club-success-modal').on('hidden.bs.modal', function (e) {

                if ($scope.data.membershipData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.membershipData.transactionNumber
                    ).then(function () {

                    }, function (err) {

                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    })
                }

                //Send Email for Baggage Subscription
                if ($scope.data.baggageData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.baggageData.transactionNumber
                    ).then(function () {

                    }, function (err) {

                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    })
                }

                //Send Email for EconomyPlus Subscription
                if ($scope.data.economyPlusData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.economyPlusData.transactionNumber
                    ).then(function () {

                    }, function (err) {

                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    })
                }

                //Send Email for United WIFI Subscription
                if ($scope.data.wifiData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.wifiData.transactionNumber
                    ).then(function () {

                    }, function (err) {

                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    })
                }

                if ($scope.data.otpMembershipData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.otpMembershipData.transactionNumber
                    ).then(function () {

                    }, function (err) {

                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    })
                }

                if ($scope.data.otpEmailData.checkedEmail) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.otpEmailData.transactionNumber
                    ).then(function () {

                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    }, function (err) {

                        console.debug(err);
                        $state.go($state.current.parent + '-home', { feature: 'init' });
                    })
                }
                else {
                    $state.go($state.current.parent + '-home', { feature: 'init' });
                }
            });
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('upgradesController', controller);
        //20170503 Shan added AccountService and ProductService (After Upgrade Review 1) - Added but not used ???
        controller.$inject = ['$rootScope', '$scope', '$state', 'util',
            'AccountService', 'ProductService', 'UpgradeService', 'AmenityService'];

        function controller($rootScope, $scope, $state, util,
                            AccountService, ProductService, UpgradeService, AmenityService) {

            $scope.data.charge = {
                forms: '',
                accSearchValue: '',
                accSearchId: '',
                accSearchExtId: '',
                beneficiarySearchValue: '',
                beneficiarySearchId: '',
                chargeAmount: '',
                chargeType: '',
                accountType: '',
                comment: '',
                remark: '',
                isValidFundOption: true,
                enableFund: true,
                enableIns: false,
                enableGS: false,
                companyOption: !$rootScope.currentUser.isInternalUser ?
                  _.indexOf([$rootScope.ACC_TYPE.corp, $rootScope.ACC_TYPE.aor,$rootScope.ACC_TYPE.passPlus],
                    $scope.data.preSelectedAccount.typeName) > -1 ? 3 : 2 :
                  $rootScope.currentUser.permission.SIP_Use_All_Corporate_Service_Funds__c ?
                    _.indexOf([$rootScope.ACC_TYPE.corp, $rootScope.ACC_TYPE.aor,$rootScope.ACC_TYPE.passPlus],
                      $scope.data.preSelectedAccount.typeName) > -1 ? 3 : 2 : 2,
                agencyOption: !$rootScope.currentUser.isInternalUser ?
                  _.indexOf([$rootScope.ACC_TYPE.agency, $rootScope.ACC_TYPE.agencyBranch, $rootScope.ACC_TYPE.resv],
                    $scope.data.preSelectedAccount.typeName) > -1 ? 3 : 2 :
                  $rootScope.currentUser.permission.Sip_Use_Agency_s_HOL_s_Service_Funds__c ?
                    _.indexOf([$rootScope.ACC_TYPE.agency, $rootScope.ACC_TYPE.agencyBranch, $rootScope.ACC_TYPE.resv],
                      $scope.data.preSelectedAccount.typeName) > -1 ? 3 : 2 : 2,
                disOption: $rootScope.currentUser.isInternalUser ? 1 : 2,
                amenityType: ''
            };

            if ($scope.data.upgradeData) {
                //20190523 rwern PPR
                if ($scope.data.upgradeData.UGCCount > 0) {
                    $scope.data.charge.amenityType = 'SIP_Plus_Points__c';
                }
            }

            //20210406 rwern TFS 482385
            $scope.overCap = false;
            $scope.$watch('data.upgradeData.UGCCount', function (newValue, oldValue, scope) {
                if (newValue && newValue > 250) {
                    $scope.overCap = true;
                } else {
                    $scope.overCap = false;
                }
            });
            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                $scope.data.widgetFeature = toParams.feature;

                if ($scope.data.widgetFeature === 'apply-upgrades') {
                    $scope.data.charge.chargeAmount = '';
                }
                else if ($scope.data.widgetFeature === 'confirm-upgrades') {
                    $scope.data.charge.chargeAmount = 0;
                    if ($scope.data.upgradeData) {
                        //20190523 rwern PPR
                        $scope.data.upgradeData.UGCTotal = ($scope.data.upgradeData.UGCCount ? $scope.data.upgradeData.UGCCount : 0) * $scope.data.upgradeData.UGCUnitCost;
                        $scope.data.upgradeData.TotalCost = $scope.data.upgradeData.UGCTotal;
                        //$scope.data.upgradeData.GPUTotal = ($scope.data.upgradeData.GPUCount ? $scope.data.upgradeData.GPUCount : 0) * $scope.data.upgradeData.GPUUnitCost;
                        //$scope.data.upgradeData.RPUTotal = ($scope.data.upgradeData.RPUCount ? $scope.data.upgradeData.RPUCount : 0) * $scope.data.upgradeData.RPUUnitCost;
                        //$scope.data.upgradeData.TotalCost = $scope.data.upgradeData.GPUTotal + $scope.data.upgradeData.RPUTotal;
                        $scope.data.charge.chargeAmount = $scope.data.upgradeData.TotalCost;
                        //abe modified add upgrade expire date
                    }
                }
            });

            $scope.applyUpgrades = function () {

                $state.go($state.current.parent + '-upgrades', { feature: 'confirm-upgrades' });
            };

            $scope.goBack = function () {

                $state.go($state.current.parent + '-upgrades', { feature: 'apply-upgrades' });
            };

            $scope.proceed = false;
            $scope.msgModal = $('#message-modal');
            $scope.confirmModal = $('#upgrades-confirm-modal');
            $scope.purchase = function () {

                $scope.confirmModal.modal();
            };
            $scope.confirmPurchase = function () {

                $scope.proceed = true;
                $scope.confirmModal.modal('hide');
                $rootScope.mainSpinner = true;
            };

            $scope.showTermConditionModal = function () {

                angular.element('#term-condition-modal').modal();
            };

            $scope.checkResult = function (reqCounter, result) {

                var comment = $scope.data.charge.comment;
                var payerId = $scope.data.charge.accSearchId;
                var beneficiaryId = $scope.data.charge.beneficiarySearchId;
                // this param is only used in United Meeting
                var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                // 3 type, jet Stream 1, meeting 2
                var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                //console.log('agreementsIds', agreementsIds)
                //console.log('deduct', deduct)

                if (reqCounter === 0) {
                    if (result.Msgs.length > 0) {
                        AmenityService.addAmount(
                          payerId,
                          $scope.data.upgradeData.TotalCost,
                          $rootScope.currentUser.id,
                          $scope.pendingAmountObjId
                        ).then(function (value) {
                            if (value.success) {
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                  });
                            } else {
                                $rootScope.$broadcast('showMessage',
                                  {
                                      type: 'alert',
                                      text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}' + '. ' + value.messages[0]
                                  });
                            }
                        }, function (e) {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                    }
                    else {
                        // Kevin fix 2021.1.4
                        $scope.data.upgradeData.transactionNumber = $scope.commitTranscationNumber;
                        $state.go($state.current.parent + '-upgrades', { feature: 'complete-upgrades' });


                        //abe add service
                        //20170620 add pendingAmountObjId
                        // UpgradeService.commitUpgradeTransaction(
                        //     $scope.commitTranscationSuccessItem,
                        //     payerId,
                        //     beneficiaryId,
                        //     $scope.data.callerAccount.accountId,
                        //     comment,
                        //     $rootScope.currentUser.id,
                        //     $scope.data.upgradeData.TotalCost,
                        //     $scope.pendingAmountObjId,
                        //     agreementsIds,
                        //     deduct
                        // ).then(function (value3) {
                        //     $rootScope.mainSpinner = false;
                        //     if (value3.success) {
                        //         $scope.data.upgradeData.transactionNumber = value3.transactionNumber;
                        //         $state.go($state.current.parent + '-upgrades', { feature: 'complete-upgrades' });
                        //     } else {
                        //         $scope.shouldCheckBalance = true;
                        //         $rootScope.$broadcast('showMessage',
                        //             {
                        //                 type: 'alert',
                        //                 text: value3.messages[0]
                        //             });
                        //     }
                        // }, function (e) {
                        //     $rootScope.mainSpinner = false;
                        //     $rootScope.$broadcast('showMessage',
                        //         {
                        //             type: 'alert',
                        //             text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        //         });
                        // });
                        //$rootScope.mainSpinner = false;
                        //$state.go($state.current.parent + '-upgrades', {feature: 'complete-upgrades'});
                    }
                }
            };
            $scope.confirmModal.on('hidden.bs.modal', function (e) {

                if ($scope.proceed) {

                    var comment = $scope.data.charge.comment;
                    var payerId = $scope.data.charge.accSearchId;
                    var beneficiaryId = $scope.data.charge.beneficiarySearchId;

                    var agreementsIds = $scope.data.charge.accAgreementsPaymentInfo || {};
                    // 3 type, jet Stream 1, meeting 2
                    var deduct = $scope.data.charge.accDeduct || 'JetAccountQuery';

                    console.log('$scope.data.preSelectedAccount',$scope.data.preSelectedAccount)
                    var CM_RequestInfoToWSSWUFromUI = {
                        //20190523 rwern PPR
                        'UGCCount': $scope.data.upgradeData.UGCCount,
                        'MileagePlusNumberOfCompany': $scope.data.preSelectedAccount.mileagePlusNumberOfCompany,
                        // fix kevin 2020.12.17
                        "accountId": $scope.data.preSelectedAccount.accountId,
                    };

                    $scope.data.upgradeResult = {
                        'SuccessItems': [],
                        'FailedItems': [],
                        'MileagePlusNumberOfCompany': $scope.data.preSelectedAccount.mileagePlusNumberOfCompany,
                        'Msgs': []
                    };

                    var reqCounter = 0;
                    $scope.commitTranscationSuccessItem = [];

                    AmenityService.preDeductAccountBalance(
                      payerId,
                      $scope.data.upgradeData.TotalCost,
                      $rootScope.currentUser.id,
                      agreementsIds,
                      deduct).then(function (value) {
                        //20170620 add pendingAmountObjId
                        $scope.pendingAmountObjId = value.pendingAmountObjId;
                        if (value.success) {
                            //20190523 rwern PPR
                            if ($scope.data.upgradeData.UGCCount > 0) {
                                reqCounter++;
                                //kevin fix 2021.1.4
                                UpgradeService.purchaseUpgrades(
                                  CM_RequestInfoToWSSWUFromUI,
                                  payerId,
                                  beneficiaryId,
                                  comment,
                                  $rootScope.currentUser.id,
                                  $scope.data.upgradeData.UGCTotal,
                                  $scope.data.callerAccount.accountId,
                                  $scope.pendingAmountObjId,
                                  agreementsIds,
                                  deduct
                                ).then(function (value1) {

                                    console.log("$scope.data.callerAccount",$scope.data.callerAccount)
                                    var item = {
                                        'Name': 'PlusPoints',
                                        'Count': $scope.data.upgradeData.UGCCount,
                                        'UnitPrice': $scope.data.upgradeData.UGCUnitCost,
                                        'Total': $scope.data.upgradeData.UGCTotal,
                                        'ExpiryDate': value1.ExpirationDate
                                    };
                                    reqCounter--;
                                    if (value1.success) {
                                        $scope.data.upgradeResult.SuccessItems.push(item);
                                        $scope.commitTranscationSuccessItem.push(value1);
                                        // kevin fix 2021.1.4
                                        $rootScope.mainSpinner = false;
                                        $scope.commitTranscationNumber = value1.transactionNumber
                                    }
                                    else {
                                        if (value1.messages.length > 0) {
                                            item.msg = value1.messages[0];
                                        }
                                        $scope.data.upgradeResult.FailedItems.push(item);
                                    }
                                    $scope.checkResult(reqCounter, $scope.data.upgradeResult);
                                }, function (err) {

                                    reqCounter--;
                                    $scope.data.upgradeResult.Msgs.push(err);
                                    $scope.checkResult(reqCounter, $scope.data.upgradeResult);
                                });
                            }
                        } else {

                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: value.messages[0]
                              });
                        }
                    }, function (err) {

                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                          });
                    });

                }
            });
            $scope.msgModal.on('hidden.bs.modal', function (e) {

                if ($scope.shouldCheckBalance) {
                    $scope.shouldCheckBalance = false;
                }
                $rootScope.$broadcast('refreshSelectedAccount', {});
            });
            $scope.email = {
                sendMe: false
            };
            $scope.sendEmail = function () {

                if ($scope.email.sendMe) {
                    AmenityService.sendEmail(
                      $rootScope.currentUser.id,
                      $scope.data.upgradeData.transactionNumber
                    ).then(function () {

                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'success',
                              text: '{!JSENCODE($Label.Sip_Info_Email_Sent)}'
                          });
                    }, function (err) {

                        console.debug(err);
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Email_Not_Sent)}'
                          });
                    })
                }
            };
        }
    })();
    (function () {
        'use strict';
        angular.module('bankingModule')
          .controller('statusNominationMassController', controller)

        controller.$inject = ['$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$window', 'StatusNominationService', 'util', 'dataURLtoBlobService', 'AccountService', 'AmenityService'];

        function controller($rootScope, $scope, $state, $stateParams, $timeout, $window, StatusNominationService, util, dataURLtoBlobService, AccountService, AmenityService) {
            $scope.statusLists = [];
            $scope.noPermissionList = [];
            $scope.reasonList = [];
            // 2018-10-26. REQ-0421. Suraphol. (Gray screen)
            $scope.mpNumber = null;
            // $scope.addNewMpCustomerList = [];

            $scope.statusFeature = $stateParams.feature;
            $scope.isShowFilter = false;
            $scope.isShowHeaderFilter = false;
            // init upload result page table display status
            $scope.isShowUploadWarning = true;
            $scope.isShowUploadFail = true;
            // init transaction page table display status
            $scope.isShowConfimrInprogress = true;
            $scope.isShowConfirmSuccess = true;
            $scope.isShowConfirmFail = true;
            $scope.isSendReceipEmial = true;
            $scope.isSendReceipEmial2 = false;
            $scope.listLimitTo = 500;
            $scope.filteredMpList = [];
            $scope.noActionMpList = [];
            // $scope.addedMpDataList = [];
            $scope.newMpCustomerFilteredList = [];
            $scope.isFiltered = false;
            $scope.snmSpinner = false;
            $scope.programYear = {!JSENCODE($Label.SipSnm_Program_Year)
        };
            $scope.cLevelEffectiveDate = $scope.programYear + '-' + '{!JSENCODE($Label.SipSnm_Feb_1st)}';
            $scope.showBenefiLabel = $rootScope.currentUser.isInternalUser;

            if ($scope.data && $scope.data.preSelectedAccount) {
                $scope.hasGsPermission = ($rootScope.currentPermission.SIP_Global_Service_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations) || (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent || $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) && ($scope.data.preSelectedAccount.typeName === $rootScope.ACC_TYPE.aor) && $scope.data.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations);
                $scope.hasFbPermission = $scope.data.preSelectedAccount.bankingBalanceAccess &&
                  (($rootScope.currentPermission.SIP_Access_Banking_Balance__c &&
                    $scope.data.preSelectedAccount.typeName !== 'Discretionary') ||
                    ($rootScope.currentUser.permission.Access_Banking_Balance_Internal_Account__c &&
                      $scope.data.preSelectedAccount.typeName === 'Discretionary'));
            }

            // init page navigation
            $scope.pageLists = [5, 10, 25, 50, 100];
            $scope.rowsperpage = 25;
            $scope.selectedPageNumber = 1;
            $scope.pageNavigationList = [];
            $scope.pageStartNo = 1;
            $scope.pageEndNo = 25;
            $scope.pageLengthLimit = 16;
            $scope.middleStartNo = 0;
            $scope.middleEndNo = 0;
            $scope.discountProductMap = {};

            //sort function
            $scope.orderByValue = 'nominationDate';
            $scope.orderReverse = true;

            initNomiData();
            initStatusList();
            initMpList();
            initFilterObj();
            // initPageNavigation();

            //20190107 rwern REQ-0694
            // Check to see if any nomination batches are in progress
            checkNominationBatchStatus();

            $scope.setOrderFunc = function (typeVal) {
                if (typeVal === $scope.orderByValue) {
                    $scope.orderReverse = !$scope.orderReverse;
                    return;
                }
                $scope.orderReverse = false;
                $scope.orderByValue = typeVal;
            };

            $scope.showFilter = function () {
                $scope.isShowFilter = true;
            };

            $scope.hideFilter = function () {
                $scope.isShowFilter = false;
            };

            $scope.setFilterDropdownData = function (alist, value) {
                $scope.filterParamObj[value] = alist;
                $scope.filterEvent();
            };
            $scope.getAccClass = util.getAccClass;

            $scope.getAccSymbol = util.getAccSymbol;

            $scope.getAccTitle = util.getAccTitle;

            function initNomiData() {
                if (!$scope.data.nominationData) {
                    $scope.data.nominationData = {
                        'noActionCount': 0,
                        'disabledMpCount': 0,
                        'isMpUpdated': false,
                        'shopCarFundBal': 0,
                        'shopCarGSBal': 0,
                        'shopCarItems': 0,
                        'isShowGoback': false,
                        'isTransactionSuccess': true,// control whether you can leave the page or not when payment is in progress; init = true, so when can leave page even if the payment action is fail.
                        'selectStatusInfoList': [],
                        'purchaseList': [],
                        'addNewMpCustomerList': [],
                        'addedMpDataList': [],
                        'purchaseSuccessList': [],
                        'purchaseFailList': [],
                        'account': {},
                        'stateChangeCheckList': ['apply-status-nomination-mass', 'nomination-review-summary', 'nomination-upload-result', 'nomination-review-purchase']
                    };
                } else {
                    // clear addNewMpCustomerList when change from annual review table to report table
                    if ($scope.statusFeature === 'apply-status-nomination-report') {
                        $scope.data.nominationData.addNewMpCustomerList = [];
                        $scope.data.nominationData.isMpUpdated = false;
                    }
                }
                if ($scope.data.nomiProductList) {
                    //Shivani REQ-0823 added 'totalCost':0
                    if ($scope.data.nominationData.selectStatusInfoList.length == 0) {
                        $scope.data.nominationData.selectStatusInfoList = [{
                            'statusType': $scope.data.nomiProductList.silver.ProductName,
                            'totalCost': 0,
                            'noOfStatus': 0,
                            'costPerStatus': $scope.data.nomiProductList.silver.UnitPrice,
                            'expiryDate': null,
                        },
                            {
                                'statusType': $scope.data.nomiProductList.gold.ProductName,
                                'totalCost': 0,
                                'noOfStatus': 0,
                                'costPerStatus': $scope.data.nomiProductList.gold.UnitPrice,
                                'expiryDate': null,
                            }, {
                                'statusType': $scope.data.nomiProductList.platinum.ProductName,
                                'totalCost': 0,
                                'noOfStatus': 0,
                                'costPerStatus': $scope.data.nomiProductList.platinum.UnitPrice,
                                'expiryDate': null,
                            }, {
                                'statusType': $scope.data.nomiProductList.oneK.ProductName,
                                'totalCost': 0,
                                'noOfStatus': 0,
                                'costPerStatus': $scope.data.nomiProductList.oneK.UnitPrice,
                                'expiryDate': null,
                            }, {
                                'statusType': $scope.data.nomiProductList.globalService.ProductName,
                                'totalCost': 0,
                                'noOfStatus': 0,
                                'costPerStatus': 0,
                                'expiryDate': null,
                            }];
                    }
                    $scope.filterStatusLists = [$scope.data.nomiProductList.silver.ProductName,
                        $scope.data.nomiProductList.gold.ProductName,
                        $scope.data.nomiProductList.platinum.ProductName,
                        $scope.data.nomiProductList.oneK.ProductName,
                        $scope.data.nomiProductList.globalService.ProductName,
                        '{!JSENCODE($Label.SipSnm_No_Action)}'];
                }
            }

            // The displayed levels should be allowed in the logged in user's User Management record.
            function initStatusList() {
                if ($rootScope.currentPermission && $scope.data.nomiProductList) {
                    var obj = {};
                    if ($rootScope.currentPermission.SIP_Silver_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.SilverStatusNominations) {
                        obj = {
                            id: 1,
                            status: $scope.data.nomiProductList.silver.ProductName + " - $" + $scope.data.nomiProductList.silver.UnitPrice
                        };
                        $scope.statusLists.push(obj);
                    } else {
                        $scope.noPermissionList.push($scope.data.nomiProductList.silver.ProductName);
                    }
                    if ($rootScope.currentPermission.SIP_Gold_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.GoldStatusNominations) {
                        obj = {
                            id: 2,
                            status: $scope.data.nomiProductList.gold.ProductName + " - $" + $scope.data.nomiProductList.gold.UnitPrice
                        };
                        $scope.statusLists.push(obj);
                    } else {
                        $scope.noPermissionList.push($scope.data.nomiProductList.gold.ProductName);
                    }
                    if ($rootScope.currentPermission.SIP_Platinum_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.PlatinumStatusNominations) {
                        obj = {
                            id: 3,
                            status: $scope.data.nomiProductList.platinum.ProductName + " - $" + $scope.data.nomiProductList.platinum.UnitPrice
                        };
                        $scope.statusLists.push(obj);
                    } else {
                        $scope.noPermissionList.push($scope.data.nomiProductList.platinum.ProductName);
                    }
                    if ($rootScope.currentPermission.SIP_1K_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.KStatusNominations) {
                        obj = {
                            id: 4,
                            status: $scope.data.nomiProductList.oneK.ProductName + " - $" + $scope.data.nomiProductList.oneK.UnitPrice
                        };
                        $scope.statusLists.push(obj);
                    } else {
                        $scope.noPermissionList.push($scope.data.nomiProductList.oneK.ProductName);
                    }
                    if ($rootScope.currentPermission.SIP_Global_Service_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations) {
                        obj = {
                            id: 5,
                            status: $scope.data.nomiProductList.globalService.ProductName
                        };
                        $scope.statusLists.push(obj);
                    } else {
                        $scope.noPermissionList.push($scope.data.nomiProductList.globalService.ProductName)
                    }
                    obj = {
                        id: 6,
                        status: '{!JSENCODE($Label.SipSnm_No_Action)}'
                    }
                    $scope.statusLists.push(obj);
                }
            }

            function initAfterAddCustomMp() {
                //Jason
                //When adding a record, by default, select a radio
                if ($scope.newMpCustomerFilteredList && $scope.newMpCustomerFilteredList.length > 0) {
                    var item = $scope.newMpCustomerFilteredList[0]['beneOrReason'] = 'Beneficiary';
                }

            }


            function initMpList() {
                if ($scope.statusFeature === 'apply-status-nomination-mass' && $scope.data.mpNumberList) {
                    $scope.data.nominationData.noActionCount = 0;
                    $scope.data.nominationData.disabledMpCount = 0;
                    $scope.data.nominationData.shopCarItems = 0;
                    $scope.data.nominationData.shopCarFundBal = 0;
                    $scope.data.nominationData.shopCarGSBal = 0;
                    for (let j = 0; j < $scope.data.nominationData.selectStatusInfoList.length; j++) {
                        $scope.data.nominationData.selectStatusInfoList[j].noOfStatus = 0;
                        //Shivani REQ-0823 changes
                        $scope.data.nominationData.selectStatusInfoList[j].totalCost = 0;
                    }

                    for (let i = 0; i < $scope.data.mpNumberList.length; i++) {
                        var item = $scope.data.mpNumberList[i];
                        var openDate = new Date($scope.data.dates.openDate).getTime();
                        var closeDate = new Date($scope.data.dates.closeDate).getTime();
                        var nomiDate = new Date(item.nominationDate).getTime();
                        //Shivani REQ-0823 added
                        $scope.currentMpNumber = item.mpNumber;
                        if (item.minGuarLevel != undefined) {
                            var level = item.minGuarLevel == '1k' ? 'oneK' : item.minGuarLevel;
                            $scope.discountProductMap[item.mpNumber] = $scope.data.nomiProductList[level.toLowerCase()] ? $scope.data.nomiProductList[level.toLowerCase()].UnitPrice : 0;
                        }
                        //End
                        //1. If Nomination Date is between the Open Date and Close Date,disable the drop down
                        //2.If the MP has 'Disqualifed Indicator' = 'Y' in the MileagePlus Numbers object, disable the dropdown
                        //3. If the MP has 'Victim Indicator' = 'Y' in the MileagePlus Numbers object, disable the dropdown
                        // if nomiDate is undefined, then enable then enable the drop down
                        if ((!nomiDate || (closeDate < nomiDate || openDate > nomiDate)) && item.victimIndicator !== 'Y' && item.disqualIndicator !== 'Y' && !$rootScope.IsImpersonation) {
                            item.displayedNominationLevel = convertStatusShortToLong(item.nominationLevel);
                            item.isEnableNominationLevel = true;
                        } else {
                            if (closeDate >= nomiDate && openDate <= nomiDate) {
                                item.isNomiDateValid = true;
                                item.displayedNominationLevel = item.nominatedLevel;
                            } else {
                                item.displayedNominationLevel = convertStatusShortToLong(item.nominationLevel);
                            }
                            item.isEnableNominationLevel = false;
                            $scope.data.nominationData.disabledMpCount++;
                        }

                        //Only allow selection of level greater than the minimum guaranteed level.
                        //item.statusLists = mapNominationLevel(item.minGuarLevel);
                        //Shivani REQ-0823
                        item.priceLists = discountedPriceList(item.minGuarLevel);
                        // culculate shooping car
                        if (item.nominationLevel && item.isEnableNominationLevel && item.hasStatusPermission) {
                            calculateShoppingcar(item.displayedNominationLevel, 'plus');
                        }
                        //for internal user
                        if ($rootScope.currentUser.isInternalUser) {
                            if (!item.reason && !item.beneficiaryId) {
                                item.beneOrReason = 'Beneficiary';
                                //auto populate the Beneficiary field with the organization name/id field
                                item.beneficiaryName = item.orgName;
                                item.beneficiaryId = item.orgRecordId;
                            } else if (item.beneficiaryId) {
                                item.beneOrReason = 'Beneficiary';
                            } else if (item.reason) {
                                item.beneOrReason = 'Reason';
                            }
                            // check reason/beneficiary/comments
                            if (item.nominationLevel && item.isEnableNominationLevel) {
                                item.isValid = checkValid(item);
                            }
                        }
                    }
                    distiguishMpList($scope.data.mpNumberList);
                }

                if ($scope.statusFeature === 'apply-status-nomination-mass' && $scope.data.nominationData.addNewMpCustomerList && $scope.data.nominationData.addNewMpCustomerList.length > 0) {
                    for (let i = 0; i < $scope.data.nominationData.addNewMpCustomerList.length; i++) {
                        var item2 = $scope.data.nominationData.addNewMpCustomerList[i];
                        // culculate shooping car
                        if (item2.nominationLevel && item2.isEnableNominationLevel) {
                            calculateShoppingcar(item2.displayedNominationLevel, 'plus');
                        }
                    }
                }
            }

            function mapNominationLevel(level) {
                var levelId = 0;
                var result = [];
                if (level) {
                    level = level.toLowerCase();
                }
                if ($scope.data.nomiProductList) {
                    switch (level) {
                        case $scope.data.nomiProductList.silver.ProductName.toLowerCase():
                            levelId = 1;
                            break;
                        case $scope.data.nomiProductList.gold.ProductName.toLowerCase():
                            levelId = 2;
                            break;
                        case $scope.data.nomiProductList.platinum.ProductName.toLowerCase():
                            levelId = 3;
                            break;
                        case $scope.data.nomiProductList.oneK.ProductName.toLowerCase():
                            levelId = 4;
                            break;
                        case $scope.data.nomiProductList.globalService.ProductName.toLowerCase():
                            levelId = 5;
                            break;
                    }
                }


                return result;
            }

            //Shivani REQ-0823 method added
            function discountedPriceList(level) {
                var result = [];
                var discountedPrice = 0;
                var levelId = 0;
                if (level) {
                    level = level.toLowerCase();
                }
                if ($scope.data.nomiProductList) {
                    switch (level) {
                        case $scope.data.nomiProductList.silver.ProductName.toLowerCase():
                            discountedPrice = $scope.data.nomiProductList.silver.UnitPrice;
                            levelId = 1;
                            break;
                        case $scope.data.nomiProductList.gold.ProductName.toLowerCase():
                            discountedPrice = $scope.data.nomiProductList.gold.UnitPrice;
                            levelId = 2;
                            break;
                        case $scope.data.nomiProductList.platinum.ProductName.toLowerCase():
                            discountedPrice = $scope.data.nomiProductList.platinum.UnitPrice;
                            levelId = 3;
                            break;
                        case $scope.data.nomiProductList.oneK.ProductName.toLowerCase():
                            discountedPrice = $scope.data.nomiProductList.oneK.UnitPrice;
                            levelId = 4;
                            break;
                        case $scope.data.nomiProductList.globalService.ProductName.toLowerCase():
                            discountedPrice = $scope.data.nomiProductList.globalService.UnitPrice;
                            levelId = 5;
                            break;
                    }
                }

                $scope.statusLists.forEach(function (item) {
                    if (item.id > levelId) {
                        var status = item.status.split(" - $");
                        if (status[1] && !isNaN(status[1])) {
                            result.push(
                              status[0] + " - $" + String(parseInt(status[1] - discountedPrice))
                            );
                        } else {
                            result.push(item.status);
                        }
                    }
                });
                return result;
            }
            //end

            function distiguishMpList(list) {
                $scope.noActionMpList = [];
                $scope.filteredMpList = [];
                if (list) {
                    for (let i = 0; i < list.length; i++) {
                        var noAction = '{!JSENCODE($Label.SipSnm_No_Action)}';
                        if (list[i].nominationLevel && list[i].nominationLevel.toLowerCase() === noAction.toLowerCase()) {
                            $scope.noActionMpList.push(list[i]);
                        } else {
                            $scope.filteredMpList.push(list[i]);
                        }
                    }
                }
            }

            $scope.resetFilter = initFilterObj;


            function initFilterObj() {
                $scope.isFiltered = false;
                //filter param obj
                $scope.filterParamObj = $scope.statusFeature === 'apply-status-nomination-mass' ? {
                    'mpNumber': '',
                    'customerName': '',
                    'existingTierLevel': '',
                    'nominationStartDate': '',
                    'nominationEndDate': '',
                    'minGuarLevel': '',
                    'displayedNominationLevel': ''
                    // 'nominationLevel':''
                } : {
                    'mpNumber': '',
                    'customerName': '',
                    'existingTierLevel': '',
                    'nominationStartDate': '',
                    'nominationEndDate': '',
                    'minGuarLevel': '',
                };
                $(".nomiLavel-checkbox").attr('checked', false);
                $scope.nomiLevelFilterList = [false, false, false, false, false, false];
                distiguishMpList($scope.data.mpNumberList);
                //reset new added list
                $scope.newMpCustomerFilteredList = [];
                if ($scope.data.nominationData && $scope.data.nominationData.addNewMpCustomerList) {
                    $scope.data.nominationData.addNewMpCustomerList.forEach(function (item) {
                        $scope.newMpCustomerFilteredList.push(item);
                    });
                }
                initPageNavigation();
            }

            // start of page navigation

            // page navigation
            $scope.setPageRows = function (plist) {
                $scope.rowsperpage = plist;
                initPageNavigation();
            };

            function initPageNavigation() {
                // clear page navigation list before init again.
                $scope.pageNavigationList = [];
                var pageNavigationListLen = 0;
                // reset selectedPageNumber when change page rows.
                $scope.selectedPageNumber = 1;
                var totalLength = $scope.filteredMpList.length + $scope.noActionMpList.length + $scope.newMpCustomerFilteredList.length;
                if ($scope.data && $scope.filteredMpList) {
                    pageNavigationListLen = Math.ceil(totalLength / $scope.rowsperpage);
                    for (let i = 0; i < pageNavigationListLen; i++) {
                        $scope.pageNavigationList.push(i + 1);
                    }
                    if (pageNavigationListLen <= 1) {
                        $scope.isLastPage = true;
                    } else {
                        $scope.isLastPage = false;
                    }
                    $scope.middleStartNo = $scope.selectedPageNumber - $scope.pageLengthLimit / 2;
                    $scope.middleEndNo = $scope.selectedPageNumber + $scope.pageLengthLimit / 2;
                    if (($scope.middleStartNo > 1 && $scope.selectedPageNumber < $scope.pageLengthLimit) || $scope.selectedPageNumber === 1) {
                        $scope.middleEndNo++;
                    }
                    if ($scope.selectedPageNumber > pageNavigationListLen - $scope.pageLengthLimit && $scope.selectedPageNumber >= pageNavigationListLen) {
                        $scope.middleStartNo--;
                    }
                    displayMpList();
                }
            }

            function displayMpList() {
                // $scope.displayedMpList = [];
                $scope.totalLength = $scope.filteredMpList.length + $scope.noActionMpList.length + $scope.newMpCustomerFilteredList.length;
                var end = $scope.selectedPageNumber * $scope.rowsperpage < $scope.totalLength ? $scope.selectedPageNumber * $scope.rowsperpage : $scope.totalLength;
                var start = $scope.totalLength > 0 ? ($scope.selectedPageNumber - 1) * $scope.rowsperpage : 0;
                $scope.pageStartNo = start;
                $scope.pageEndNo = end;
            }

            $scope.forwardStep = function (step) {
                var totalLength = $scope.filteredMpList.length + $scope.noActionMpList.length + $scope.newMpCustomerFilteredList.length;
                var pageNavigationListLen = totalLength / $scope.rowsperpage;
                if (typeof (step) === "string") {
                    switch (step) {
                        case 'first':
                            $scope.selectedPageNumber = 1;
                            break;
                        case 'pre':
                            if ($scope.selectedPageNumber > 1) {
                                $scope.selectedPageNumber--;
                            }
                            break;
                        case 'next':
                            if ($scope.selectedPageNumber < Math.ceil(totalLength / $scope.rowsperpage)) {
                                $scope.selectedPageNumber++;
                            }
                            break;
                        case 'last':
                            $scope.selectedPageNumber = Math.ceil(totalLength / $scope.rowsperpage);
                            break;
                    }

                } else if (typeof (step) === 'number') {
                    $scope.selectedPageNumber = step;
                }
                if ($scope.selectedPageNumber >= (totalLength / $scope.rowsperpage)) {
                    $scope.isLastPage = true;
                } else {
                    $scope.isLastPage = false;
                }
                $scope.middleStartNo = $scope.selectedPageNumber - $scope.pageLengthLimit / 2;
                $scope.middleEndNo = $scope.selectedPageNumber + $scope.pageLengthLimit / 2;
                if (($scope.middleStartNo > 1 && $scope.selectedPageNumber < $scope.pageLengthLimit) || $scope.selectedPageNumber === 1) {
                    $scope.middleEndNo++;
                }
                if ($scope.selectedPageNumber > pageNavigationListLen - $scope.pageLengthLimit && $scope.selectedPageNumber >= pageNavigationListLen) {
                    $scope.middleStartNo--;
                }
                displayMpList();
            };

            // end of page navigation

            $scope.setNoActionMpList = function (item) {
                var mpList = [];
                if ($scope.isFiltered) {
                    mpList = $scope.filterResultList;
                } else {
                    mpList = $scope.data.mpNumberList;
                }
                // if the record that user update is not the current row than resort the mpNumberList
                if ($scope.currentRow && item.mpNumber !== $scope.currentRow.mpNumber) {
                    $scope.currentRow.isShowToggle = false;
                    distiguishMpList(mpList);
                }
            }


            $scope.setNomiLevel = function (slist, param, type) {
                if (type === 'mpNumberList') {
                    $scope.data.nominationData.isMpUpdated = true;
                    var mpList = [];
                    if ($scope.isFiltered) {
                        mpList = $scope.filterResultList;
                    } else {
                        mpList = $scope.data.mpNumberList;
                    }
                    // mark current mpNuber in case change the nomi level of different records.
                    $scope.currentMpNumber = param;
                    var preNomiLevel = '';
                    var preMpNumber = $scope.currentRow ? $scope.currentRow.mpNumber : '';
                    //all data update in displayedMpList should also be updated in the mpNumberList
                    _.forEach(mpList, function (item) {
                        if (item.mpNumber === param) {
                            item.isShowToggle = true;
                            preNomiLevel = item.nominationLevel;
                            //only calculate the record that has permission
                            if (item.displayedNominationLevel && item.hasStatusPermission) {
                                calculateShoppingcar(item.displayedNominationLevel, 'minus');
                            }
                            if (!item.hasStatusPermission) {
                                item.hasStatusPermission = true;
                            }
                            calculateShoppingcar(slist, 'plus');
                            item.displayedNominationLevel = slist;
                            item.nominationLevel = convertStatusLongToShort(slist);

                            if ($rootScope.currentUser.isInternalUser && item.isEnableNominationLevel && item.nominationLevel) {
                                if (item.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                    item.isValid = checkValid(item);
                                } else {
                                    item.isValid = true;
                                }
                            }
                            if ($scope.currentRow) {
                                // only internal user need to check if it is valid.
                                // If nomination level is disable, there is no need to check valid
                                // If nominationLevel = 'No Action', there is no need to check valid
                                // IF currentRow = item, then just change the nomination level if not then check validation.
                                if ($scope.currentRow.mpNumber !== item.mpNumber) {
                                    $scope.currentRow.isShowToggle = false;
                                    if ($rootScope.currentUser.isInternalUser && $scope.currentRow.isEnableNominationLevel && $scope.currentRow.nominationLevel) {
                                        if ($scope.currentRow.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                            $scope.currentRow.isValid = checkValid($scope.currentRow);
                                        } else {
                                            $scope.currentRow.isValid = true;
                                        }
                                    }
                                    $scope.currentRow = item;
                                    if ($scope.currentRow.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                        $scope.currentRow.isValid = checkValid($scope.currentRow);
                                    } else {
                                        $scope.currentRow.isValid = true;
                                    }
                                }
                            } else {
                                $scope.currentRow = item;
                            }
                            // break;
                        }
                    });
                    // mark current mpNuber in case change the nomi level of different records.
                    $scope.currentMpNumber = param;
                    if (preNomiLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                        distiguishMpList(mpList);
                    }
                } else if (type === 'addNewMpCustomerList') {
                    // mark current mpNuber in case change the nomi level of different records.
                    $scope.currentMpNumber = param;
                    $scope.data.nominationData.isMpUpdated = true;
                    // for (let index in $scope.data.nominationData.addNewMpCustomerList) {
                    _.forEach($scope.data.nominationData.addNewMpCustomerList, function (item2) {
                        // var item2 = $scope.data.nominationData.addNewMpCustomerList[index];
                        if (item2.mpNumber === param) {
                            item2.isShowToggle = true;
                            if (item2.displayedNominationLevel) {
                                calculateShoppingcar(item2.displayedNominationLevel, 'minus');
                            }
                            calculateShoppingcar(slist, 'plus');
                            item2.displayedNominationLevel = slist;
                            item2.nominationLevel = convertStatusLongToShort(slist);

                            if ($scope.currentRow) {
                                if ($scope.currentRow.mpNumber !== item2.mpNumber) {
                                    $scope.currentRow.isShowToggle = false;

                                    // $scope.currentRow.isShowToggle = false;
                                    if ($rootScope.currentUser.isInternalUser && $scope.currentRow.isEnableNominationLevel && $scope.currentRow.nominationLevel) {
                                        if ($scope.currentRow.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                            $scope.currentRow.isValid = checkValid($scope.currentRow);
                                        } else {
                                            $scope.currentRow.isValid = true;
                                        }
                                    }
                                    // $scope.currentRow = item;

                                    $scope.currentRow = item2;
                                    if ($scope.currentRow.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                        $scope.currentRow.isValid = checkValid($scope.currentRow);
                                    } else {
                                        $scope.currentRow.isValid = true;
                                    }
                                }
                            } else {
                                $scope.currentRow = item2;
                            }
                        }
                    })
                } else if (type === 'filterParamObj') {
                    $scope.filterParamObj[param] = slist;
                }
            };


            $scope.setNomiLevelFilter = function (slist) {
                var levelList = [];
                $scope.nomiLevelFilterList.forEach(function (item, index) {
                    if (item) {
                        levelList.push($scope.filterStatusLists[index]);
                    }
                });
                // Only filter the nomination level that shows in the table
                // $scope.filterParamObj.nominationLevel = levelList.join(',');
                $scope.filterParamObj.displayedNominationLevel = levelList.join(',');
                $("#nomiLevFilter").dropdown('toggle');
            };

            $scope.closeToggle = function (mpNumber, type) {
                var list = [];
                if (type === 'addNewMpCustomerList') {
                    list = $scope.data.nominationData.addNewMpCustomerList;
                } else {
                    list = $scope.data.mpNumberList;
                }
                //Enhance the table UI so that user can only expand 1 row at a time.
                var mpItem = getItemByMpNumber(list, mpNumber);
                if (mpItem && $scope.currentRow && mpItem.mpNumber === $scope.currentRow.mpNumber) {
                    mpItem.isShowToggle = !mpItem.isShowToggle;
                    if (mpItem.isEnableNominationLevel && $rootScope.currentUser.isInternalUser && mpItem.nominationLevel) {
                        if (mpItem.nominationLevel === '{!JSENCODE($Label.SipSnm_No_Action)}') {
                            mpItem.isValid = true;
                        } else {
                            mpItem.isValid = checkValid(mpItem);
                        }
                    }
                } else {
                    if ($scope.currentRow) {
                        if ($scope.currentRow.isEnableNominationLevel && $rootScope.currentUser.isInternalUser && $scope.currentRow.nominationLevel) {
                            if ($scope.currentRow.nominationLevel === '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                $scope.currentRow.isValid = true;
                            } else {
                                $scope.currentRow.isValid = checkValid($scope.currentRow);
                            }
                        }
                        $scope.currentRow.isShowToggle = false;
                    }
                    $scope.currentRow = mpItem;
                    $scope.currentRow.isShowToggle = true;
                }
                if (!type) {
                    if ($scope.isFiltered) {
                        distiguishMpList($scope.filterResultList);
                    } else {
                        distiguishMpList($scope.data.mpNumberList);
                    }
                }
            };

            //jason added
            $scope.closeAllToggle = function () {
                _.forEach($scope.newMpCustomerFilteredList, function (item) {
                    item.isShowToggle = false;
                })
                _.forEach($scope.filteredMpList, function (item) {
                    item.isShowToggle = false;
                })
            }

            function getItemByMpNumber(list, mpNumber) {
                var result = null;
                for (let i in list) {
                    if (list[i].mpNumber === mpNumber) {
                        result = list[i];
                        break;
                    }
                }
                return result;
            }

            function checkValid(obj) {
                // 2018-10-26. REQ-0421. Suraphol. (Gray screen)
                if (((obj.beneficiaryName && obj.beneficiaryId) || obj.reason) && obj.comments) {
                    return true;
                } else {
                    return false;
                }
            }

            $scope.getReason = function () {
                if ($scope.reasonList.length <= 0) {
                    StatusNominationService.getReasonValues().then(function (value) {
                        $scope.reasonList = value;
                    }, function (err) {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                }
            };

            $scope.setReason = function (slist, param, type) {
                $scope.data.nominationData.isMpUpdated = true;
                if (type === 'mpNumberList') {
                    $scope.data.nominationData.isMpUpdated = true;

                    //all data update in displayedMpList should also be updated in the mpNumberList
                    // for current item
                    for (let index in $scope.data.mpNumberList) {
                        if ($scope.data.mpNumberList[index].mpNumber === param) {
                            $scope.data.mpNumberList[index].reason = slist;
                            break;
                        }
                    }

                    // for new item
                    // debugger

                    distiguishMpList($scope.data.mpNumberList);
                } else if (type === 'addNewMpCustomerList') {
                    for (let index in $scope.data.nominationData.addNewMpCustomerList) {
                        if ($scope.data.nominationData.addNewMpCustomerList[index].mpNumber === param) {
                            $scope.data.nominationData.addNewMpCustomerList[index].reason = slist;
                            break;
                        }
                    }
                }
            };

            $scope.beneOrReasonChange = function (mpNumber, value) {
                $scope.data.nominationData.isMpUpdated = true;
                for (let index in $scope.data.mpNumberList) {
                    var item = $scope.data.mpNumberList[index];
                    if (item.mpNumber === mpNumber) {
                        if (value === 'Beneficiary') {
                            item.reason = "";
                        } else if (value === 'Reason') {
                            item.beneficiaryName = "";
                            item.beneficiaryId = "";
                        }
                        break;
                    }
                }
                for (let index in $scope.newMpCustomerFilteredList) {
                    var item = $scope.newMpCustomerFilteredList[index];
                    if (item.mpNumber === mpNumber) {
                        if (value === 'Beneficiary') {
                            item.reason = "";
                        } else if (value === 'Reason') {
                            item.beneficiaryName = "";
                            item.beneficiaryId = "";
                        }
                        break;
                    }
                }

            };

            function convertStatusLongToShort(option) {
                var val = "";
                if ($scope.data.nomiProductList) {
                    /*switch (option) {
                        case  $scope.data.nomiProductList.silver.ProductName + " - $" + $scope.data.nomiProductList.silver.UnitPrice:
                            val = $scope.data.nomiProductList.silver.ProductName;
                            break;
                        case $scope.data.nomiProductList.gold.ProductName + " - $" + $scope.data.nomiProductList.gold.UnitPrice:
                            val = $scope.data.nomiProductList.gold.ProductName;
                            break;
                        case $scope.data.nomiProductList.platinum.ProductName + " - $" + $scope.data.nomiProductList.platinum.UnitPrice:
                            val = $scope.data.nomiProductList.platinum.ProductName;
                            break;
                        case $scope.data.nomiProductList.oneK.ProductName + " - $" + $scope.data.nomiProductList.oneK.UnitPrice:
                            val = $scope.data.nomiProductList.oneK.ProductName;
                            break;
                        case $scope.data.nomiProductList.globalService.ProductName:
                            val = $scope.data.nomiProductList.globalService.ProductName;
                            break;
                        case '{!JSENCODE($Label.SipSnm_No_Action)}':
                            val = "{!JSENCODE($Label.SipSnm_No_Action)}";
                            break;
                    }*/

                    //Shivani REQ-0823 modified method
                    if (option.indexOf(" - $") != -1) {
                        val = option.split(" - $")[0];
                    } else {
                        val = option;
                    }
                }
                return val;
            }

            function convertStatusShortToLong(option) {
                var val = "";
                if (option) {
                    //Shivani REQ-0823 modified method
                    var selectedProduct = option.toLowerCase();
                    selectedProduct = selectedProduct == '1k' ? 'oneK' : (selectedProduct == 'global services' ? 'globalService' : selectedProduct);
                    if (selectedProduct == '{!JSENCODE($Label.SipSnm_No_Action)}') {
                        val = "{!JSENCODE($Label.SipSnm_No_Action)}";
                    } else if (selectedProduct == 'globalService') {
                        val = $scope.data.nomiProductList[selectedProduct].ProductName;
                    }
                    else if ($scope.data.nomiProductList && $scope.data.nomiProductList[selectedProduct]) {
                        val = $scope.data.nomiProductList[selectedProduct].ProductName + " - $" + ($scope.discountProductMap && $scope.discountProductMap[$scope.currentMpNumber] ? $scope.data.nomiProductList[selectedProduct].UnitPrice - $scope.discountProductMap[$scope.currentMpNumber] : $scope.data.nomiProductList[selectedProduct].UnitPrice);
                    }
                }
                //Shivani Commented
                /*if ($scope.data.nomiProductList) {
                    switch (option) {
                        case $scope.data.nomiProductList.silver.ProductName.toLowerCase():
                            val = $scope.data.nomiProductList.silver.ProductName + " - $" + $scope.data.nomiProductList.silver.UnitPrice;
                            break;
                        case $scope.data.nomiProductList.gold.ProductName.toLowerCase():
                            val = $scope.data.nomiProductList.gold.ProductName + " - $" + $scope.data.nomiProductList.gold.UnitPrice;
                            break;
                        case $scope.data.nomiProductList.platinum.ProductName.toLowerCase():
                            val = $scope.data.nomiProductList.platinum.ProductName + " - $" + $scope.data.nomiProductList.platinum.UnitPrice;
                            break;
                        case $scope.data.nomiProductList.oneK.ProductName.toLowerCase():
                            val = $scope.data.nomiProductList.oneK.ProductName + " - $" + $scope.data.nomiProductList.oneK.UnitPrice;
                            break;
                        case $scope.data.nomiProductList.globalService.ProductName.toLowerCase():
                            val = $scope.data.nomiProductList.globalService.ProductName;
                            break;
                        case '{!JSENCODE($Label.SipSnm_No_Action)}':
                            val = "{!JSENCODE($Label.SipSnm_No_Action)}";
                            break;
                    }
                }*/
                return val;
            }

            function calculateShoppingcar(option, type) {
                var selectedProduct = '';
                if (option) {
                    option = option.toLowerCase();
                    //Shivani REQ-0823 Changes.
                    if (option.indexOf(" - $") != -1) {
                        selectedProduct = option.split(" - $")[0];
                        selectedProduct = selectedProduct == '1k' ? 'oneK' : (selectedProduct == 'global services' ? 'globalService' : selectedProduct);
                        $scope.data.nomiProductList.globalService.UnitPrice = 1;
                    } else if (option == 'global services') {
                        selectedProduct = 'globalService';
                    }
                }
                if ($scope.data.nominationData && $scope.data.nominationData.selectStatusInfoList.length > 0) {
                    /* if (type == 'plus') {
                        $scope.data.nominationData.shopCarItems++;
                        switch (option) {
                            case $scope.data.nomiProductList.silver.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.silver.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal += 2000;
                                $scope.data.nominationData.selectStatusInfoList[0].noOfStatus++;
                                break;
                            case $scope.data.nomiProductList.gold.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.gold.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal += 4000;
                                $scope.data.nominationData.selectStatusInfoList[1].noOfStatus++;
                                break;
                            case $scope.data.nomiProductList.platinum.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.platinum.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal += 6000;
                                $scope.data.nominationData.selectStatusInfoList[2].noOfStatus++;
                                break;
                            case $scope.data.nomiProductList.oneK.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.oneK.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal += 8000;
                                $scope.data.nominationData.selectStatusInfoList[3].noOfStatus++;
                                break;
                            case $scope.data.nomiProductList.globalService.ProductName.toLowerCase():
                                $scope.data.nominationData.shopCarGSBal += 1;
                                $scope.data.nominationData.selectStatusInfoList[4].noOfStatus++;
                                break;
                            case '{!JSENCODE($Label.SipSnm_No_Action)}':
                                $scope.data.nominationData.shopCarItems--;
                                $scope.data.nominationData.noActionCount++;
                                break;
                        }
                    } else if (type == 'minus') {
                        $scope.data.nominationData.shopCarItems--;
                        /*switch (option) {
                            case $scope.data.nomiProductList.silver.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.silver.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal -= 2000;
                                $scope.data.nominationData.selectStatusInfoList[0].noOfStatus--;
                                break;
                            case $scope.data.nomiProductList.gold.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.gold.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal -= 4000;
                                $scope.data.nominationData.selectStatusInfoList[1].noOfStatus--;
                                break;
                            case $scope.data.nomiProductList.platinum.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.platinum.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal -= 6000;
                                $scope.data.nominationData.selectStatusInfoList[2].noOfStatus--;
                                break;
                            case $scope.data.nomiProductList.oneK.ProductName.toLowerCase() + " - $" + $scope.data.nomiProductList.oneK.UnitPrice:
                                $scope.data.nominationData.shopCarFundBal -= 8000;
                                $scope.data.nominationData.selectStatusInfoList[3].noOfStatus--;
                                break;
                            case $scope.data.nomiProductList.globalService.ProductName.toLowerCase():
                                $scope.data.nominationData.shopCarGSBal -= 1;
                                $scope.data.nominationData.selectStatusInfoList[4].noOfStatus--;
                                break;
                            case '{!JSENCODE($Label.SipSnm_No_Action)}':
                                $scope.data.nominationData.shopCarItems++;
                                $scope.data.nominationData.noActionCount--;
                                break;
                        }
                    } */
                    //Shivani REQ-0823 Changed
                    $scope.data.nominationData.shopCarItems = type == 'plus' ? $scope.data.nominationData.shopCarItems + 1 : $scope.data.nominationData.shopCarItems - 1;
                    if (option == '{!JSENCODE($Label.SipSnm_No_Action)}') {
                        $scope.data.nominationData.shopCarItems = type == 'plus' ? $scope.data.nominationData.shopCarItems - 1 : $scope.data.nominationData.shopCarItems + 1;
                        $scope.data.nominationData.noActionCount = type == 'plus' ? $scope.data.nominationData.noActionCount + 1 : $scope.data.nominationData.noActionCount - 1;
                    } else if (selectedProduct === 'globalService') {
                        $scope.data.nominationData.shopCarGSBal = type == 'plus' ? $scope.data.nominationData.shopCarGSBal + 1 : $scope.data.nominationData.shopCarGSBal - 1;
                        $scope.data.nominationData.selectStatusInfoList[4].noOfStatus = type == 'plus' ? $scope.data.nominationData.selectStatusInfoList[4].noOfStatus + 1 : $scope.data.nominationData.selectStatusInfoList[4].noOfStatus - 1;
                    } else {
                        if (selectedProduct && $scope.data.nomiProductList[selectedProduct]) {
                            var selectedProduct = $scope.data.nomiProductList[selectedProduct];
                            var discount = $scope.currentMpNumber && $scope.discountProductMap[$scope.currentMpNumber] ? $scope.discountProductMap[$scope.currentMpNumber] : 0;
                            var productTotalPrice = discount ? selectedProduct.UnitPrice - discount : selectedProduct.UnitPrice;

                            $scope.data.nominationData.shopCarFundBal = type == 'plus' ? $scope.data.nominationData.shopCarFundBal + productTotalPrice : $scope.data.nominationData.shopCarFundBal - productTotalPrice;

                            //Shivani REQ-0823 Used for summary page
                            $scope.data.nominationData.selectStatusInfoList[selectedProduct.productLevel - 1].noOfStatus = type == 'plus' ? $scope.data.nominationData.selectStatusInfoList[selectedProduct.productLevel - 1].noOfStatus + 1 : $scope.data.nominationData.selectStatusInfoList[selectedProduct.productLevel - 1].noOfStatus - 1;
                            $scope.data.nominationData.selectStatusInfoList[selectedProduct.productLevel - 1].totalCost = type == 'plus' ? $scope.data.nominationData.selectStatusInfoList[selectedProduct.productLevel - 1].totalCost + productTotalPrice : $scope.data.nominationData.selectStatusInfoList[selectedProduct.productLevel - 1].totalCost - productTotalPrice;
                        }
                    }
                    //End
                }
            }

            $scope.showHeaderFilter = function () {
                $scope.isShowHeaderFilter = !$scope.isShowHeaderFilter;
            };
            // start of add new customer
            $scope.openNewMpCustomerModal = function () {
                $('#nomination-new-customer-modal').modal();
            };

            $scope.addNewMpCustomer = function () {

                $rootScope.mainSpinner = true;

                //20171113 Use new service to get qualification
                StatusNominationService.retrieveQaulificationForMileagePlus(
                  $scope.lastName,
                  $scope.mpNumber,
                  $scope.data.preSelectedAccount.isTestAccount,
                  $rootScope.currentUser.id
                ).then(function (value1) {
                    $rootScope.mainSpinner = false;
                    if (util.isSuccessService(value1)) {
                        $scope.widgetSpinner = true;
                        //20171113 Use new service to get current status
                        StatusNominationService.getCurrentMileagePlusStatus(
                          value1
                        ).then(function (value2) {
                            var flag1 = false;
                            var flag2 = true;
                            var flag3 = true;
                            $rootScope.mainSpinner = false;
                            if (util.isSuccessService(value2)) {
                                $scope.data.nominationData.addedMpDataList.forEach(function (item) {
                                    if (item.mpNumber === value1.mpNumber) {
                                        flag1 = true;
                                        item = value1;
                                    }
                                });
                                if (!flag1) {
                                    $scope.data.nominationData.addedMpDataList.push(value1);
                                }
                                // map nomination level list according to permission.
                                //value2.statusLists = mapNominationLevel(value2.minGuarLevel);
                                //Shivani REQ-0823
                                if (value2.minGuarLevel != undefined) {
                                    var level = value2.minGuarLevel == '1k' ? 'oneK' : value2.minGuarLevel;
                                    $scope.discountProductMap[value1.mpNumber] = $scope.data.nomiProductList[level.toLowerCase()] ? $scope.data.nomiProductList[level.toLowerCase()].UnitPrice : 0;
                                }
                                value2.priceLists = discountedPriceList(value2.minGuarLevel);
                                //end
                                if ($scope.data.mpNumberList.length > 0) {
                                    var openDate = new Date($scope.data.dates.openDate).getTime();
                                    var closeDate = new Date($scope.data.dates.closeDate).getTime();
                                    flag2 = $scope.data.mpNumberList.every(function (item, index) {
                                        if (item.mpNumber === value2.mpNumber) {
                                            var nomiDate = new Date(item.nominationDate).getTime();
                                            //20171129: if the new add customer is in the existing mplist list, only replace currentlevel,expirydate,minGuarlevel & reset the nominationlevel enable status according to the victimIndicator & disqualIndicator get from new service.
                                            $scope.data.mpNumberList[index].isEnableNominationLevel = (!nomiDate || (closeDate < nomiDate || openDate > nomiDate)) && value2.victimIndicator !== 'Y' && value2.disqualIndicator !== 'Y';
                                            $scope.data.mpNumberList[index].existingTierLevel = value2.existingTierLevel;
                                            $scope.data.mpNumberList[index].currentLevelResourceName = value2.currentLevelResourceName;
                                            $scope.data.mpNumberList[index].expiryDate = value2.expiryDate;
                                            $scope.data.mpNumberList[index].minGuarLevel = value2.minGuarLevel;
                                            $scope.data.mpNumberList[index].minGuarLevelminGuarLevelResourceName = value2.minGuarLevelResourceName;
                                            $scope.data.mpNumberList[index].victimIndicator = value2.victimIndicator;
                                            $scope.data.mpNumberList[index].disqualIndicator = value2.disqualIndicator;
                                            // if($scope.data.mpNumberList[index].isEnableNominationLevel && $scope.data.mpNumberList[index].hasStatusPermission){
                                            //   calculateShoppingcar($scope.data.mpNumberList[index].displayedNominationLevel, 'minus');
                                            // }
                                            // value2.statusLists = mapNominationLevel(value2.minGuarLevel);
                                            // $scope.data.mpNumberList[index] = value2;
                                        }
                                        return item.mpNumber !== value2.mpNumber;
                                    });
                                }
                                if ($scope.data.nominationData.addNewMpCustomerList.length > 0) {
                                    flag3 = $scope.data.nominationData.addNewMpCustomerList.every(function (item2, index) {
                                        if (item2.mpNumber === value2.mpNumber) {
                                            calculateShoppingcar($scope.data.nominationData.addNewMpCustomerList[index].displayedNominationLevel, 'minus');

                                            $scope.data.nominationData.addNewMpCustomerList[index] = value2;
                                        }
                                        return item2.mpNumber !== value2.mpNumber;
                                    });
                                    for (let index in $scope.newMpCustomerFilteredList) {
                                        if ($scope.newMpCustomerFilteredList[index].mpNumber === value2.mpNumber) {
                                            $scope.newMpCustomerFilteredList[index] = value2;
                                            break;
                                        }
                                    }
                                }
                                if (flag2 && flag3) {
                                    $scope.data.nominationData.addNewMpCustomerList.unshift(value2);
                                    $scope.newMpCustomerFilteredList.unshift(value2);
                                    $scope.totalLength = $scope.filteredMpList.length + $scope.noActionMpList.length + $scope.newMpCustomerFilteredList.length;
                                } else {
                                    $scope.infoModalHeader = 'addedExist';
                                    $scope.infoModalType = 'info';
                                    $("#save-successful-modal").modal();
                                }
                                distiguishMpList($scope.data.mpNumberList);

                                initAfterAddCustomMp();

                                initPageNavigation();
                                $scope.data.nominationData.isMpUpdated = true;
                                //reset form data after add customer success
                                $scope.lastName = "";
                                $scope.mpNumber = "";
                                $('#nomination-new-customer-modal').modal('hide');
                            }
                        }, function (err) {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                              });
                        });
                    }
                }, function (err) {
                    $scope.widgetSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };
            // end of add new customer

            // start of upload report
            $scope.showImportModal = function () {
                StatusNominationService.getLastImportSaveDetails($rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId).then(function (value) {
                    $scope.importModifyData = value;
                    $('#nomination-import-report-modal').modal();
                }, function (err) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };

            $scope.uploadReport = function () {
                if (!$scope.csvBlob) {
                    document.querySelector('#upload-report-file').click()
                    return
                }
                $('#nomination-import-report-modal').modal('hide');
                $rootScope.mainSpinner = true;
                var mpList = mapMpList('import');
                StatusNominationService.massUploadMPCustomers($scope.csvBlob.imgBlob, mpList, $scope.data.preSelectedAccount.accountId).then(function (value) {
                    $rootScope.mainSpinner = false;
                    $scope.data.errorList = value.errorList;
                    $scope.data.successList = value.successList;
                    $scope.data.warningList = value.warningList;
                    $scope.data.successCount = value.successCount;
                    if (value.errorMsg) {
                        $rootScope.$broadcast('showMessage', {
                            type: 'success',
                            text: value.errorMsg
                        });
                    }
                    $state.go($state.current.parent + '-status-nomination-mass', { feature: 'nomination-upload-result' });
                }, function (err) {
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };

            $scope.downloadErrorList = function () {
                StatusNominationService.exportImportErrorsURL($rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId, $scope.data.errorList).then(function (data) {
                    window.open(data, '_self');
                }, function (err) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                })
            };

            // $scope.lookupFile = function() {
            //   $("#upload-report-file").click();
            // };

            $scope.readFile = function (element) {
                if (!element) {
                    return false;
                }
                var reader = new FileReader();
                var uploadFile = element.files[0];
                $scope.reportFileName = uploadFile.name;

                reader.readAsDataURL(uploadFile);

                $rootScope.mainSpinner = true;
                reader.onload = function (evt) {
                    $rootScope.mainSpinner = false;
                    var blob = dataURLtoBlobService(evt.target.result);
                    var type = blob.type;
                    var imgBlob = evt.target.result.split(',')[1] ? evt.target.result.split(',')[1] : '';

                    $scope.csvBlob = {
                        imgBlob: imgBlob,
                        type: type
                    };

                    $scope.$apply();
                };
            };
            // end of import file

            // filter
            $scope.filterEvent = function () {
                $scope.isFiltered = true;
                $scope.filterResultList = [];
                $scope.newMpCustomerFilteredList = []
                // filter mpNumberList
                if ($scope.data && $scope.data.mpNumberList) {
                    for (let i = 0; i < $scope.data.mpNumberList.length; i++) {
                        var item = $scope.data.mpNumberList[i];
                        var flag = true;
                        var itemKey = '';
                        for (let key in $scope.filterParamObj) {
                            if ($scope.filterParamObj[key]) {
                                if (key === 'expiryStartDate' || key === 'expiryEndDate') {
                                    itemKey = 'expiryDate';
                                } else if (key === 'nominationStartDate' || key === 'nominationEndDate') {
                                    itemKey = 'nominationDate';
                                } else {
                                    itemKey = key;
                                }
                                if (item[itemKey]) {
                                    //for date filter
                                    //for header filter date
                                    if (key === 'nominationStartDate') {
                                        var start = new Date($scope.filterParamObj[key]).getTime();
                                        if (new Date(item[itemKey]).getTime() < start) {
                                            flag = false;
                                            break;
                                        }
                                    } else if (key === 'nominationEndDate') {
                                        var end = new Date($scope.filterParamObj[key]).getTime() + 24 * 3600 * 1000;
                                        if (new Date(item[itemKey]).getTime() > end) {
                                            flag = false;
                                            break;
                                        }
                                    } else if (key === 'displayedNominationLevel') {
                                        // if filter nomination level, only filter these data display in the page not store in the backend
                                        var displayedNominationLevel = convertStatusLongToShort(item[itemKey]) ? convertStatusLongToShort(item[itemKey]) : item[itemKey];
                                        if ($scope.filterParamObj[key].toLowerCase().indexOf(displayedNominationLevel.toLowerCase()) === -1) {
                                            flag = false;
                                            break;
                                        }
                                    } else if (item[itemKey].toLowerCase().indexOf($scope.filterParamObj[key].toLowerCase()) === -1) {
                                        flag = false;
                                        break;
                                    }
                                } else { // filter all the field that do not have value.
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        if (flag) {
                            $scope.filterResultList.push(item);
                        }
                    }
                    distiguishMpList($scope.filterResultList);
                }

                if ($scope.data && $scope.data.nominationData && $scope.data.nominationData.addNewMpCustomerList.length > 0) {
                    for (let i = 0; i < $scope.data.nominationData.addNewMpCustomerList.length; i++) {
                        var item = $scope.data.nominationData.addNewMpCustomerList[i];
                        var flag = true;
                        var itemKey = '';
                        for (let key in $scope.filterParamObj) {
                            if ($scope.filterParamObj[key]) {
                                if (key === 'expiryStartDate' || key === 'expiryEndDate') {
                                    itemKey = 'expiryDate';
                                } else if (key === 'nominationStartDate' || key === 'nominationEndDate') {
                                    itemKey = 'nominationDate';
                                } else {
                                    itemKey = key;
                                }
                                if (item[itemKey]) {
                                    //for date filter
                                    //for header filter date
                                    if (key === 'nominationStartDate') {
                                        var start = new Date($scope.filterParamObj[key]).getTime();
                                        if (new Date(item[itemKey]).getTime() < start) {
                                            flag = false;
                                            break;
                                        }
                                    } else if (key === 'nominationEndDate') {
                                        var end = new Date($scope.filterParamObj[key]).getTime() + 24 * 3600 * 1000;
                                        if (new Date(item[itemKey]).getTime() > end) {
                                            flag = false;
                                            break;
                                        }
                                    } else if (key === 'displayedNominationLevel') {
                                        var displayedNominationLevel = convertStatusLongToShort(item[itemKey]) ? convertStatusLongToShort(item[itemKey]) : item[itemKey];
                                        if ($scope.filterParamObj[key].toLowerCase().indexOf(displayedNominationLevel.toLowerCase()) === -1) {
                                            flag = false;
                                            break;
                                        }
                                    } else if (item[itemKey].toLowerCase().indexOf($scope.filterParamObj[key].toLowerCase()) === -1) {
                                        flag = false;
                                        break;
                                    }
                                } else { // filter all the field that do not have value.
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        if (flag) {
                            $scope.newMpCustomerFilteredList.push(item);
                        }
                    }
                }

                initPageNavigation();
            };

            $scope.$watch('filterParamObj.nominationStartDate', function (newValue, oldValue, scope) {
                if ($scope.filterParamObj && $scope.filterParamObj.nominationStartDate) {
                    var start = new Date($scope.filterParamObj.nominationStartDate);
                    var curYear = new Date().getFullYear();
                    var minDate = new Date((curYear - 2) + '-01-01T00:00:00');
                    if ($scope.filterParamObj.nominationEndDate) {
                        var end = new Date($scope.filterParamObj.nominationEndDate);
                        if (start > end) {
                            $scope.filterParamObj.nominationStartDate = oldValue;
                        }
                    }
                    // 20171201: Restrict 'Nomination Date' filter to not be able to go further back than 1-1-(Current year - 2).
                    if (minDate > start) {
                        $scope.filterParamObj.nominationStartDate = oldValue;
                    }
                }
            });

            $scope.$watch('filterParamObj.nominationEndDate', function (newValue, oldValue, scope) {
                if ($scope.filterParamObj && $scope.filterParamObj.nominationEndDate) {
                    var end = new Date($scope.filterParamObj.nominationEndDate);
                    var curYear = new Date().getFullYear();
                    var minDate = new Date((curYear - 2) + '-01-01T00:00:00');
                    if ($scope.filterParamObj.nominationStartDate) {
                        var start = new Date($scope.filterParamObj.nominationStartDate);
                        if (start > end) {
                            $scope.filterParamObj.nominationEndDate = oldValue;
                        }
                    }
                    // 20171201: Restrict 'Nomination Date' filter to not be able to go further back than 1-1-(Current year - 2).
                    if (minDate > end) {
                        $scope.filterParamObj.nominationEndDate = oldValue;
                    }
                }
            });

            $scope.$watch('data.mpNumberList', function (newValue, oldValue, scope) {
                if ($rootScope.currentUser.isInternalUser) {
                    if ($scope.data && $scope.data.mpNumberList && $scope.data.mpNumberList.length > 0) {
                        $scope.isContinuePaymentValid = true;
                        for (let index in $scope.data.mpNumberList) {
                            var item = $scope.data.mpNumberList[index];
                            if (item.displayedNominationLevel && item.isEnableNominationLevel && item.nominationLevel && item.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                if (!(((item.beneficiaryName && item.beneficiaryId) || item.reason) && item.comments)) {
                                    $scope.isContinuePaymentValid = false;
                                    break;
                                }
                            }
                        }
                        for (let index in $scope.data.nominationData.addNewMpCustomerList) {
                            var item = $scope.data.nominationData.addNewMpCustomerList[index];
                            if (item.displayedNominationLevel && item.isEnableNominationLevel && item.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                if (!(((item.beneficiaryName && item.beneficiaryId) || item.reason) && item.comments)) {
                                    $scope.isContinuePaymentValid = false;
                                    break;
                                }
                            }
                        }
                    }
                }
            }, true);

            $scope.$watch('data.nominationData.addNewMpCustomerList', function (newValue, oldValue, scope) {
                if ($rootScope.currentUser.isInternalUser) {

                    if ($scope.data && $scope.data.nominationData && $scope.data.nominationData.addNewMpCustomerList && $scope.data.nominationData.addNewMpCustomerList.length > 0) {
                        $scope.isContinuePaymentValid = true;
                        for (let index in $scope.data.nominationData.addNewMpCustomerList) {
                            var item = $scope.data.nominationData.addNewMpCustomerList[index];
                            if (item.displayedNominationLevel && item.isEnableNominationLevel && item.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                if (!(((item.beneficiaryName && item.beneficiaryId) || item.reason) && item.comments)) {
                                    $scope.isContinuePaymentValid = false;
                                    break;
                                }
                            }
                        }

                        for (let index in $scope.data.mpNumberList) {
                            var item = $scope.data.mpNumberList[index];
                            if (item.displayedNominationLevel && item.isEnableNominationLevel && item.nominationLevel && item.nominationLevel !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                if (!(((item.beneficiaryName && item.beneficiaryId) || item.reason) && item.comments)) {
                                    $scope.isContinuePaymentValid = false;
                                    break;
                                }
                            }
                        }
                    }
                }
            }, true);

            $scope.continueNominationReview = function () {
                //call service
                $scope.data.nominationData.isMpUpdated = true;
                $scope.data.mpNumberList = $scope.data.successList;
                //go back to mass future nomination
                $state.go($state.current.parent + '-status-nomination-mass', {
                    feature: 'apply-status-nomination-mass'
                });
            };

            $scope.continueToPayment = function () {
                //20180810 rwern
                if (checkListError($scope.data.mpNumberList) || checkListError($scope.data.nominationData.addNewMpCustomerList)) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Annual_Nominations_Beneficiary_Reason_Error)}'
                    });
                } else {
                    //20171206: save as draft before continue to payment
                    $rootScope.mainSpinner = true;
                    if ($scope.data.nominationData.isMpUpdated) {
                        $scope.saveMpList('reviewSummary');
                    }
                    StatusNominationService.calculateExpiryDate($scope.data.nominationData.selectStatusInfoList).then(function (data) {
                        $rootScope.mainSpinner = false;
                        $scope.data.nominationData.selectStatusInfoList = data;

                        $state.go($state.current.parent + '-status-nomination-mass', { feature: 'nomination-review-summary' });
                    }, function (err) {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                }
            };

            $scope.goBackNomination = function () {
                $scope.closeAllToggle();
                $state.go($state.current.parent + '-status-nomination-mass', {
                    feature: 'apply-status-nomination-mass'
                });
            };

            $scope.openSaveExitModal = function () {
                $("#save-exit-modal").modal();
            };

            // $scope.saveAndExit = function() {
            //   $("#save-exit-modal").modal('hide');
            //   $scope.saveMpList();
            //   $scope.goHomePage();
            // };

            $scope.saveMpList = function (leavingPage) {
                var updatedList = mapMpList('save');
                for (let i = 0; i < $scope.data.nominationData.addNewMpCustomerList.length; i++) {
                    var item2 = $scope.data.nominationData.addNewMpCustomerList[i];
                    var obj = {
                        "mpNumber": item2.mpNumber,
                        "customerName": item2.firstName + ", " + item2.lastName,
                        "expiryDate": item2.NewExpiryDate,
                        "customerId": item2.customerId
                    }
                    if (item2.nominationLevel) {
                        obj.nominationLevel = item2.nominationLevel;
                        // if nominationLevel = 'No Action', then clear comments field
                        if (obj.nominationLevel === '{!JSENCODE($Label.SipSnm_No_Action)}') {
                            obj.comments = null;
                        } else {
                            obj.comments = item2.comments;
                        }
                    }
                    //20171113
                    if (item2.isNewAddedMPNumber) {
                        obj.vMileagePlus = item2
                    }
                    if ($rootScope.currentUser.isInternalUser) {
                        obj.orgId = item2.orgId;
                        obj.orgName = item2.orgName;
                        obj.orgRecordId = item2.orgRecordId;
                        // for internal user if nominationLevel = 'No Action', then clear beneficiaryId & reason
                        if (obj.nominationLevel === '{!JSENCODE($Label.SipSnm_No_Action)}') {
                            obj.beneficiaryId = null;
                            obj.reason = null;
                        } else {
                            obj.beneficiaryId = item2.beneficiaryId ? item2.beneficiaryId : null;
                            obj.reason = item2.reason ? item2.reason : null;
                        }
                    }
                    updatedList.push(obj);
                }
                $rootScope.mainSpinner = true;
                //20171108 add userId as parameter
                //console.log('updateMPCustomersData updatedList', updatedList)
                //console.log('updateMPCustomersData addedMpDataList', $scope.data.nominationData.addedMpDataList)
                StatusNominationService.updateMPCustomersData(updatedList, $scope.data.nominationData.addedMpDataList, $rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId).then(function (value) {
                    $rootScope.mainSpinner = false;
                    if (value.success) {
                        $scope.data.nominationData.isMpUpdated = false;
                        $scope.data.nominationData.addNewMpCustomerList.forEach(function (item) {
                            $scope.data.mpNumberList.unshift(item);
                        });
                        $scope.data.nominationData.addNewMpCustomerList = [];
                        $scope.data.nominationData.addedMpDataList = [];
                        initFilterObj();
                        initMpList();
                        if (!leavingPage) {
                            //20171129:On the 'Saved Successfully' pop up, center align the message.
                            $scope.infoModalHeader = 'saveSuccess';
                            $scope.infoModalType = 'success-svg';
                            $("#save-successful-modal").modal();
                            // $rootScope.$broadcast('showMessage',{
                            //   type: 'success',
                            //   text: value.messages[0]
                            // });
                        }
                        if (leavingPage) {
                            if (leavingPage === 'exportReport') {
                                $scope.exportReportData();
                            } else {
                                $scope.continueLeave(leavingPage);
                            }
                        }
                    } else {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: value.messages[0]
                        });
                    }
                }, function (err) {
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: value.messages[0]
                    });
                });
            };

            $scope.downloadInstruction = function () {
                //desprecated
                //window.open('{!URLFOR($Resource.Sip_United_Services_Fund_Corporate)}', '_blank');
            };

            function mapMpList(type) {
                var updatedList = [];
                var mpList = [];
                mpList = $scope.data.mpNumberList;
                for (let i = 0; i < mpList.length; i++) {
                    var item = mpList[i];
                    var obj = {
                        'customerId': item.customerId,
                        'customerName': item.customerName,
                        'earnedLevel': item.earnedLevel,
                        'existingTierLevel': item.existingTierLevel,
                        'expiryDate': item.expiryDate,
                        'minGuarLevel': item.minGuarLevel,
                        'minSegReqMet': item.minSegReqMet,
                        'mpNumber': item.mpNumber,
                        'mpNumberRecId': item.mpNumberRecId,
                        'nominatedLevel': item.nominatedLevel,
                        'nominationDate': item.nominationDate,
                        'nominationLevel': item.nominationLevel,
                        'preQualMiles': item.preQualMiles,
                        'comments': item.comments,
                        'disqualIndicator': item.disqualIndicator,
                        'victimIndicator': item.victimIndicator,
                        'lastName': item.lastName,
                        'firstName': item.firstName
                    };
                    if ($rootScope.currentUser.isInternalUser) {
                        obj.beneficiaryId = item.beneficiaryId ? item.beneficiaryId : null;
                        //20180112 add beneficiaryexId
                        obj.beneficiaryexId = item.beneficiaryexId ? item.beneficiaryexId : null;
                        obj.reason = item.reason ? item.reason : null;
                        obj.orgId = item.orgId;
                        obj.orgName = item.orgName;
                        obj.orgRecordId = item.orgRecordId;
                    }
                    if (type === 'save') {
                        // For internal & external user if nominationLevel = 'No Action', clear comments
                        // For internal user nominationLevel = 'No Action', clear beneficiary & reason
                        if (item.nominationLevel === '{!JSENCODE($Label.SipSnm_No_Action)}') {
                            obj.comments = null;
                            if ($rootScope.currentUser.isInternalUser) {
                                obj.beneficiaryId = null;
                                obj.reason = null;
                            }
                        }
                    }
                    if (type === 'import') {
                        obj.currentLevelResourceName = item.currentLevelResourceName;
                        obj.minGuarLevelResourceName = item.minGuarLevelResourceName;
                        obj.nominatedLevelResourceName = item.nominatedLevelResourceName;
                        obj.projectedLevelResourceName = item.projectedLevelResourceName;
                        obj.progYearMinSegReqMet = item.progYearMinSegReqMet;
                        obj.progYearPQM = item.progYearPQM;
                        obj.progYearPQD = item.progYearPQD;
                        obj.progYearPQS = item.progYearPQS;
                        obj.prevProgYearMinSegReqMet = item.prevProgYearMinSegReqMet;
                        obj.prevProgYearPQM = item.prevProgYearPQM;
                        obj.prevProgYearPQD = item.prevProgYearPQD;
                        obj.prevProgYearPQS = item.prevProgYearPQS;
                        obj.trail = item.trail;
                        obj.trailEndDate = item.trailEndDate;
                        obj.nominationDateInExcel = item.nominationDateInExcel;
                        obj.expiryDateInExcel = item.expiryDateInExcel;
                        obj.trailEndDateInExcel = item.trailEndDateInExcel;
                        obj.hasStatusPermission = item.hasStatusPermission;

                        if ($rootScope.currentUser.isInternalUser) {
                            obj.beneficiaryName = item.beneficiaryName ? item.beneficiaryName : null;
                            obj.beneficiaryAccountType = item.beneficiaryAccountType ? item.BeneficiaryAccountType : null;
                        }
                    }
                    updatedList.push(obj);
                }
                return updatedList;
            }

            function mapPurchaseList(purchaseList) {
                var mappedPurchaseList = [];
                purchaseList.forEach(function (item) {
                    var obj = {
                        'nominationLevel': item.nominationLevel,
                        'nominationLevelResourceName': null,
                        'mpNumber': item.mpNumber,
                        'newEffectiveDate': null,
                        'firstName': item.firstName,
                        'lastName': item.lastName,
                        'existingTierLevel': item.existingTierLevel,
                        'mpNumberRecId': item.mpNumberRecId,
                        'comments': item.comments,
                        'customerId': item.customerId,
                        'minGuarLevelResourceName': item.minGuarLevelResourceName,
                        'currentLevelResourceName': item.currentLevelResourceName,
                        'minGuarLevel': item.minGuarLevel,
                        'expiryDate': item.expiryDate
                    };
                    if ($rootScope.currentUser.isInternalUser) {
                        obj.beneficiaryId = item.beneficiaryId ? item.beneficiaryId : null;
                        obj.reason = item.reason ? item.reason : null;
                    }
                    $scope.data.nominationData.selectStatusInfoList.forEach(function (data) {
                        if (data.statusType.toLowerCase() === obj.nominationLevel.toLowerCase()) {
                            obj.newExpiryDate = data.expiryDate;
                            obj.nominationLevelUnitPrice = data.costPerStatus;
                            //Shivani REQ-0823 Changes
                            if ($scope.discountProductMap && $scope.discountProductMap[item.mpNumber]) {
                                obj.nominationLevelUnitPrice -= $scope.discountProductMap[item.mpNumber];
                            }
                            //End
                        }
                    });
                    mappedPurchaseList.push(obj);
                });
                return mappedPurchaseList;
            }

            $scope.exportReport = function () {
                // call different service for export function in different pages.
                if ($scope.statusFeature === 'apply-status-nomination-report') {
                    StatusNominationService.exportNominationReport($rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId).then(function (data) {
                        window.open(data, '_self');
                    }, function (err) {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                } else {
                    // if($scope.data.nominationData.isMpUpdated) {
                    $("#export-remind-modal").modal();
                    // } else {
                    //   $scope.exportReportData();
                    // }
                }
            };
            //20171109 add userId
            $scope.exportReportData = function () {
                StatusNominationService.exportReportURL($rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId).then(function (data) {
                    $("#export-remind-modal").modal('hide');
                    window.open(data, '_self');
                }, function (err) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };

            $scope.purchase = function () {
                $("#mass-nom-confirm-modal").modal();
            };
            $scope.confirmPurchase = function () {
                $("#mass-nom-confirm-modal").modal('hide');
                $rootScope.mainSpinner = true;
                // check account remaining before purchase
                AccountService.getAccountById($scope.data.nominationData.account.accountId, $rootScope.currentUser.id).then(function (value) {
                    if ($(".modal-backdrop").length > 0) {
                        $(".modal-backdrop").remove();
                        //console.log('duplicated $(".modal-backdrop")')
                    }
                    //$rootScope.mainSpinner = false;
                    $scope.data.nominationData.account = {
                        'extId': value.ExtId,
                        'balance': value.Fund,
                        'globalService': value.GlobalService,
                        'AccountTilePermission': value.AccountTilePermission,
                        'accountId': value.Id,
                        'bankingBalanceAccess': value.BankingBalanceAccess
                    };
                    if ($scope.data.nominationData.account.balance - $scope.data.nominationData.shopCarFundBal < 0 || $scope.data.nominationData.account.globalService - $scope.data.nominationData.shopCarGSBal < 0) {
                        var text = '';
                        if ($scope.data.nominationData.account.balance - $scope.data.nominationData.shopCarFundBal < 0) {
                            text = text + '{!JSENCODE($Label.SIP_Alert_Amenity_Fund_Insufficient)}' + ' ';
                        }
                        if ($scope.data.nominationData.account.globalService - $scope.data.nominationData.shopCarGSBal < 0) {
                            text = text + '{!JSENCODE($Label.SIP_Alert_Amenity_Global_Service_Insufficient)}';
                        }
                        $rootScope.mainSpinner = false;
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: text
                        });
                    } else {
                        generatePurchaseList();
                        //20180810 rwern
                        if (checkListError($scope.data.nominationData.purchaseList)) {
                            $rootScope.mainSpinner = false;
                            $rootScope.$broadcast('showMessage', {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Annual_Nominations_Beneficiary_Reason_Error)}'
                            });
                        } else {
                            //20190110 rwern REQ-0694
                            // Send nominations to batch for purchase. No need for a confirmation page
                            purchaseNominations();

                            /*$state.go($state.current.parent + '-status-nomination-mass', {
                                feature: 'nomination-review-purchase'
                            });*/
                        }
                    }
                }, function (err) {
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            };

            function generatePurchaseList() {
                $scope.data.nominationData.purchaseList = [];
                var purchaseList = []
                $scope.data.mpNumberList.forEach(function (item) {
                    if (item.isEnableNominationLevel && item.nominationLevel && item.nominationLevel.toLowerCase() !== '{!JSENCODE($Label.SipSnm_No_Action)}' && item.hasStatusPermission) {
                        purchaseList.push(item);
                    }
                });
                $scope.data.nominationData.addNewMpCustomerList.forEach(function (item) {
                    if (item.nominationLevel && item.nominationLevel.toLowerCase() !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                        purchaseList.push(item);
                    }
                });
                $scope.data.nominationData.purchaseList = mapPurchaseList(purchaseList);
            }
            //20180810 rwern: Double-check to make sure lists have a beneficiary/reason and comments
            function checkListError(value) {
                var error = false;
                if ($rootScope.currentUser.isInternalUser) {
                    if (value) {
                        for (var i = 0; i < value.length; i++) {
                            var item = value[i];
                            if (item.nominationLevel && item.nominationLevel.toLowerCase() !== '{!JSENCODE($Label.SipSnm_No_Action)}') {
                                if (item.comments === null || item.comments === '')
                                    error = true;
                                if ((item.beneficiaryId === null || item.beneficiaryId === '') && (item.reason === null || item.reason === ''))
                                    error = true;
                            }
                        }
                    }
                }
                return error;
            }
            $scope.beforeGoNominationReviewPage = function () {
                $scope.from = 'goNominationReviewPage';
                $state.go($state.current.parent + '-status-nomination-mass', {
                    feature: 'apply-status-nomination-mass'
                });
            }

            $scope.goNominationReviewPage = function () {
                $rootScope.mainSpinner = true;
                if ($scope.isSendReceipEmial && $scope.transactionNumber) {
                    AmenityService.sendEmail($rootScope.currentUser.id, $scope.transactionNumber).then(function (data) {
                    }, function (err) {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                }
                AccountService.getAccountById($scope.data.preSelectedAccount.accountId, $rootScope.currentUser.id).then(function (value) {
                    mapPreSelectedAccount(value);
                    $rootScope.mainSpinner = false;
                }, function (err) {
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                      });
                });
                StatusNominationService.getMileagePlusNos($rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId).then(function (value) {
                    $scope.data.mpNumberList = value.mpNumberList;
                    $scope.data.nominationData = null;
                    // go new page
                    $state.go($state.current.parent + '-status-nomination-mass', {
                        feature: 'apply-status-nomination-mass'
                    });
                }, function (err) {
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                      });
                });
            };

            $scope.goUploadResult = function () {
                $state.go($state.current.parent + '-status-nomination-mass', { feature: 'nomination-upload-result' });
            };

            $scope.beforeGoHomePage = function () {
                $scope.from = 'goHomePage';
                $state.go('secure-landing-home', {
                    feature: 'init'
                });
            }

            $scope.goHomePage = function (type) {
                if ($scope.isSendReceipEmial && type === 'purchasePage' && $scope.transactionNumber) {
                    AmenityService.sendEmail($rootScope.currentUser.id, $scope.transactionNumber).then(function (data) {
                        $state.go('secure-landing-home', {
                            feature: 'init'
                        });
                    }, function (err) {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                          });
                    });
                } else {
                    $timeout(function () {
                        $state.go('secure-landing-home', {
                            feature: 'init'
                        });
                    }, 1000);

                }
            };

            $scope.continueLeave = function (leavingPage) {
                if (leavingPage === 'saveAndExit') {
                    $("#save-exit-modal").modal('hide');
                    $timeout(function () {
                        $state.go('secure-landing-home', {
                            feature: 'amenity-status-nomination'
                        });
                    }, 1000);
                } else {
                    $("#nomination-save-remind-modal").modal('hide');
                    $scope.isConfirmLeave = true;

                    // jason 20180116
                    // $scope.newMpCustomerFilteredList = null;
                    // $scope.data.nominationData.addNewMpCustomerList = null;
                    $scope.data.nominationData.addNewMpCustomerList = [];
                    $scope.data.nominationData.addedMpDataList = [];

                    if ($scope.currentToState) {
                        $timeout(function () {
                            $state.go($scope.currentToState.name, $scope.currentToParams);
                        }, 1000);
                    }
                }

                // if(leavingPage == 'saveContinue') {
                //   $("#nomination-save-remind-modal").modal('hide');

                //   if($scope.data.nominationData.forwardPage == 'back') {
                //     $scope.data.nominationData = null;
                //     $timeout(function(){
                //       $state.go('secure-landing-home' ,{
                //         feature:'amenity-status-nomination'
                //       });
                //     },1000);

                //   } else if($scope.data.nominationData.forwardPage == 'close') {
                //     $scope.data.nominationData = null;
                //     $rootScope.$broadcast('goHomePage');
                //   }
                // }else if(leavingPage == 'saveAndExit') {
                //   $("#save-exit-modal").modal('hide');
                //   $timeout(function(){
                //     $state.go('secure-landing-home' ,{
                //       feature:'amenity-status-nomination'
                //     });
                //   },1000);
                // }
            };

            $scope.txtClick = function ($event, mpNumber, type, txtId) {
                $event.target.select();
            };
            $scope.txtKeyup = function ($event, mpNumber, type, txtId, item) {
                /*var txt = $event.target;
                switch ($event.keyCode) {
                    case 13 : // enter key trigger search
                        $(txt).dropdown('toggle');
                        $scope.searchBene(mpNumber, type, txtId, false);
                        break;
                    case 40 :
                        var ddl = $(txt).attr('aria-describedby');
                        var li = $('#' + ddl).find('li:first');
                        if (li.hasClass('list-limit-exceeded')) {
                            li = li.next();
                        }
                        li.focus();
                        break;
                    default :
                        if (item['beneficiaryId']) {
                            item['beneficiaryId'] = null;
                        }
                        $scope.currentRow.beneficiaryAccountType = '';
                    }*/
            };

            $scope.searchBene = function (mpNumber, type, txtId, isToggle) {
                var value = "";
                $scope.snmSpinner = true;
                if (type === 'filteredMpList') {
                    for (let index in $scope.filteredMpList) {
                        if ($scope.filteredMpList[index].mpNumber === mpNumber) {
                            value = $scope.filteredMpList[index].beneficiaryName;
                            if (!value) {
                                $scope.snmSpinner = false;
                                return false;
                            }
                            StatusNominationService.getBeneficiaryAccounts(value).then(function (data) {
                                //console.log('getBeneficiaryAccounts', data)
                                $scope.snmSpinner = false;

                                if (data.success) {
                                    $scope.filteredMpList[index].beneficiaryList = data.Accounts;
                                    if (isToggle) {
                                        $("#" + txtId).dropdown('toggle');
                                    }
                                } else {
                                    $rootScope.$broadcast('showMessage', {
                                        type: 'alert',
                                        text: data['messages'][0]
                                    });
                                }
                            }, function (err) {
                                $scope.snmSpinner = false;
                                $rootScope.$broadcast('showMessage', {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                            });
                            break;
                        }
                    }
                }
                if (type === 'newAddMp') {
                    for (let index in $scope.newMpCustomerFilteredList) {
                        if ($scope.newMpCustomerFilteredList[index].mpNumber === mpNumber) {
                            var value = $scope.newMpCustomerFilteredList[index].beneficiaryName;
                            if (!value) {
                                $scope.snmSpinner = false;
                                return false;
                            }
                            StatusNominationService.getBeneficiaryAccounts(value).then(function (data) {
                                //console.log('getBeneficiaryAccounts', data)
                                $scope.snmSpinner = false;

                                if (data.success) {
                                    $scope.newMpCustomerFilteredList[index].beneficiaryList = data.Accounts;
                                    if (isToggle) {
                                        $("#" + txtId).dropdown('toggle');
                                    }
                                } else {
                                    $rootScope.$broadcast('showMessage', {
                                        type: 'alert',
                                        text: data['messages'][0]
                                    });
                                }
                            }, function (err) {
                                $scope.snmSpinner = false;
                                $rootScope.$broadcast('showMessage', {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                            });
                            break;
                        }
                    }


                }
                if (type === 'noActionMpList') {
                    for (let index in $scope.noActionMpList) {
                        if ($scope.noActionMpList[index].mpNumber === mpNumber) {
                            var value = $scope.noActionMpList[index].beneficiaryName;
                            StatusNominationService.getBeneficiaryAccounts(value).then(function (data) {
                                $scope.snmSpinner = false;
                                $scope.noActionMpList[index].beneficiaryList = data.Accounts;
                                $('#' + txtId).dropdown('toggle');
                            }, function (err) {
                                $rootScope.$broadcast('showMessage', {
                                    type: 'alert',
                                    text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                });
                            });
                            break;
                        }
                    }
                }
            };

            $scope.selectBene = function (selectedObj, type, mpNumber) {
                $scope.data.nominationData.isMpUpdated = true;
                for (let i in $scope.mpNumberList) {
                    if ($scope.data.mpNumberList[i].mpNumber === mpNumber) {
                        $scope.data.mpNumberList[i].beneficiaryName = selectedObj.Name;
                        $scope.data.mpNumberList[i].beneficiaryId = selectedObj.Id;
                        $scope.data.mpNumberList[i].beneficiaryAccountType = selectedObj.AccountType;
                        break;
                    }
                }
                if (type === 'filteredMpList') {
                    for (let i in $scope.filteredMpList) {
                        if ($scope.filteredMpList[i].mpNumber === mpNumber) {
                            $scope.filteredMpList[i].beneficiaryName = selectedObj.Name;
                            $scope.filteredMpList[i].beneficiaryId = selectedObj.Id;
                            $scope.filteredMpList[i].beneficiaryAccountType = selectedObj.AccountType;
                            break;
                        }
                    }

                    //jason
                    for (let i in $scope.newMpCustomerFilteredList) {
                        if ($scope.newMpCustomerFilteredList[i].mpNumber === mpNumber) {
                            $scope.newMpCustomerFilteredList[i].beneficiaryName = selectedObj.Name;
                            $scope.newMpCustomerFilteredList[i].beneficiaryId = selectedObj.Id;
                            $scope.newMpCustomerFilteredList[i].beneficiaryAccountType = selectedObj.AccountType;
                            break;
                        }
                    }
                } else if (type === 'noActionMpList') {
                    for (let i in $scope.noActionMpList) {
                        if ($scope.noActionMpList[i].mpNumber === mpNumber) {
                            $scope.noActionMpList[i].beneficiaryName = selectedObj.Name;
                            $scope.noActionMpList[i].beneficiaryId = selectedObj.Id;
                            $scope.noActionMpList[i].beneficiaryAccountType = selectedObj.AccountType;
                            break;
                        }
                    }
                }
            };

            $scope.ddlKeyup = function ($event) {
                switch ($event.keyCode) {
                    case 38:
                        var prev = $($event.target).prev();
                        if (prev.length > 0) {
                            prev.focus();
                        }
                        break;
                    case 40:
                        var next = $($event.target).next();
                        if (next.length > 0) {
                            next.focus();
                        }
                        break;
                }
            };
            $scope.getAccClass = util.getAccClass;
            $scope.getAccSymbol = util.getAccSymbol;
            $scope.getAccTitle = util.getAccTitle;

            $scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                $scope.currentToState = toState;
                $scope.currentToParams = toParams;
                var stateChangeCheckList = '';
                if ($scope.data && $scope.data.nominationData) {
                    stateChangeCheckList = $scope.data.nominationData.stateChangeCheckList.join(',');
                }
                if ($scope.data.nominationData && $scope.data.nominationData.isMpUpdated && !$scope.isConfirmLeave && stateChangeCheckList.indexOf($scope.currentToParams.feature) === -1) {
                    $('#nomination-save-remind-modal').modal();
                    event.preventDefault();
                }

                //20190110 rwern REQ-0694
                // Fix issues with users leaving/reloading page
                /*if (fromParams.feature == 'nomination-review-purchase' && $scope.data.nominationData && !$scope.data.nominationData.isTransactionSuccess) {
                    event.preventDefault();
                } else if (fromParams.feature == 'nomination-review-purchase' && $scope.data.nominationData && $scope.data.nominationData.isTransactionSuccess && !$scope.isConfirmLeavePurchase) {
                    if (!$scope.hidePurchaseModal) {
                        $("#purchase-in-progress-reminder-modal").modal();
                        event.preventDefault();
                    }
                }*/

            });

            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                //Jason hide this btn by default
                $scope.data.nominationData.isShowGoback = false;
                if (fromParams.feature === "amenity-status-nomination") {
                    $scope.data.nominationData.addNewMpCustomerList = [];
                    $scope.data.nominationData.addedMpDataList = [];
                }
                if (fromParams.feature === "nomination-upload-result") {
                    $scope.data.nominationData.isShowGoback = true;
                }
                if ($scope.statusFeature === "nomination-review-summary") {
                    if ($rootScope.currentUser.recordTypeName === $rootScope.RECORD_TYPE_NAME.agtHol) {
                        $scope.getAccounts();
                    }
                    initAccount();
                }
                //20190110 rwern REQ-0694
                // Old submission code below
                /*
                if ($scope.statusFeature == 'nomination-review-purchase') {
                    var count = 0;
                    $scope.data.nominationData.isMpUpdated = false;
                    $scope.totalCost = 0;
                    $scope.totalGsCost = 0;
                    $scope.data.nominationData.purchaseSuccessList = [];
                    $scope.data.nominationData.purchaseFailList = [];
                    if ($scope.data.nominationData.purchaseList.length > 0) {
                        $scope.data.nominationData.isTransactionSuccess = false;
                    }
                    var listLen = $scope.data.nominationData.purchaseList.length;
                    var purchaseList = angular.copy($scope.data.nominationData.purchaseList);
                    purchaseList.forEach(function (item, index) {
                        StatusNominationService.purchaseMassNomination(item, $scope.data.nominationData.account.accountId, null, $rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId).then(function (value1) {
                            if (value1.success) {
                                $scope.data.nominationData.purchaseSuccessList.push(value1);
                                if (value1 && value1.nominationLevel.toLowerCase() == $scope.data.nomiProductList.globalService.ProductName.toLowerCase()) {
                                    $scope.totalGsCost += 1;
                                } else if (value1 && value1.nominationLevel.toLowerCase() !== $scope.data.nomiProductList.globalService.ProductName.toLowerCase()) {
                                    $scope.totalCost += parseInt(value1.nominationLevelUnitPrice);
                                }
                            } else if (value1.success === false) {
                                $scope.data.nominationData.purchaseFailList.push(value1);
                            }
                            removePurchaseListItem(item);
                            count++;
                            //console.log('jason purchaseMassNomination success')
                            if (count == listLen) {
                                var concatedPurchaseList = _.concat($scope.data.nominationData.purchaseSuccessList, $scope.data.nominationData.purchaseFailList);
                                StatusNominationService.commitMassNomination(concatedPurchaseList, $scope.data.nominationData.account.accountId, $rootScope.currentUser.id, null, $scope.data.nominationData.paymentComments).then(function (value2) {
                                    $scope.transactionNumber = value2.transactionNumber;
                                    $scope.data.nominationData.isTransactionSuccess = true;
                                    console.log('jason commitMassNomination success')
                                }, function (err) {
                                    $rootScope.$broadcast('showMessage', {
                                        type: 'alert',
                                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                                    });
                                });
                            }
                        }, function (err) {
                            $rootScope.$broadcast('showMessage', {
                                type: 'alert',
                                text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                            });
                        });
                    });
                }(
                */

                // fix when in payment page browser refresh show popup issue.
                if ($scope.statusFeature === 'nomination-review-purchase' && !fromState.name) {
                    $scope.hidePurchaseModal = true;
                }
            });

            $window.onbeforeunload = function (evt) {
                if ($scope.statusFeature === 'nomination-review-purchase' && !$scope.data.nominationData.isTransactionSuccess) {
                    return "{!JSENCODE($Label.SipSnm_Purchase_Close_Page_Header)}";
                }
            }

            // $window.onunload = function(evt) {
            //   if($scope.statusFeature == 'nomination-review-purchase' && !$scope.data.nominationData.isTransactionSuccess && $scope.data.nominationData && $scope.data.nominationData.purchaseList.length > 0) {
            //     StatusNominationService.commitMassNominationInInterruption($scope.data.nominationData.purchaseSuccessList, $scope.data.nominationData.purchaseFailList, $scope.data.nominationData.purchaseList, $scope.data.nominationData.account.accountId, $rootScope.currentUser.id, null, $scope.data.nominationData.paymentComments).then(function(data){
            //       console.log(data);
            //     }, function(err){
            //       console.log(err);
            //     });
            //   }
            //   $timeout(function(){
            //     console.log("timeout");
            //   },50000);
            // }

            $scope.continueLeavePurchase = function () {
                $scope.isConfirmLeavePurchase = true;
                $("#purchase-in-progress-reminder-modal").modal('hide');
                if ($scope.from === 'goNominationReviewPage') {
                    $scope.goNominationReviewPage();
                } else if ($scope.from === 'goHomePage') {
                    $scope.goHomePage('purchasePage');
                } else {
                    if ($scope.isSendReceipEmial && $scope.transactionNumber) {
                        AmenityService.sendEmail($rootScope.currentUser.id, $scope.transactionNumber).then(function (data) {
                            $state.go($scope.currentToState.name, $scope.currentToParams);
                        }, function (err) {
                            $rootScope.$broadcast('showMessage',
                              {
                                  type: 'alert',
                                  text: '{!JSENCODE($Label.Sip_Alert_Amenity_Fund_Failed)}'
                              });
                        });
                    } else {
                        console.log('jason timeout instead of sendEmail')
                        $timeout(function () {
                            $state.go($scope.currentToState.name, $scope.currentToParams);
                        }, 1000);
                    }
                }
            }

            function removePurchaseListItem(item) {
                var mpIndex = '';
                $scope.data.nominationData.purchaseList.forEach(function (data, index) {
                    if (data.mpNumber === item.mpNumber) {
                        mpIndex = index;
                    }
                });
                if (mpIndex !== '') {
                    $scope.data.nominationData.purchaseList.splice(mpIndex, 1);
                }
            }

            $scope.getAccounts = function (txtId) {
                var searchValue = $scope.accountSearchValue;
                var extId = '';
                if ($scope.data.callerAccount && $scope.data.callerAccount.extId) {
                    extId = $scope.data.callerAccount.extId;
                }

                $scope.aAccountList = [];
                StatusNominationService.getPayerAccForMassMP(
                  $rootScope.currentUser.id
                ).then(function (value) {
                    if (value.Accounts.length === 0 && searchValue !== '') {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: '{!JSENCODE($Label.Sip_AccountListNoData)}'
                          });
                    }
                    $scope.aAccountList = value.Accounts;
                    if (txtId) {
                        $('#' + txtId).dropdown('toggle');
                    }
                }, function (err) {

                    console.debug(err);
                    $scope.widgetSpinner = false;
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                      });
                });
            };

            function initAccount() {
                // to get the latest fund balance and global service
                if ($scope.data.preSelectedAccount) {
                    AccountService.getAccountById($scope.data.preSelectedAccount.accountId, $rootScope.currentUser.id).then(function (value) {
                        mapPreSelectedAccount(value);
                        // payer fund display in the page.
                        $scope.data.nominationData.account = {
                            'extId': $scope.data.preSelectedAccount.extId,
                            'balance': $scope.data.preSelectedAccount.balance,
                            'globalService': $scope.data.preSelectedAccount.globalService,
                            'AccountTilePermission': $scope.data.preSelectedAccount.AccountTilePermission,
                            'accountId': $scope.data.preSelectedAccount.accountId,
                            'bankingBalanceAccess': $scope.data.preSelectedAccount.bankingBalanceAccess
                        };
                        $scope.accountSearchValue = $scope.data.preSelectedAccount.accountName;
                        $scope.accountSymbol = $scope.data.preSelectedAccount.typeName;


                        $scope.currentGsPermission = ($rootScope.currentPermission.SIP_Global_Service_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations) || (($rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.agent || $rootScope.currentUser.profileName == $rootScope.PROFILE_TYPE.agtMgr) && ($scope.accountSymbol == $rootScope.ACC_TYPE.aor) && $scope.data.nominationData.account.accountTilePermission.GlobalServiceStatusNominations);
                        $scope.currentFbPermission = $scope.data.nominationData.account.bankingBalanceAccess &&
                          (($rootScope.currentPermission.SIP_Access_Banking_Balance__c &&
                            $scope.accountSymbol !== 'Discretionary') ||
                            ($rootScope.currentUser.permission.Access_Banking_Balance_Internal_Account__c &&
                              $scope.accountSymbol === 'Discretionary'));
                    }, function (err) {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    });
                }
            }

            function mapPreSelectedAccount(value) {
                $scope.data.preSelectedAccount.extId = value.ExtId;
                $scope.data.preSelectedAccount.balance = value.Fund;
                $scope.data.preSelectedAccount.globalService = value.GlobalService;
                $scope.data.preSelectedAccount.accountName = value.Name;
                $scope.data.preSelectedAccount.typeName = value.AccountType;
                $scope.data.preSelectedAccount.bankingBalanceAccess = value.BankingBalanceAccess;
                $scope.data.preSelectedAccount.accountTilePermission = value.AccountTilePermission;
                $scope.data.preSelectedAccount.isTestAccount = value.IsTestAccount;
                $scope.data.preSelectedAccount.accountId = value.Id;
            }

            $scope.selectAccount = function (account) {
                AccountService.getAccountById(account.Id, $rootScope.currentUser.id).then(function (value) {
                    // payer fund display in the page.
                    $scope.data.nominationData.account = {
                        'extId': value.ExtId,
                        'balance': value.Fund,
                        'globalService': value.GlobalService,
                        'AccountTilePermission': value.AccountTilePermission,
                        'accountId': value.Id,
                        'bankingBalanceAccess': value.BankingBalanceAccess
                    };
                    $scope.accountSearchValue = value.Name;
                    $scope.accountSymbol = value.AccountType;
                    $scope.currentGsPermission = ($rootScope.currentUser.permission.SIP_Global_Service_Status_Nominations__c && $scope.data.preSelectedAccount.accountTilePermission.GlobalServiceStatusNominations) || (($rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agent || $rootScope.currentUser.profileName === $rootScope.PROFILE_TYPE.agtMgr) && ($scope.accountSymbol === $rootScope.ACC_TYPE.aor) && $scope.data.nominationData.account.accountTilePermission.GlobalServiceStatusNominations);
                    $scope.currentFbPermission = $scope.data.nominationData.account.bankingBalanceAccess &&
                      (($rootScope.currentUser.permission.SIP_Access_Banking_Balance__c &&
                        $scope.accountSymbol !== 'Discretionary') ||
                        ($rootScope.currentUser.permission.Access_Banking_Balance_Internal_Account__c &&
                          $scope.accountSymbol === 'Discretionary'));
                }, function (err) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            }
            $scope.txtAccountKeyup = function ($event) {
                switch ($event.keyCode) {
                    case 13: // enter key trigger search
                        var txt = $event.target;
                        $(txt).dropdown('toggle');
                        break;
                    case 40:
                        var txt = $event.target;
                        var ddl = $(txt).attr('aria-describedby');
                        $('#' + ddl).find('li:first').focus();
                        break;
                    default:
                        var txtId = $event.target.id;
                        _($scope.aAccountList).forEach(function (listItem) {
                            if (listItem.Name === $scope.accountSearchValue) {
                                // todo issue?
                                //record = listItem;
                                return false;
                            }
                        });
                        break;
                }
            };

            $scope.filterAccount = function (txtId) {
                return function (item) {
                    var text = $scope.accountSearchValue;
                    if (((_.toLower(item.Name)).indexOf((_.toLower(text))) >= 0 ||
                      (item.ExtId && item.ExtId.indexOf(text)) >= 0) && item.AccountType !== $rootScope.ACC_TYPE.corp) {
                        return true;
                    }
                    else {
                        return false;
                    }
                };
            };

            $scope.filterBeneficiary = function (searchValue) {
                return function (item) {
                    if ((_.toLower(item.Name)).indexOf(_.toLower(searchValue)) >= 0 || (item.ExtId && item.ExtId.indexOf(searchValue) >= 0)) {
                        return true;
                    } else {
                        return false;
                    }
                }
            };

            $scope.checkComments = function () {
                $scope.data.nominationData.isMpUpdated = true;
            }
            //20190110 rwern REQ-0694
            // Go back to homepage after success modal closes
            angular.element('#nomination-success-modal').on('hidden.bs.modal', function (e) {
                $state.go($state.current.parent + '-home', {
                    feature: 'init'
                });
            });

            //20190110 rwern REQ-0694
            // Send nominations to batch for purchase
            function purchaseNominations() {
                $rootScope.mainSpinner = true;
                $scope.data.nominationData.isMpUpdated = false;
                $scope.totalCost = $scope.data.nominationData.shopCarFundBal;
                $scope.totalGsCost = $scope.data.nominationData.shopCarGSBal;
                var purchaseList = angular.copy($scope.data.nominationData.purchaseList);
                //console.log(purchaseList);
                StatusNominationService.massNominationBulkPurchase(
                  purchaseList, $scope.data.nominationData.account.accountId, null, $rootScope.currentUser.id, $scope.data.preSelectedAccount.accountId, null, $scope.data.nominationData.paymentComments, $scope.data.nominationData.shopCarFundBal, $scope.data.nominationData.shopCarGSBal
                ).then(function (value) {
                    $rootScope.mainSpinner = false;
                    console.log(value);
                    // If the batch ID isn't returned, an error must have occurred
                    if (value) {
                        $("#nomination-success-modal").modal();
                    } else {
                        $rootScope.$broadcast('showMessage', {
                            type: 'alert',
                            text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                        });
                    }
                }, function (err) {
                    console.debug(err);
                    $rootScope.mainSpinner = false;
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            }

            //20190107 rwern REQ-0694
            // Check if there is a batch job in progress already
            function checkNominationBatchStatus() {
                $scope.hasBatchInProgress = false;
                StatusNominationService.checkNominationBatchStatus($rootScope.currentUser.id).then(function (value) {
                    if (value) {
                        $scope.batchStatus = value;
                        if (value.InProgress) {
                            $scope.hasBatchInProgress = true;
                        }
                    }
                }, function (err) {
                    $rootScope.$broadcast('showMessage', {
                        type: 'alert',
                        text: '{!JSENCODE($Label.Sip_Alert_Generic_Error_Message)}'
                    });
                });
            }
        }
    }) ();
    (function () {
        "use strict";

        angular.module('bankingModule')
          .component('paymentMeetingOptionComp', {
              templateUrl: 'Sip_PaymentMeetingOptionCompTemplate' + '?lang={!language}',
              controller: controller,
              bindings: {
                  forms: '=',
                  accountType: '=', // company, agency, discretionary,
                  accSearchValue: '=',
                  accSearchId: '=',
                  accAgreementsPaymentInfo: '=',
                  accDeduct: '=',
                  preSelectedAccount: '=',
                  isValidFundOption: '=',
                  chargeAmount: '=',
                  amenityType: '='
              }
          });
        controller.$inject = ['$scope', '$rootScope', 'AccountService', 'util'];

        function controller($scope, $rootScope, AccountService, util) {
            var $ctrl = this;
            $ctrl.meetingAccountsList;
            $ctrl.currentAccount;
            $ctrl.agreementSearchList = [];
            $ctrl.agreementSelectedList = [];
            $ctrl.accSearchId = '';
            $ctrl.accAgreementsPaymentInfo = [];
            $ctrl.accDeduct = '';
            $ctrl.searchText = '';
            $ctrl.agreementSearchValue = '';
            $ctrl.accountSearchValue = '';
            // var PAYMENT_BY_ACCOUNT = "Credits For This Meeting Account"
            //20190215 lijuan update
            var PAYMENT_BY_ACCOUNT = '{!$Label.SipMW_Credits_Just_For_Meeting_Account}'


            $ctrl.selectAgreement = function (item, index) {
                $ctrl.currentSelectAgreement = angular.copy(item);
                $ctrl.currentSelectAgreement.debitAmount = '0';
                $ctrl.agreementSearchValue = item.name;
                $ctrl.hasCurrentAgreement = true
            };
            $ctrl.addAgreementToSelectedList = function () {
                var item = angular.copy($ctrl.currentSelectAgreement),
                  index = item.index
                var valid = $ctrl.agreementSelectedList.find(function (value) {
                    return value.index === index;
                })
                if (!valid) {
                    $ctrl.agreementSelectedList.push(item)
                    resetCurrentAgreement()
                } else {
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.SipMW_Cant_add_agreement_twice)}'
                      });
                }
                //$ctrl.agreementSelectedList.push(item)
            }
            $ctrl.removeAgreementFromSelectedList = function (index) {
                var removedItem = $ctrl.agreementSelectedList.splice(index, 1);
            }


            $ctrl.selectAccount = function (item) {
                $ctrl.currentAccount = item;
                $ctrl.accDeduct = $ctrl.currentAccount.paymentOptions.value
                $ctrl.accSearchId = $ctrl.currentAccount.Id;
                $ctrl.accSearchValue = $ctrl.currentAccount.Name;
                $ctrl.accountSearchValue = $ctrl.currentAccount.Name;
                resetAgreementList();
                searchAgreementByAccount(item.Id)
            };

            $ctrl.getAccSymbol = util.getAccSymbol;

            $ctrl.getAccClass = util.getAccClass;

            var extId = 0;
            var searchTxt = '';
            /**
             * $ctrl.accAgreementsPaymentInfo is used as a param to call backend action
             */
            function getAgreementsPaymentInfo() {
                $ctrl.accAgreementsPaymentInfo = {};
                var agreementPaymentList = [];
                var agreementSelectedList = angular.copy($ctrl.agreementSelectedList)
                var creditPayment = {
                    name: '',
                    meetingAccId: '',
                    creditFundBalance: 0,
                    creditDebitAmount: 0
                }
                agreementSelectedList.forEach(function (item) {
                    if (item.name === PAYMENT_BY_ACCOUNT) {
                        creditPayment.name = item.name
                        creditPayment.creditFundBalance = parseFloat(item.agreementBalance)
                        creditPayment.creditDebitAmount = parseFloat(item.debitAmount)
                        creditPayment.meetingAccId = $ctrl.currentAccount.Id
                    } else {
                        agreementPaymentList.push({
                            agreementID: item.id,
                            agreementFundBalance: parseFloat(item.agreementBalance),
                            agreementDebitAmount: parseFloat(item.debitAmount)
                        });
                    }
                })

                $ctrl.accAgreementsPaymentInfo.paymentByAgreementVMList = agreementPaymentList
                $ctrl.accAgreementsPaymentInfo.paymentByCreditVM = creditPayment

                    //console.log('$ctrl.accAgreementsPaymentInfo',$ctrl.accAgreementsPaymentInfo)
            }

            function resetAgreementList() {
                $ctrl.agreementSelectedList = [];
                $ctrl.agreementSearchList = [];
                $ctrl.calTotal();
            }

            getAccounts();
            function getAccounts() {
                $rootScope.mainSpinner = true;
                AccountService.getAccounts(
                  $rootScope.currentUser.id,
                  $ctrl.amenityType,
                  searchTxt,
                  extId,
                  $rootScope.currentUser.SIP_Current_Portal_App__c
                ).then(function (res) {
                    $rootScope.mainSpinner = false;
                    if (res) {
                        $ctrl.meetingAccountsList = res.Accounts;
                        $ctrl.meetingAccountsList.forEach(function (item) {

                            //use preSelectedAccount to initial current Account
                            if (item.Name === $ctrl.preSelectedAccount.accountName) {
                                $ctrl.selectAccount(item)
                            }
                        });
                        $ctrl.accSearchId = $ctrl.currentAccount.Id
                    } else {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: res.errorMessages[0]
                          });
                    }
                });
            }
            $ctrl.calTotal = function () {
                var total = 0;
                $ctrl.agreementSelectedList.forEach(function (item) {
                    total += parseFloat(item.debitAmount);
                });
                $ctrl.validFundOption(total)
                return total
            };


            $ctrl.validateChargeAmount = function (event, item) {
                if (item.agreementBalance < item.debitAmount) {
                    $rootScope.$broadcast('showMessage',
                      {
                          type: 'alert',
                          text: '{!JSENCODE($Label.SipMW_Cant_specify_amount_larger_than_balance)}'
                      });
                    item.debitAmount = item.agreementBalance
                }
                if (item.debitAmount === undefined || item.debitAmount === null || item.debitAmount == '') {
                    item.debitAmount = 0
                }
            }

            /***
             * valid the amount to decide the purchase btn available or not
             * @param amount
             */
            $ctrl.validFundOption = function (amount) {

                if ($ctrl.currentAccount.paymentOptions.value === $rootScope.ACCOUNT_PAYMENT_OPTION.agreement) {
                    $ctrl.isValidFundOption = amount === $ctrl.chargeAmount ? true : false;
                } else {
                    $ctrl.isValidFundOption = $ctrl.currentAccount.Fund >= $ctrl.chargeAmount ? true : false;
                    getAgreementsPaymentInfo()
                }
            }
            $scope.$watch('$ctrl.isValidFundOption', function (newValue) {
                if (newValue) {
                    getAgreementsPaymentInfo()
                }
            })


            resetCurrentAgreement()
            //$ctrl.chargeAmount = 118
            function searchAgreementByAccount(accId) {
                $rootScope.mainSpinner = true;
                AccountService.getAgreementsByMeetAccount($rootScope.currentUser.id, accId).then(function (res) {

                    $rootScope.mainSpinner = false;
                    if (res) {
                        $ctrl.searchText = '';
                        $ctrl.agreementSearchList = res.result;
                        resetCurrentAgreement()

                        $ctrl.agreementSearchList.forEach(function (item, index) {
                            item.index = index
                        })
                    } else {
                        $rootScope.$broadcast('showMessage',
                          {
                              type: 'alert',
                              text: res.errorMessages[0]
                          });
                    }
                })
            }

            function resetCurrentAgreement() {
                $ctrl.currentSelectAgreement = {
                    debitAmount: 0
                }
                $ctrl.agreementSearchValue = ''
                $ctrl.hasCurrentAgreement = false
            }
        }
    })();

    </script>
</apex:page>